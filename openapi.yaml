openapi: 3.0.3
info:
  title: GameChanger API Proxy
  version: v1.0.0
  description: A proxy for selected GameChanger API endpoints.
servers:
  - url: https://gc-stats-api.36technology.com/
    description: Production deployment
  - url: http://localhost:3001
    description: Local development server proxy

paths:
  /client-authenticate:
    post:
      summary: Authenticate Client
      operationId: post_client_authenticate
      tags:
        - Authentication
      requestBody:
        description: Client authentication credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  example: 'a0b1b2c8-522d-4b94-a6f5-fbab9342903d'
      responses:
        '200':
          description: Client token received
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /user-authenticate:
    post:
      summary: Authenticate User
      operationId: post_user_authenticate
      tags:
        - Authentication
      requestBody:
        description: User authentication credentials
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: User token received
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /user-authenticate-from-token:
    post:
      summary: Authenticate User from Token
      operationId: post_user_authenticate_from_token
      tags:
        - Authentication
      requestBody:
        description: User authentication from token credentials
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: User token received
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /users/:
    post:
      summary: Create User
      operationId: post_users
      tags:
        - Users
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request

  /teams/{teamID}/managers/:
    put:
      summary: Add or Update Team Manager
      operationId: put_manager
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Manager details
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Manager updated
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Manager added
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '404':
          description: Team not found

  /teams/{teamID}/managers/{userID}:
    delete:
      summary: Delete a Manager from a Team
      operationId: delete_manager
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          description: ID of the team
          schema:
            type: string
        - name: userID
          in: path
          required: true
          description: ID of the user (manager) to delete
          schema:
            type: string
      responses:
        '204':
          description: Manager deleted successfully
        '403':
          description: Forbidden
        '404':
          description: Team or User not found

  /users/{userId}:
    get:
      summary: Get User by ID
      operationId: get_user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: User not found

  /users/{email}/status:
    get:
      summary: Get User Status by Email
      operationId: get_user_status
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: User not found

  /users/{email}/send-login-link:
    post:
      summary: Send Login Link to User Email
      operationId: send_login_link
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Optional payload for sending login link
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Login link sent
        '400':
          description: Bad Request
        '404':
          description: User not found

  /users/{email}/send-email-confirmation:
    post:
      summary: Send Email Confirmation to User
      operationId: send-email-confirmation
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmation sent
        '400':
          description: Bad Request
        '404':
          description: User not found

  /teams/:
    post:
      summary: Create a new Team
      operationId: post_teams
      tags:
        - Teams
      requestBody:
        description: Team object to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'The Winners'
                sport:
                  type: string
                  example: 'Baseball'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid input

  /teams/{teamID}:
    get:
      summary: Get Team by ID
      operationId: get_team
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          description: ID of the team to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Team not found
    patch:
      summary: Update Team by ID
      operationId: patch_team
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          description: ID of the team to update
          schema:
            type: string
      requestBody:
        description: Partial team object for update
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid input
        '404':
          description: Team not found

  /teams/{teamID}/associations:
    get:
      summary: Get Team Associations
      operationId: get_team_associations
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.USER_TEAM_ASSOCIATIONS)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/fans:
    get:
      summary: Get Team Fans
      operationId: get_team_fans
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.TEAM_FAN)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/relationships:
    get:
      summary: Get Team Relationships
      operationId: get_team_relationships
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.USER_PLAYER_RELATIONSHIP)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/users:
    get:
      summary: Get Team Users
      operationId: get_team_users
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.TEAM_USER)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/messaging-channel:
    get:
      summary: Get Team Messaging Channel
      operationId: get_messaging_channel
      tags:
        - Teams
        - Messaging
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE, assuming generic object
        '404':
          description: Team not found

  /teams/{teamID}/avatar-image:
    get:
      summary: Get Team Avatar Image
      operationId: get_team_avatar_image
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json: # Ft.TEAM_AVATAR_IMAGE
              schema:
                type: object
        '404':
          description: Team not found
    post:
      summary: Upload Team Avatar Image
      operationId: post_team_avatar_image
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Image data (multipart/form-data usually, but proxy might handle JSON if GC API does)
        required: true
        content:
          application/json: # Assuming proxy translates if necessary
            schema:
              type: object
      responses:
        '200':
          description: Avatar image uploaded
        '400':
          description: Bad request
        '404':
          description: Team not found
    delete:
      summary: Delete Team Avatar Image
      operationId: delete_team_avatar_image
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Avatar image deleted
        '404':
          description: Team not found

  /teams/{teamID}/team-notification-setting:
    get:
      summary: Get Team Notification Settings
      operationId: get_team_notification_setting
      tags:
        - Teams
        - Notifications
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE, assuming generic object
        '404':
          description: Team not found
    patch:
      summary: Update Team Notification Settings
      operationId: patch_team_notification_setting
      tags:
        - Teams
        - Notifications
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Notification settings
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/high-school-info:
    get:
      summary: Get Team High School Info
      operationId: get_team_high_school_info
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found
    post:
      summary: Set Team High School Info
      operationId: post_team_high_school_info
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: High school info
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Info updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Team not found

  /integrations/teams/maxpreps/import:
    post:
      summary: Import MaxPreps Team
      operationId: post_maxpreps_team_import
      tags:
        - Integrations
      requestBody:
        description: MaxPreps import data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_MAXPREPS_TEAM_IMPORT
      responses:
        '200':
          description: Import result
          content:
            application/json:
              schema:
                type: object # Ft.MAXPREPS_IMPORT_RESULT
        '400':
          description: Bad request

  /me/bats-import/initiate:
    post:
      summary: Initiate BATS Import for Current User
      operationId: post_me_bats_import_initiate
      tags:
        - Users
        - Integrations
      responses:
        '200':
          description: BATS import initiated
          content:
            application/json:
              schema:
                type: object # Ft.BATS_IMPORT_INITIATE
        '400':
          description: Bad request

  /teams/{teamID}/external-associations:
    get:
      summary: Get Team External Associations
      operationId: get_team_external_associations
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found

  /teams/{teamID}/public-summary:
    get:
      summary: Get Public Team Summary
      operationId: get_public_team_summary
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found

  /teams/{teamID}/schedule:
    get:
      summary: Get Team Schedule Events
      operationId: get_schedule_events
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.EVENT)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/schedule/reimport-external-events:
    post:
      summary: Re-import External Events for Team Schedule
      operationId: post_reimport_external_events
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Re-import successful
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/schedule/events/:
    post:
      summary: Create Schedule Event for Team
      operationId: post_schedule_events
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Event data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_EVENT
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object # Ft.EVENT
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/schedule/events/{eventID}/:
    patch:
      summary: Update Schedule Event
      operationId: patch_schedule_event
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial event data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_EVENT
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                type: object # Ft.EVENT
        '400':
          description: Bad request
        '404':
          description: Team or Event not found
    # Note: JWR has delete_schedule_event as PATCH, which is unusual.
    # Representing as DELETE here for standard REST, but proxy will use PATCH.
    # Or, keep as PATCH if that's truly the API's method. For now, following Jwr.
    # delete:  <-- If it were a true DELETE
    # operationId: delete_schedule_event
    # ...
  # Keeping the duplicate path for the PATCH acting as DELETE as per JWR
  # This might cause issues in some tools if not handled carefully (e.g. if operationIds are not unique for path+method)
  # For Swagger UI, unique operationId is key.
  # Path for delete_schedule_event (which is a PATCH in JWR)
  # To avoid conflict with patch_schedule_event, we'd need a different operationId or rely on Swagger UI's display of method
  # Let's assume for now it's a distinct operation that happens to use PATCH.
  # If it were a true DELETE, it would be a separate method under the same path.
  # JWR implies it's a PATCH request that performs a delete-like action.
  # The existing patch_schedule_event operationId is for general patches.
  # JWR's delete_schedule_event has the same path and method (PATCH) as patch_schedule_event.
  # This means we need to differentiate them by operationId and summary if they are truly distinct operations.
  # Or, if `delete_schedule_event` is just a specific type of PATCH, it might be a specific payload to the patch_schedule_event endpoint.
  # Given JWR lists it separately, it's likely a distinct conceptual operation.
  # For now, I will create a separate operation for it, assuming it's distinct.
  # This might lead to two PATCH operations on the same path in Swagger.
  # A better OpenAPI design might differentiate paths or use query params if they were truly different.
  # For now, reflecting JWR as closely as possible:
  # This entry is problematic due to duplicate path + method with different operationId.
  # Let's assume 'delete_schedule_event' is the intended operation for PATCH to this path for deletion.
  # And 'patch_schedule_event' is for updates. The JWR structure implies two different PATCHes.
  # This is not ideal REST but reflecting the source.
  # To make this valid OpenAPI, one must be removed or path made unique if method is same.
  # For now, I will use the one defined as patch_schedule_event, and assume delete_schedule_event is a specific type of patch.
  # If it means "set deleted flag via PATCH", then it's part of patch_schedule_event.
  # Given the names, it's more likely the JWR entry "delete_schedule_event" should have been gr.DELETE.
  # I will assume it's a PATCH that effectively deletes or marks as deleted.
  # The current patch_schedule_event covers updates.

  /teams/{teamID}/schedule/events/{eventID}/video-stream/:
    get:
      summary: Get Schedule Event Video Stream
      operationId: get_schedule_event_video_stream
      tags:
        - Teams
        - Schedule
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.SCHEDULE_EVENT_VIDEO_STREAM
        '404':
          description: Not found

  /teams/{teamID}/rollover:
    patch:
      summary: Perform Roster Rollover for Team
      operationId: patch_roster_rollover
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Rollover configuration
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_ROSTER_ROLLOVER
      responses:
        '200':
          description: Rollover successful
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Team not found

  /events/{eventID}:
    get:
      summary: Get Event by ID
      operationId: get_event
      tags:
        - Events
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.EVENT
        '404':
          description: Event not found

  /teams/{teamID}/schedule/events/{eventID}/rsvp-responses:
    get:
      summary: Get RSVP Responses for an Event
      operationId: get_event_rsvp
      tags:
        - Teams
        - Schedule
        - RSVP
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.RSVP_RESPONSE)
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventID}/rsvp-responses/player/{playerID}:
    put:
      summary: Set RSVP Response for a Player
      operationId: put_event_rsvp_for_player
      tags:
        - Teams
        - Schedule
        - RSVP
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: RSVP response data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PUT_RSVP_RESPONSE
      responses:
        '200':
          description: RSVP updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventID}/rsvp-responses/user/{userID}:
    put:
      summary: Set RSVP Response for a User
      operationId: put_event_rsvp_for_user
      tags:
        - Teams
        - Schedule
        - RSVP
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: RSVP response data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PUT_RSVP_RESPONSE
      responses:
        '200':
          description: RSVP updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /teams/{teamID}/schedule/event-series/:
    post:
      summary: Create Schedule Event Series
      operationId: post_schedule_event_series
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Event series data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_EVENT_SERIES
      responses:
        '201':
          description: Event series created
          content:
            application/json:
              schema:
                type: object # Ft.EVENT_SERIES
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/schedule/event-series/{seriesID}:
    get:
      summary: Get Schedule Event Series by ID
      operationId: get_schedule_event_series
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: seriesID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.EVENT_SERIES
        '404':
          description: Not found

  /teams/{teamID}/schedule/event-series/{seriesID}/events:
    get:
      summary: Get Events in a Schedule Event Series
      operationId: get_schedule_event_series_events
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: seriesID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of events
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/schedule/event-series/{seriesID}/:
    patch:
      summary: Update Schedule Event Series
      operationId: patch_schedule_event_series
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: seriesID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial event series data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_EVENT_SERIES
      responses:
        '200':
          description: Event series updated
          content:
            application/json:
              schema:
                type: object # Ft.EVENT_SERIES
        '400':
          description: Bad request
        '404':
          description: Not found
    # JWR's delete_schedule_event_series is a PATCH. Similar to delete_schedule_event.
    # Assuming it's a distinct operation.

  /teams/{teamID}/game-summaries:
    get:
      summary: Get Team Game Summaries
      operationId: get_team_game_summaries
      tags:
        - Teams
        - Stats
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.GAME_SUMMARY)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/game-summaries/{eventID}:
    get:
      summary: Get Specific Team Game Summary by Event ID
      operationId: get_team_game_summary
      tags:
        - Teams
        - Stats
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.GAME_SUMMARY
        '404':
          description: Not found

  /teams/{teamID}/schedule/batch-simple-scorekeeping-data:
    get:
      summary: Get Batch Simple Scorekeeping Game Data
      operationId: get_batch_simple_scorekeeping_game_data_result
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.BATCH_SIMPLE_SCOREKEEPING_GAME_DATA_RESULT)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/schedule/events/{eventId}/simple-scorekeeping/game-data:
    get:
      summary: Get Simple Scorekeeping Game Data for an Event
      operationId: get_simple_scorekeeping_game_data
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId # Note: JWR uses eventId, OpenAPI convention often uses eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.SIMPLE_SCOREKEEPING_GAME_DATA
        '404':
          description: Not found
    post:
      summary: Create Simple Scorekeeping Game Data for an Event
      operationId: post_simple_scorekeeping_game_data
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Scorekeeping data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE, assuming generic object for now
      responses:
        '201':
          description: Data created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found
    patch:
      summary: Update Simple Scorekeeping Game Data for an Event
      operationId: patch_simple_scorekeeping_game_data
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial scorekeeping data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '200':
          description: Data updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventId}/simple-scorekeeping/game-data-after-game:
    post:
      summary: Post Simple Scorekeeping Game Data After Game
      operationId: post_simple_scorekeeping_game_data_after_game
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Scorekeeping data
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
    patch:
      summary: Patch Simple Scorekeeping Game Data After Game
      operationId: patch_simple_scorekeeping_game_data_after_game
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Scorekeeping data
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request

  /teams/{teamID}/schedule/events/{eventId}/simple-scorekeeping/share-time:
    post:
      summary: Post Simple Scorekeeping Share Time
      operationId: post_simple_scorekeeping_share_time
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Share time data
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful
        '400':
          description: Bad request

  /teams/{teamID}/schedule/events/{eventId}/scorekeeping-data/bats:
    get:
      summary: Get BATS Scorekeeping Data for an Event
      operationId: get_event_bats_scorekeeping_data
      tags:
        - Teams
        - Scorekeeping
        - BATS
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Not found

  /teams/{teamID}/players:
    get:
      summary: Get Players for a Team
      operationId: get_players
      tags:
        - Teams
        - Players
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.PLAYER)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/players/:
    post:
      summary: Add Player to Team
      operationId: post_players
      tags:
        - Teams
        - Players
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Player data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_PLAYER
      responses:
        '201':
          description: Player added
          content:
            application/json:
              schema:
                type: object # Ft.PLAYER
        '400':
          description: Bad request
        '404':
          description: Team not found

  /players/{playerID}:
    patch:
      summary: Update Player by ID
      operationId: patch_player
      tags:
        - Players
      parameters:
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial player data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_PLAYER
      responses:
        '200':
          description: Player updated
          content:
            application/json:
              schema:
                type: object # Ft.PLAYER
        '400':
          description: Bad request
        '404':
          description: Player not found
    delete:
      summary: Delete Player by ID
      operationId: delete_player
      tags:
        - Players
      parameters:
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Player deleted
        '404':
          description: Player not found

  /players/{playerID}/family-relationships:
    patch:
      summary: Update Player Family Relationships
      operationId: patch_player_family_relationships
      tags:
        - Players
      parameters:
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Family relationship data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_PLAYER_FAMILY_RELATIONSHIPS
      responses:
        '200':
          description: Relationships updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Player not found

  /teams/{teamID}/simple-scorekeeping/config:
    get:
      summary: Get Simple Scorekeeping Team Config
      operationId: get_simple_scorekeeping_team_config
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found
    post:
      summary: Set Simple Scorekeeping Team Config
      operationId: post_simple_scorekeeping_team_config
      tags:
        - Teams
        - Scorekeeping
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Config data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '200':
          description: Config updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{owningTeamId}/opponent/:
    post:
      summary: Create Opponent Team
      operationId: post_opponent_team
      tags:
        - Teams
        - Opponents
      parameters:
        - name: owningTeamId # JWR uses owningTeamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Opponent team data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_OPPONENT_TEAM
      responses:
        '201':
          description: Opponent team created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Owning team not found

  /teams/{owningTeamID}/opponent/{rootTeamID}:
    get:
      summary: Get Opponent Team
      operationId: get_opponent_team
      tags:
        - Teams
        - Opponents
      parameters:
        - name: owningTeamID
          in: path
          required: true
          schema:
            type: string
        - name: rootTeamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.OPPONENT_TEAM
        '404':
          description: Not found

  /me/user:
    get:
      summary: Get Current User Details
      operationId: get_me_user
      tags:
        - Users
        - Me
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.USER
        '401':
          description: Unauthorized

  /me/subscription-information:
    get:
      summary: Get Current User Subscription Information
      operationId: get_me_subscription_information
      tags:
        - Users
        - Me
        - Subscriptions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.SUBSCRIPTION_INFORMATION
        '401':
          description: Unauthorized

  /me/teams:
    get:
      summary: Get Current User's Teams
      operationId: get_me_team # JWR uses get_me_team, not get_me_teams
      tags:
        - Users
        - Me
        - Teams
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.TEAM)
                items:
                  type: object
        '401':
          description: Unauthorized

  /teams/{teamID}/season-stats: # JWR has params: vr() for get_me_team_stats, but path indicates teamID
    get:
      summary: Get Team Season Stats
      operationId: get_me_team_stats # Assuming this is for a specific team, not "me"
      tags:
        - Teams
        - Stats
      parameters:
        - name: teamID # Added based on path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.TEAM_SEASON_STATS
        '401':
          description: Unauthorized
        '404':
          description: Team not found

  /teams/{teamID}/players/{playerID}/stats:
    get:
      summary: Get Player Stats for a Team
      operationId: get_player_stats
      tags:
        - Teams
        - Players
        - Stats
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.PLAYER_STATS)
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventID}/player-stats:
    get:
      summary: Get Player Stats for an Event
      operationId: get_player_game_stats
      tags:
        - Teams
        - Schedule
        - Stats
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.PLAYER_GAME_STATS, assuming object not array
        '404':
          description: Not found

  /game-streams/{gameStreamID}/game-stat-edit-collection/{lastGameStreamEventID}:
    get:
      summary: Get Game Stat Edit Collection
      operationId: get_game_stat_edit_collection
      tags:
        - GameStreams
        - Stats
      parameters:
        - name: gameStreamID
          in: path
          required: true
          schema:
            type: string
        - name: lastGameStreamEventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.GAME_STAT_EDIT_COLLECTION
        '404':
          description: Not found
    put:
      summary: Update Game Stat Edit Collection
      operationId: put_game_stat_edit_collection
      tags:
        - GameStreams
        - Stats
      parameters:
        - name: gameStreamID
          in: path
          required: true
          schema:
            type: string
        - name: lastGameStreamEventID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Stat edit collection data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PUT_GAME_STAT_EDIT_COLLECTION
      responses:
        '200':
          description: Collection updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /me/permissions:
    get:
      summary: Get Current User Permissions
      operationId: get_me_permissions
      tags:
        - Users
        - Me
        - Permissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '401':
          description: Unauthorized

  /me/permissions/{scopingEntityType}/{scopingEntityId}:
    get:
      summary: Get Current User Permissions for a Scoped Entity
      operationId: get_me_permissions_v2
      tags:
        - Users
        - Me
        - Permissions
      parameters:
        - name: scopingEntityType
          in: path
          required: true
          schema:
            type: string
        - name: scopingEntityId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '401':
          description: Unauthorized
        '404':
          description: Entity not found

  /me/permissions/all:
    get:
      summary: Get All Current User Permissions
      operationId: get_me_permissions_v2_all
      tags:
        - Users
        - Me
        - Permissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '401':
          description: Unauthorized

  /me/password:
    patch:
      summary: Update Current User Password
      operationId: patch_me_password
      tags:
        - Users
        - Me
      requestBody:
        description: Password update data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_PASSWORD
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /me/external-calendar-sync-url:
    get:
      summary: Get External Calendar Sync URL for Current User
      operationId: get_me_external_calendar_sync_url
      tags:
        - Users
        - Me
        - Calendar
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE, likely contains a URL string
        '401':
          description: Unauthorized

  /me/pending-teams:
    get:
      summary: Get Pending Team Invitations for Current User
      operationId: get_me_pending_teams
      tags:
        - Users
        - Me
        - Teams
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of pending teams
                items:
                  type: object
        '401':
          description: Unauthorized

  /me/client-backups:
    post:
      summary: Create Client Backup for Current User
      operationId: post_me_client_backup
      tags:
        - Users
        - Me
        - Backups
      requestBody:
        description: Backup data
        required: true # Qt.NONE, but POST implies body
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Backup created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /me/relationship-requests/{teamID}:
    delete:
      summary: Delete Relationship Request for Current User
      operationId: delete_me_relationship_requests
      tags:
        - Users
        - Me
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Relationship request deleted
        '401':
          description: Unauthorized
        '404':
          description: Not found

  /me/tokens/twilio-chat:
    get:
      summary: Get Twilio Chat Token for Current User
      operationId: get_me_twilio_chat
      tags:
        - Users
        - Me
        - Tokens
        - Messaging
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE, likely contains token string
        '401':
          description: Unauthorized

  /me/organizations:
    get:
      summary: Get Organizations for Current User
      operationId: get_me_organizations
      tags:
        - Users
        - Me
        - Organizations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.ORGANIZATION_WITH_ROLE)
                items:
                  type: object
        '401':
          description: Unauthorized

  /me/tokens/firebase:
    post:
      summary: Register Firebase Token for Current User
      operationId: post_me_firebase_token
      tags:
        - Users
        - Me
        - Tokens
        - Notifications
      requestBody:
        description: Firebase token
        required: true # Qt.NONE, but POST implies body
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token registered
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /sync-topics/teams/{teamID}/updates:
    get:
      summary: Get Team Sync Topic Updates
      operationId: get_team_updates
      tags:
        - Sync
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found

  /sync-topics/teams/{teamID}/topic-state:
    get:
      summary: Get Team Sync Topic State
      operationId: get_team_topic_state
      tags:
        - Sync
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Team not found

  /sync-topics/global/topic-state:
    get:
      summary: Get Global Sync Topic State
      operationId: get_global_topic_state
      tags:
        - Sync
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE

  /channels/{channelId}/images/{imageId}:
    get:
      summary: Get Messaging Channel Image
      operationId: get_messaging_channel_image
      tags:
        - Messaging
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation # Ft.NONE - likely image binary or redirect
          content:
            image/*: {} # Placeholder for image types
        '404':
          description: Not found

  /channels/{channelId}/images:
    get:
      summary: Get All Images for a Messaging Channel
      operationId: get_messaging_channel_images
      tags:
        - Messaging
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of image metadata
                items:
                  type: object
        '404':
          description: Channel not found
    post:
      summary: Upload Image to Messaging Channel
      operationId: post_messaging_channel_image
      tags:
        - Messaging
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Image data (multipart/form-data usually)
        required: true
        content:
          application/json: # Assuming proxy translates if necessary
            schema:
              type: object
      responses:
        '200':
          description: Image uploaded
        '400':
          description: Bad request
        '404':
          description: Channel not found

  /channels/{channelId}/videos:
    get:
      summary: Get All Videos for a Messaging Channel
      operationId: get_messaging_channel_videos
      tags:
        - Messaging
        - Channels
        - Video
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of video metadata
                items:
                  type: object
        '404':
          description: Channel not found
    post:
      summary: Upload Video to Messaging Channel
      operationId: post_messaging_channel_video
      tags:
        - Messaging
        - Channels
        - Video
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Video data (multipart/form-data usually)
        required: true
        content:
          application/json: # Assuming proxy translates if necessary
            schema:
              type: object
      responses:
        '200':
          description: Video uploaded
        '400':
          description: Bad request
        '404':
          description: Channel not found

  /channels/{channelId}/videos/{videoId}:
    get:
      summary: Get Messaging Channel Video
      operationId: get_messaging_channel_video
      tags:
        - Messaging
        - Channels
        - Video
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: videoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation # Ft.NONE - likely video binary or redirect
          content:
            video/*: {} # Placeholder for video types
        '404':
          description: Not found

  /channels/{channelId}/media/{mediaId}:
    delete:
      summary: Delete Media from Messaging Channel
      operationId: delete_messaging_media
      tags:
        - Messaging
        - Channels
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: string
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Media deleted
        '404':
          description: Not found

  /simple-scorekeeping-configs/:
    get:
      summary: Get Simple Scorekeeping Configurations
      operationId: get_simple_scorekeeping_configs
      tags:
        - Scorekeeping
        - Configurations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE, assuming map or array of configs

  /authentication-provider/{provider}/user-authenticate:
    post:
      summary: Authenticate User via Authentication Provider
      operationId: post_provider_user_authenticate
      tags:
        - Authentication
        - Integrations
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Provider-specific authentication data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object # Ft.NONE, likely user/token info
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /integrations/teams:
    get:
      summary: Get Integrated Teams (BSB)
      operationId: get_bsb_teams
      tags:
        - Integrations
        - Teams
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of teams
                items:
                  type: object

  /integrations/teams/import:
    post:
      summary: Import Team from Integration
      operationId: post_team_import
      tags:
        - Integrations
        - Teams
      requestBody:
        description: Import configuration
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '200':
          description: Import successful
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request

  /player-attributes/{playerId}/bats/:
    get:
      summary: Get BATS Player Attributes
      operationId: get_bats_player_attributes
      tags:
        - Players
        - Attributes
        - BATS
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Player not found
    post:
      summary: Create BATS Player Attributes
      operationId: post_bats_player_attributes
      tags:
        - Players
        - Attributes
        - BATS
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: BATS player attributes data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_BATS_PLAYER_ATTRIBUTES
      responses:
        '201':
          description: Attributes created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Player not found
    patch:
      summary: Update BATS Player Attributes
      operationId: patch_bats_player_attributes
      tags:
        - Players
        - Attributes
        - BATS
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial BATS player attributes data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_BATS_PLAYER_ATTRIBUTES
      responses:
        '200':
          description: Attributes updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Player not found

  /scorekeeping-data/bats/{batsScorekeepingDataId}/:
    get:
      summary: Get BATS Scorekeeping Data by ID
      operationId: get_bats_scorekeeping_data
      tags:
        - Scorekeeping
        - BATS
      parameters:
        - name: batsScorekeepingDataId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Not found
    post:
      summary: Create BATS Scorekeeping Data
      operationId: post_bats_scorekeeping_data
      tags:
        - Scorekeeping
        - BATS
      parameters:
        - name: batsScorekeepingDataId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Scorekeeping data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '201':
          description: Data created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
    patch:
      summary: Update BATS Scorekeeping Data
      operationId: patch_bats_scorekeeping_data
      tags:
        - Scorekeeping
        - BATS
      parameters:
        - name: batsScorekeepingDataId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial scorekeeping data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '200':
          description: Data updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /scorekeeping-data/bats/{batsScorekeepingDataId}/event-ids:
    get:
      summary: Get Event IDs for BATS Scorekeeping Data
      operationId: get_bats_scorekeeping_data_event_ids
      tags:
        - Scorekeeping
        - BATS
      parameters:
        - name: batsScorekeepingDataId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # Ft.NONE, assuming array of event IDs
                items:
                  type: string
        '404':
          description: Not found

  /scorekeeping-events/bats/{batsScorekeepingEventId}/:
    get:
      summary: Get BATS Scorekeeping Event by ID
      operationId: get_bats_scorekeeping_event
      tags:
        - Scorekeeping
        - BATS
        - Events
      parameters:
        - name: batsScorekeepingEventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Not found
    post:
      summary: Create BATS Scorekeeping Event
      operationId: post_bats_scorekeeping_event
      tags:
        - Scorekeeping
        - BATS
        - Events
      parameters:
        - name: batsScorekeepingEventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Event data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request

  /pregame-data/:
    post:
      summary: Create Pregame Data
      operationId: post_pregame_data
      tags:
        - Pregame
      requestBody:
        description: Pregame data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.NONE
      responses:
        '201':
          description: Pregame data created
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request

  /pregame-data/{pregameDataId}:
    get:
      summary: Get Pregame Data by ID
      operationId: get_pregame_data
      tags:
        - Pregame
      parameters:
        - name: pregameDataId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '404':
          description: Not found

  /search/opponent-import:
    get:
      summary: Search for Opponent Teams to Import
      operationId: opponent_search
      tags:
        - Search
        - Opponents
      parameters: # JWR lists many params for this
        - name: startAt
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: ageGroup
          in: query
          schema:
            type: string
        - name: competitionLevel
          in: query
          schema:
            type: string
        - name: city
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: season
          in: query
          schema:
            type: string
        - name: year
          in: query
          schema:
            type: integer
        - name: sport
          in: query
          schema:
            type: string
        - name: filterSeasons
          in: query
          schema:
            type: boolean # Assuming based on name
        - name: filterIncludeOlderSeasons
          in: query
          schema:
            type: boolean # Assuming
        - name: filterCity
          in: query
          schema:
            type: string
        - name: filterState
          in: query
          schema:
            type: string
        - name: filterLat
          in: query
          schema:
            type: number
            format: double
        - name: filterLong
          in: query
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object # Ft.OPPONENT_TEAM_IMPORT_SEARCH_RESULT
        '400':
          description: Bad request

  /search/maxpreps-school:
    get:
      summary: Search for MaxPreps Schools
      operationId: get_maxpreps_school_search
      tags:
        - Search
        - Integrations
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: start_at # JWR uses start_at
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object # Ft.MAXPREPS_SCHOOL_SEARCH_RESULTS
        '400':
          description: Bad request

  /teams/{teamID}/opponent/import:
    post:
      summary: Import Opponent Team for a Team
      operationId: post_opponent_team_import
      tags:
        - Teams
        - Opponents
        - Integrations
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Opponent import data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_OPPONENT_TEAM_IMPORT
      responses:
        '200': # Assuming 200 for ID response, could be 201
          description: Import successful, returns opponent team ID
          content:
            application/json:
              schema:
                type: object # Ft.OPPONENT_TEAM_ID
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/opponent/legacy-import:
    post:
      summary: Import Legacy Opponent Team
      operationId: post_opponent_team_legacy_import
      tags:
        - Teams
        - Opponents
        - Integrations
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Legacy opponent import data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_OPPONENT_TEAM_LEGACY_IMPORT
      responses:
        '200':
          description: Import successful, returns opponent team ID
          content:
            application/json:
              schema:
                type: object # Ft.OPPONENT_TEAM_ID
        '400':
          description: Bad request
        '404':
          description: Team not found

  /events/{eventID}/best-game-stream-id:
    get:
      summary: Get Best Game Stream ID for an Event
      operationId: get_event_best_stream_id
      tags:
        - Events
        - GameStreams
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.EVENT_BEST_STREAM_ID
        '404':
          description: Event not found

  /game-streams/{streamID}:
    get:
      summary: Get Game Stream by ID
      operationId: get_game_stream
      tags:
        - GameStreams
      parameters:
        - name: streamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.GAME_STREAM
        '404':
          description: Stream not found

  /game-streams/{streamID}/events:
    get:
      summary: Get Events for a Game Stream
      operationId: get_game_stream_events
      tags:
        - GameStreams
        - Events
      parameters:
        - name: streamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.GAME_STREAM_EVENT)
                items:
                  type: object
        '404':
          description: Stream not found

  /game-streams/gamestream-viewer-payload-lite/{eventID}:
    get:
      summary: Get GameStream Viewer Payload Lite
      operationId: get_game_stream_viewer_payload_lite
      tags:
        - GameStreams
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.GAME_STREAM_VIEWER_PAYLOAD_LITE
        '404':
          description: Event not found

  /bats-starting-lineups/{lineupId}:
    get:
      summary: Get BATS Starting Lineup by ID
      operationId: get_bats_starting_lineup
      tags:
        - BATS
        - Lineups
      parameters:
        - name: lineupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.BATS_STARTING_LINEUP
        '404':
          description: Lineup not found
    patch:
      summary: Update BATS Starting Lineup
      operationId: patch_bats_starting_lineup
      tags:
        - BATS
        - Lineups
      parameters:
        - name: lineupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial lineup data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_BATS_STARTING_LINEUP
      responses:
        '200':
          description: Lineup updated
          content:
            application/json:
              schema:
                type: object # Ft.BATS_STARTING_LINEUP
        '400':
          description: Bad request
        '404':
          description: Lineup not found

  /bats-starting-lineups/:
    post:
      summary: Create BATS Starting Lineup
      operationId: post_bats_starting_lineup
      tags:
        - BATS
        - Lineups
      requestBody:
        description: Lineup data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_BATS_STARTING_LINEUP
      responses:
        '201':
          description: Lineup created
          content:
            application/json:
              schema:
                type: object # Ft.BATS_STARTING_LINEUP
        '400':
          description: Bad request

  /bats-starting-lineups/latest/{teamID}:
    get:
      summary: Get Latest BATS Starting Lineup for a Team
      operationId: get_latest_bats_starting_lineup
      tags:
        - BATS
        - Lineups
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.LATEST_BATS_STARTING_LINEUP
        '404':
          description: Team or lineup not found

  /players/{playerID}/profile-photo:
    get:
      summary: Get Player Profile Photo
      operationId: get_player_profile_photo
      tags:
        - Players
      parameters:
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation # Ft.NONE - likely image binary or redirect
          content:
            image/*: {}
        '404':
          description: Player not found

  /organizations/{orgID}:
    get:
      summary: Get Organization by ID
      operationId: get_organization
      tags:
        - Organizations
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION
        '404':
          description: Organization not found

  /organizations/{orgID}/teams:
    get:
      summary: Get Teams for an Organization
      operationId: get_organization_teams
      tags:
        - Organizations
        - Teams
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.ORGANIZATION_TEAM)
                items:
                  type: object
        '404':
          description: Organization not found
    post:
      summary: Add Teams to Organization
      operationId: post_organization_teams
      tags:
        - Organizations
        - Teams
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Team association data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_ORGANIZATION_TEAMS
      responses:
        '200': # Or 201/204 depending on actual behavior
          description: Teams added/updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Organization not found

  /organizations/{orgID}/users:
    get:
      summary: Get Users for an Organization
      operationId: get_organization_users
      tags:
        - Organizations
        - Users
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION_USER_ASSOCIATIONS
        '404':
          description: Organization not found

  /organizations/{orgID}/events:
    post:
      summary: Create Organization Schedule Event
      operationId: post_organization_schedule_event
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Event data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_ORGANIZATION_SCHEDULE_EVENT
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION_SCHEDULE_EVENT
        '400':
          description: Bad request
        '404':
          description: Organization not found

  /organizations/{orgID}/events/bulk:
    post:
      summary: Bulk Create Organization Schedule Events
      operationId: post_organization_schedule_event_bulk
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Bulk event data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_ORGANIZATION_SCHEDULE_EVENT_BULK
      responses:
        '200': # Or 202 Accepted
          description: Bulk operation processed
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Organization not found

  /organizations/{orgID}/events/bulk/validate:
    post:
      summary: Validate Bulk Organization Schedule Events
      operationId: post_organization_schedule_event_bulk_validate
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Bulk event data for validation
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_ORGANIZATION_SCHEDULE_EVENT_BULK_VALIDATE
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION_SCHEDULE_EVENT_BULK_VALIDATE
        '400':
          description: Bad request
        '404':
          description: Organization not found

  /organizations/{orgID}/events/{eventID}:
    patch:
      summary: Update Organization Schedule Event
      operationId: patch_organization_schedule_event
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial event data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_ORGANIZATION_SCHEDULE_EVENT
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION_SCHEDULE_EVENT
        '400':
          description: Bad request
        '404':
          description: Not found

  /organizations/{orgID}/events/bulk/template:
    get:
      summary: Get Bulk Upload Template for Organization Schedule Events
      operationId: get_organization_schedule_event_bulk_upload_template
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json: # Ft.ORGANIZATION_SCHEDULE_EVENT_BULK_UPLOAD_TEMPLATE - could be CSV/Excel too
              schema:
                type: object # Or string if it's raw template data
        '404':
          description: Organization not found

  /organizations/{orgID}/leaderboards:
    get:
      summary: Get Organization Leaderboards
      operationId: get_organization_leaderboards
      tags:
        - Organizations
        - Leaderboards
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.ORGANIZATION_LEADERBOARDS
        '404':
          description: Organization not found

  /organizations/{orgID}/events/results/export:
    get:
      summary: Export Organization Schedule Event Results
      operationId: get_organization_schedule_event_results_export
      tags:
        - Organizations
        - Schedule
        - Events
      parameters:
        - name: orgID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json: # Ft.ORGANIZATION_SCHEDULE_EVENT_RESULTS_EXPORT - could be CSV/Excel
              schema:
                type: object # Or string
        '404':
          description: Organization not found

  /teams/{teamID}/video-clips/player/{playerID}/clips:
    get:
      summary: Get Player Video Clip Asset Metadata
      operationId: get_player_video_clip_asset_metadata
      tags:
        - Teams
        - Video
        - Players
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: playerID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.VIDEO_CLIP_ASSET_METADATA)
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/video-clips/playable-clip/{clipID}/clip:
    get:
      summary: Get Playable Video Clip
      operationId: get_video_clip
      tags:
        - Teams
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: clipID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.VIDEO_CLIP
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventID}/video-stream/assets:
    get:
      summary: Get All Schedule Event Stream Asset Metadata
      operationId: get_all_schedule_event_stream_asset_metadata
      tags:
        - Teams
        - Schedule
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.VIDEO_STREAM_ASSET_METADATA)
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/schedule/events/{eventID}/video-stream/assets/playback:
    get:
      summary: Get Stream Asset Playback Data
      operationId: get_stream_asset_playback_data
      tags:
        - Teams
        - Schedule
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.VIDEO_STREAM_ASSET_PLAYBACK_DATA)
                items:
                  type: object
        '404':
          description: Not found

  /teams/{teamID}/video-stream/assets:
    get:
      summary: Get All Team Stream Asset Metadata
      operationId: get_all_team_stream_asset_metadata
      tags:
        - Teams
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.VIDEO_STREAM_ASSET_METADATA)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/schedule/events/{eventID}/video-stream/assets/{assetID}/hidden:
    patch:
      summary: Update Stream Asset Metadata (Hidden Status)
      operationId: patch_stream_asset_metadata
      tags:
        - Teams
        - Schedule
        - Video
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
        - name: assetID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Asset metadata update (e.g., hidden status)
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_STREAM_ASSET_METADATA
      responses:
        '200':
          description: Asset metadata updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /teams/{teamID}/community-pass:
    post:
      summary: Create Team Community Pass
      operationId: post_team_community_pass
      tags:
        - Teams
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Community pass data
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.POST_TEAM_COMMUNITY_PASS
      responses:
        '200': # Or 201
          description: Community pass created/updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Team not found

  /teams/{teamID}/opponents:
    get:
      summary: Get Opponent Teams for a Team
      operationId: get_opponent_teams
      tags:
        - Teams
        - Opponents
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.OPPONENT_TEAM)
                items:
                  type: object
        '404':
          description: Team not found

  /teams/{teamID}/opponent/{opponentTeamID}:
    patch:
      summary: Update Opponent Team
      operationId: patch_opponent_team
      tags:
        - Teams
        - Opponents
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: opponentTeamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Partial opponent team data for update
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_OPPONENT_TEAM
      responses:
        '200':
          description: Opponent team updated
          content:
            application/json:
              schema:
                type: object # Ft.NONE
        '400':
          description: Bad request
        '404':
          description: Not found

  /public/athlete-profile/{handle}:
    get:
      summary: Get Public Athlete Profile by Handle
      operationId: get_athlete_profile_by_handle_public
      tags:
        - Public
        - Athletes
      parameters:
        - name: handle
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.ATHLETE_PROFILE_PUBLIC
        '404':
          description: Profile not found

  /public/athlete-profile/{athleteProfileID}/clips:
    get:
      summary: Get Public Athlete Profile Clips
      operationId: get_athlete_profile_clips_public
      tags:
        - Public
        - Athletes
        - Video
      parameters:
        - name: athleteProfileID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array # pc(Ft.ATHLETE_PROFILE_CLIPS_PUBLIC)
                items:
                  type: object
        '404':
          description: Profile not found

  /public/athlete-profile/{athleteProfileID}/clips/{clipID}/authenticatedUrl:
    get:
      summary: Get Authenticated URL for Public Athlete Profile Clip
      operationId: get_athlete_profile_authenticated_clip_url_public
      tags:
        - Public
        - Athletes
        - Video
      parameters:
        - name: athleteProfileID
          in: path
          required: true
          schema:
            type: string
        - name: clipID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.VIDEO_STREAM_PLAYBACK_DATA
        '404':
          description: Not found

  /public/athlete-profile/{athleteProfileID}/career-stats:
    get:
      summary: Get Public Athlete Profile Career Stats
      operationId: get_athlete_profile_career_stats_public
      tags:
        - Public
        - Athletes
        - Stats
      parameters:
        - name: athleteProfileID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.ATHLETE_PROFILE_CAREER_STATS_PUBLIC
        '404':
          description: Profile not found

  /teams/{teamID}/public-team-profile-id:
    get:
      summary: Get Public Team Profile ID
      operationId: get_team_public_profile_id
      tags:
        - Teams
        - Public
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object # Ft.TEAM_PUBLIC_PROFILE_ID
        '404':
          description: Team not found

  # Example of how delete_schedule_event and delete_schedule_event_series could be handled if they were actual DELETE methods
  # This is for illustration; current implementation follows JWR's PATCH methods.
  #  /teams/{teamID}/schedule/events/{eventID}/:
  #    delete:
  #      summary: Delete Schedule Event
  #      operationId: delete_schedule_event_standard_delete
  #      tags:
  #        - Teams
  #        - Schedule
  #      parameters:
  #        - name: teamID
  #          in: path
  #          required: true
  #          schema:
  #            type: string
  #        - name: eventID
  #          in: path
  #          required: true
  #          schema:
  #            type: string
  #      responses:
  #        '204':
  #          description: Event deleted
  #        '404':
  #          description: Not found

  #  /teams/{teamID}/schedule/event-series/{seriesID}/:
  #    delete:
  #      summary: Delete Schedule Event Series
  #      operationId: delete_schedule_event_series_standard_delete
  #      tags:
  #        - Teams
  #        - Schedule
  #      parameters:
  #        - name: teamID
  #          in: path
  #          required: true
  #          schema:
  #            type: string
  #        - name: seriesID
  #          in: path
  #          required: true
  #          schema:
  #            type: string
  #      responses:
  #        '204':
  #          description: Event series deleted
  #        '404':
  #          description: Not found
  #
  # Note on duplicate PATCH operations for delete_schedule_event and delete_schedule_event_series:
  # OpenAPI requires unique operationId. If paths and methods are identical, they are considered the same operation.
  # The JWR has "delete_schedule_event" and "patch_schedule_event" both as PATCH to the same path.
  # This has been consolidated under "patch_schedule_event".
  # If "delete_schedule_event" is a PATCH with a specific body to signify deletion,
  # that should be documented as a specific use case of the PATCH operation.
  # The same applies to "delete_schedule_event_series".
  # I have added placeholder entries for the JWR's "delete_*" that are PATCH,
  # giving them unique operationIds for now, but this is not ideal OpenAPI.
  # A better approach would be to have a single PATCH and use the request body to differentiate actions,
  # or use proper DELETE HTTP methods if the API supports it.
  # For now, I will create entries for the "delete_*" PATCH methods from JWR if they are not already covered.
  # The current `patch_schedule_event` is for general updates.
  # The JWR `delete_schedule_event` with method PATCH is added below with a distinct operationId.

  /teams/{teamID}/schedule/events/{eventID}/delete: # Making path slightly different for clarity if method is same
    patch: # As per JWR, method is PATCH
      summary: Delete Schedule Event (via PATCH)
      operationId: delete_schedule_event # From JWR
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: eventID
          in: path
          required: true
          schema:
            type: string
      requestBody: # JWR inputType is Qt.PATCH_EVENT, same as update.
        description: Payload to signify deletion (e.g., setting a deleted flag)
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_EVENT
      responses:
        '200':
          description: Event 'deleted' (updated to deleted state)
          content:
            application/json:
              schema:
                type: object # Ft.EVENT
        '400':
          description: Bad Request
        '404':
          description: Team or Event not found

  /teams/{teamID}/schedule/event-series/{seriesID}/delete: # Making path slightly different
    patch: # As per JWR, method is PATCH
      summary: Delete Schedule Event Series (via PATCH)
      operationId: delete_schedule_event_series # From JWR
      tags:
        - Teams
        - Schedule
      parameters:
        - name: teamID
          in: path
          required: true
          schema:
            type: string
        - name: seriesID
          in: path
          required: true
          schema:
            type: string
      requestBody: # JWR inputType is Qt.PATCH_EVENT_SERIES, same as update.
        description: Payload to signify deletion
        required: true
        content:
          application/json:
            schema:
              type: object # Qt.PATCH_EVENT_SERIES
      responses:
        '200':
          description: Event series 'deleted'
          content:
            application/json:
              schema:
                type: object # Ft.EVENT_SERIES
        '400':
          description: Bad Request
        '404':
          description: Team or Series not found
