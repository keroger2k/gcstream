(function () {
  'use strict';
  var Pu = {},
    Kh =
      typeof globalThis < 'u'
        ? globalThis
        : typeof window < 'u'
          ? window
          : typeof Pu < 'u'
            ? Pu
            : typeof self < 'u'
              ? self
              : {};
  function ss(i) {
    if (i.__esModule) return i;
    var c = i.default;
    if (typeof c == 'function') {
      var r = function p() {
        return this instanceof p
          ? Reflect.construct(c, arguments, this.constructor)
          : c.apply(this, arguments);
      };
      r.prototype = c.prototype;
    } else r = {};
    return (
      Object.defineProperty(r, '__esModule', { value: !0 }),
      Object.keys(i).forEach(function (p) {
        var v = Object.getOwnPropertyDescriptor(i, p);
        Object.defineProperty(
          r,
          p,
          v.get
            ? v
            : {
                enumerable: !0,
                get: function () {
                  return i[p];
                },
              }
        );
      }),
      r
    );
  }
  var Iu = {},
    In = {},
    os = function (i, c) {
      return (
        (os =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (r, p) {
              r.__proto__ = p;
            }) ||
          function (r, p) {
            for (var v in p) Object.prototype.hasOwnProperty.call(p, v) && (r[v] = p[v]);
          }),
        os(i, c)
      );
    };
  function mu(i, c) {
    if (typeof c != 'function' && c !== null)
      throw new TypeError('Class extends value ' + String(c) + ' is not a constructor or null');
    os(i, c);
    function r() {
      this.constructor = i;
    }
    i.prototype = c === null ? Object.create(c) : ((r.prototype = c.prototype), new r());
  }
  var yi = function () {
    return (
      (yi =
        Object.assign ||
        function (c) {
          for (var r, p = 1, v = arguments.length; p < v; p++) {
            r = arguments[p];
            for (var h in r) Object.prototype.hasOwnProperty.call(r, h) && (c[h] = r[h]);
          }
          return c;
        }),
      yi.apply(this, arguments)
    );
  };
  function bu(i, c) {
    var r = {};
    for (var p in i)
      Object.prototype.hasOwnProperty.call(i, p) && c.indexOf(p) < 0 && (r[p] = i[p]);
    if (i != null && typeof Object.getOwnPropertySymbols == 'function')
      for (var v = 0, p = Object.getOwnPropertySymbols(i); v < p.length; v++)
        c.indexOf(p[v]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(i, p[v]) &&
          (r[p[v]] = i[p[v]]);
    return r;
  }
  function Eu(i, c, r, p) {
    var v = arguments.length,
      h = v < 3 ? c : p === null ? (p = Object.getOwnPropertyDescriptor(c, r)) : p,
      s;
    if (typeof Reflect == 'object' && typeof Reflect.decorate == 'function')
      h = Reflect.decorate(i, c, r, p);
    else
      for (var l = i.length - 1; l >= 0; l--)
        (s = i[l]) && (h = (v < 3 ? s(h) : v > 3 ? s(c, r, h) : s(c, r)) || h);
    return v > 3 && h && Object.defineProperty(c, r, h), h;
  }
  function Bu(i, c) {
    return function (r, p) {
      c(r, p, i);
    };
  }
  function Tu(i, c, r, p, v, h) {
    function s(_) {
      if (_ !== void 0 && typeof _ != 'function') throw new TypeError('Function expected');
      return _;
    }
    for (
      var l = p.kind,
        u = l === 'getter' ? 'get' : l === 'setter' ? 'set' : 'value',
        y = !c && i ? (p.static ? i : i.prototype) : null,
        o = c || (y ? Object.getOwnPropertyDescriptor(y, p.name) : {}),
        a,
        n = !1,
        e = r.length - 1;
      e >= 0;
      e--
    ) {
      var t = {};
      for (var d in p) t[d] = d === 'access' ? {} : p[d];
      for (var d in p.access) t.access[d] = p.access[d];
      t.addInitializer = function (_) {
        if (n) throw new TypeError('Cannot add initializers after decoration has completed');
        h.push(s(_ || null));
      };
      var f = (0, r[e])(l === 'accessor' ? { get: o.get, set: o.set } : o[u], t);
      if (l === 'accessor') {
        if (f === void 0) continue;
        if (f === null || typeof f != 'object') throw new TypeError('Object expected');
        (a = s(f.get)) && (o.get = a),
          (a = s(f.set)) && (o.set = a),
          (a = s(f.init)) && v.unshift(a);
      } else (a = s(f)) && (l === 'field' ? v.unshift(a) : (o[u] = a));
    }
    y && Object.defineProperty(y, p.name, o), (n = !0);
  }
  function Ou(i, c, r) {
    for (var p = arguments.length > 2, v = 0; v < c.length; v++)
      r = p ? c[v].call(i, r) : c[v].call(i);
    return p ? r : void 0;
  }
  function Au(i) {
    return typeof i == 'symbol' ? i : ''.concat(i);
  }
  function Ru(i, c, r) {
    return (
      typeof c == 'symbol' && (c = c.description ? '['.concat(c.description, ']') : ''),
      Object.defineProperty(i, 'name', { configurable: !0, value: r ? ''.concat(r, ' ', c) : c })
    );
  }
  function Fu(i, c) {
    if (typeof Reflect == 'object' && typeof Reflect.metadata == 'function')
      return Reflect.metadata(i, c);
  }
  function ku(i, c, r, p) {
    function v(h) {
      return h instanceof r
        ? h
        : new r(function (s) {
            s(h);
          });
    }
    return new (r || (r = Promise))(function (h, s) {
      function l(o) {
        try {
          y(p.next(o));
        } catch (a) {
          s(a);
        }
      }
      function u(o) {
        try {
          y(p.throw(o));
        } catch (a) {
          s(a);
        }
      }
      function y(o) {
        o.done ? h(o.value) : v(o.value).then(l, u);
      }
      y((p = p.apply(i, c || [])).next());
    });
  }
  function wu(i, c) {
    var r = {
        label: 0,
        sent: function () {
          if (h[0] & 1) throw h[1];
          return h[1];
        },
        trys: [],
        ops: [],
      },
      p,
      v,
      h,
      s = Object.create((typeof Iterator == 'function' ? Iterator : Object).prototype);
    return (
      (s.next = l(0)),
      (s.throw = l(1)),
      (s.return = l(2)),
      typeof Symbol == 'function' &&
        (s[Symbol.iterator] = function () {
          return this;
        }),
      s
    );
    function l(y) {
      return function (o) {
        return u([y, o]);
      };
    }
    function u(y) {
      if (p) throw new TypeError('Generator is already executing.');
      for (; s && ((s = 0), y[0] && (r = 0)), r; )
        try {
          if (
            ((p = 1),
            v &&
              (h =
                y[0] & 2
                  ? v.return
                  : y[0]
                    ? v.throw || ((h = v.return) && h.call(v), 0)
                    : v.next) &&
              !(h = h.call(v, y[1])).done)
          )
            return h;
          switch (((v = 0), h && (y = [y[0] & 2, h.value]), y[0])) {
            case 0:
            case 1:
              h = y;
              break;
            case 4:
              return r.label++, { value: y[1], done: !1 };
            case 5:
              r.label++, (v = y[1]), (y = [0]);
              continue;
            case 7:
              (y = r.ops.pop()), r.trys.pop();
              continue;
            default:
              if (
                ((h = r.trys), !(h = h.length > 0 && h[h.length - 1]) && (y[0] === 6 || y[0] === 2))
              ) {
                r = 0;
                continue;
              }
              if (y[0] === 3 && (!h || (y[1] > h[0] && y[1] < h[3]))) {
                r.label = y[1];
                break;
              }
              if (y[0] === 6 && r.label < h[1]) {
                (r.label = h[1]), (h = y);
                break;
              }
              if (h && r.label < h[2]) {
                (r.label = h[2]), r.ops.push(y);
                break;
              }
              h[2] && r.ops.pop(), r.trys.pop();
              continue;
          }
          y = c.call(i, r);
        } catch (o) {
          (y = [6, o]), (v = 0);
        } finally {
          p = h = 0;
        }
      if (y[0] & 5) throw y[1];
      return { value: y[0] ? y[1] : void 0, done: !0 };
    }
  }
  var vi = Object.create
    ? function (i, c, r, p) {
        p === void 0 && (p = r);
        var v = Object.getOwnPropertyDescriptor(c, r);
        (!v || ('get' in v ? !c.__esModule : v.writable || v.configurable)) &&
          (v = {
            enumerable: !0,
            get: function () {
              return c[r];
            },
          }),
          Object.defineProperty(i, p, v);
      }
    : function (i, c, r, p) {
        p === void 0 && (p = r), (i[p] = c[r]);
      };
  function Cu(i, c) {
    for (var r in i) r !== 'default' && !Object.prototype.hasOwnProperty.call(c, r) && vi(c, i, r);
  }
  function gi(i) {
    var c = typeof Symbol == 'function' && Symbol.iterator,
      r = c && i[c],
      p = 0;
    if (r) return r.call(i);
    if (i && typeof i.length == 'number')
      return {
        next: function () {
          return i && p >= i.length && (i = void 0), { value: i && i[p++], done: !i };
        },
      };
    throw new TypeError(c ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
  }
  function us(i, c) {
    var r = typeof Symbol == 'function' && i[Symbol.iterator];
    if (!r) return i;
    var p = r.call(i),
      v,
      h = [],
      s;
    try {
      for (; (c === void 0 || c-- > 0) && !(v = p.next()).done; ) h.push(v.value);
    } catch (l) {
      s = { error: l };
    } finally {
      try {
        v && !v.done && (r = p.return) && r.call(p);
      } finally {
        if (s) throw s.error;
      }
    }
    return h;
  }
  function Mu() {
    for (var i = [], c = 0; c < arguments.length; c++) i = i.concat(us(arguments[c]));
    return i;
  }
  function xu() {
    for (var i = 0, c = 0, r = arguments.length; c < r; c++) i += arguments[c].length;
    for (var p = Array(i), v = 0, c = 0; c < r; c++)
      for (var h = arguments[c], s = 0, l = h.length; s < l; s++, v++) p[v] = h[s];
    return p;
  }
  function Lu(i, c, r) {
    if (r || arguments.length === 2)
      for (var p = 0, v = c.length, h; p < v; p++)
        (h || !(p in c)) && (h || (h = Array.prototype.slice.call(c, 0, p)), (h[p] = c[p]));
    return i.concat(h || Array.prototype.slice.call(c));
  }
  function tn(i) {
    return this instanceof tn ? ((this.v = i), this) : new tn(i);
  }
  function Du(i, c, r) {
    if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
    var p = r.apply(i, c || []),
      v,
      h = [];
    return (
      (v = Object.create((typeof AsyncIterator == 'function' ? AsyncIterator : Object).prototype)),
      l('next'),
      l('throw'),
      l('return', s),
      (v[Symbol.asyncIterator] = function () {
        return this;
      }),
      v
    );
    function s(e) {
      return function (t) {
        return Promise.resolve(t).then(e, a);
      };
    }
    function l(e, t) {
      p[e] &&
        ((v[e] = function (d) {
          return new Promise(function (f, _) {
            h.push([e, d, f, _]) > 1 || u(e, d);
          });
        }),
        t && (v[e] = t(v[e])));
    }
    function u(e, t) {
      try {
        y(p[e](t));
      } catch (d) {
        n(h[0][3], d);
      }
    }
    function y(e) {
      e.value instanceof tn ? Promise.resolve(e.value.v).then(o, a) : n(h[0][2], e);
    }
    function o(e) {
      u('next', e);
    }
    function a(e) {
      u('throw', e);
    }
    function n(e, t) {
      e(t), h.shift(), h.length && u(h[0][0], h[0][1]);
    }
  }
  function Gu(i) {
    var c, r;
    return (
      (c = {}),
      p('next'),
      p('throw', function (v) {
        throw v;
      }),
      p('return'),
      (c[Symbol.iterator] = function () {
        return this;
      }),
      c
    );
    function p(v, h) {
      c[v] = i[v]
        ? function (s) {
            return (r = !r) ? { value: tn(i[v](s)), done: !1 } : h ? h(s) : s;
          }
        : h;
    }
  }
  function Hu(i) {
    if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
    var c = i[Symbol.asyncIterator],
      r;
    return c
      ? c.call(i)
      : ((i = typeof gi == 'function' ? gi(i) : i[Symbol.iterator]()),
        (r = {}),
        p('next'),
        p('throw'),
        p('return'),
        (r[Symbol.asyncIterator] = function () {
          return this;
        }),
        r);
    function p(h) {
      r[h] =
        i[h] &&
        function (s) {
          return new Promise(function (l, u) {
            (s = i[h](s)), v(l, u, s.done, s.value);
          });
        };
    }
    function v(h, s, l, u) {
      Promise.resolve(u).then(function (y) {
        h({ value: y, done: l });
      }, s);
    }
  }
  function Nu(i, c) {
    return Object.defineProperty ? Object.defineProperty(i, 'raw', { value: c }) : (i.raw = c), i;
  }
  var Jh = Object.create
      ? function (i, c) {
          Object.defineProperty(i, 'default', { enumerable: !0, value: c });
        }
      : function (i, c) {
          i.default = c;
        },
    ls = function (i) {
      return (
        (ls =
          Object.getOwnPropertyNames ||
          function (c) {
            var r = [];
            for (var p in c) Object.prototype.hasOwnProperty.call(c, p) && (r[r.length] = p);
            return r;
          }),
        ls(i)
      );
    };
  function ju(i) {
    if (i && i.__esModule) return i;
    var c = {};
    if (i != null)
      for (var r = ls(i), p = 0; p < r.length; p++) r[p] !== 'default' && vi(c, i, r[p]);
    return Jh(c, i), c;
  }
  function qu(i) {
    return i && i.__esModule ? i : { default: i };
  }
  function Uu(i, c, r, p) {
    if (r === 'a' && !p) throw new TypeError('Private accessor was defined without a getter');
    if (typeof c == 'function' ? i !== c || !p : !c.has(i))
      throw new TypeError(
        'Cannot read private member from an object whose class did not declare it'
      );
    return r === 'm' ? p : r === 'a' ? p.call(i) : p ? p.value : c.get(i);
  }
  function Wu(i, c, r, p, v) {
    if (p === 'm') throw new TypeError('Private method is not writable');
    if (p === 'a' && !v) throw new TypeError('Private accessor was defined without a setter');
    if (typeof c == 'function' ? i !== c || !v : !c.has(i))
      throw new TypeError(
        'Cannot write private member to an object whose class did not declare it'
      );
    return p === 'a' ? v.call(i, r) : v ? (v.value = r) : c.set(i, r), r;
  }
  function $u(i, c) {
    if (c === null || (typeof c != 'object' && typeof c != 'function'))
      throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof i == 'function' ? c === i : i.has(c);
  }
  function zu(i, c, r) {
    if (c != null) {
      if (typeof c != 'object' && typeof c != 'function') throw new TypeError('Object expected.');
      var p, v;
      if (r) {
        if (!Symbol.asyncDispose) throw new TypeError('Symbol.asyncDispose is not defined.');
        p = c[Symbol.asyncDispose];
      }
      if (p === void 0) {
        if (!Symbol.dispose) throw new TypeError('Symbol.dispose is not defined.');
        (p = c[Symbol.dispose]), r && (v = p);
      }
      if (typeof p != 'function') throw new TypeError('Object not disposable.');
      v &&
        (p = function () {
          try {
            v.call(this);
          } catch (h) {
            return Promise.reject(h);
          }
        }),
        i.stack.push({ value: c, dispose: p, async: r });
    } else r && i.stack.push({ async: !0 });
    return c;
  }
  var Yh =
    typeof SuppressedError == 'function'
      ? SuppressedError
      : function (i, c, r) {
          var p = new Error(r);
          return (p.name = 'SuppressedError'), (p.error = i), (p.suppressed = c), p;
        };
  function Vu(i) {
    function c(h) {
      (i.error = i.hasError ? new Yh(h, i.error, 'An error was suppressed during disposal.') : h),
        (i.hasError = !0);
    }
    var r,
      p = 0;
    function v() {
      for (; (r = i.stack.pop()); )
        try {
          if (!r.async && p === 1) return (p = 0), i.stack.push(r), Promise.resolve().then(v);
          if (r.dispose) {
            var h = r.dispose.call(r.value);
            if (r.async)
              return (
                (p |= 2),
                Promise.resolve(h).then(v, function (s) {
                  return c(s), v();
                })
              );
          } else p |= 1;
        } catch (s) {
          c(s);
        }
      if (p === 1) return i.hasError ? Promise.reject(i.error) : Promise.resolve();
      if (i.hasError) throw i.error;
    }
    return v();
  }
  function Ku(i, c) {
    return typeof i == 'string' && /^\.\.?\//.test(i)
      ? i.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (r, p, v, h, s) {
          return p
            ? c
              ? '.jsx'
              : '.js'
            : v && (!h || !s)
              ? r
              : v + h + '.' + s.toLowerCase() + 'js';
        })
      : i;
  }
  var Qh = {
      __extends: mu,
      __assign: yi,
      __rest: bu,
      __decorate: Eu,
      __param: Bu,
      __esDecorate: Tu,
      __runInitializers: Ou,
      __propKey: Au,
      __setFunctionName: Ru,
      __metadata: Fu,
      __awaiter: ku,
      __generator: wu,
      __createBinding: vi,
      __exportStar: Cu,
      __values: gi,
      __read: us,
      __spread: Mu,
      __spreadArrays: xu,
      __spreadArray: Lu,
      __await: tn,
      __asyncGenerator: Du,
      __asyncDelegator: Gu,
      __asyncValues: Hu,
      __makeTemplateObject: Nu,
      __importStar: ju,
      __importDefault: qu,
      __classPrivateFieldGet: Uu,
      __classPrivateFieldSet: Wu,
      __classPrivateFieldIn: $u,
      __addDisposableResource: zu,
      __disposeResources: Vu,
      __rewriteRelativeImportExtension: Ku,
    },
    Xh = Object.freeze({
      __proto__: null,
      __addDisposableResource: zu,
      get __assign() {
        return yi;
      },
      __asyncDelegator: Gu,
      __asyncGenerator: Du,
      __asyncValues: Hu,
      __await: tn,
      __awaiter: ku,
      __classPrivateFieldGet: Uu,
      __classPrivateFieldIn: $u,
      __classPrivateFieldSet: Wu,
      __createBinding: vi,
      __decorate: Eu,
      __disposeResources: Vu,
      __esDecorate: Tu,
      __exportStar: Cu,
      __extends: mu,
      __generator: wu,
      __importDefault: qu,
      __importStar: ju,
      __makeTemplateObject: Nu,
      __metadata: Fu,
      __param: Bu,
      __propKey: Au,
      __read: us,
      __rest: bu,
      __rewriteRelativeImportExtension: Ku,
      __runInitializers: Ou,
      __setFunctionName: Ru,
      __spread: Mu,
      __spreadArray: Lu,
      __spreadArrays: xu,
      __values: gi,
      default: Qh,
    }),
    Q = ss(Xh),
    Gt = {},
    _i = {},
    cs = '1.13.7',
    Ju =
      (typeof self == 'object' && self.self === self && self) ||
      (typeof _i == 'object' && _i.global === _i && _i) ||
      Function('return this')() ||
      {},
    Si = Array.prototype,
    ds = Object.prototype,
    Yu = typeof Symbol < 'u' ? Symbol.prototype : null,
    Zh = Si.push,
    mn = Si.slice,
    bn = ds.toString,
    ey = ds.hasOwnProperty,
    Qu = typeof ArrayBuffer < 'u',
    ty = typeof DataView < 'u',
    ry = Array.isArray,
    Xu = Object.keys,
    Zu = Object.create,
    el = Qu && ArrayBuffer.isView,
    ny = isNaN,
    ay = isFinite,
    tl = !{ toString: null }.propertyIsEnumerable('toString'),
    rl = [
      'valueOf',
      'isPrototypeOf',
      'toString',
      'propertyIsEnumerable',
      'hasOwnProperty',
      'toLocaleString',
    ],
    iy = Math.pow(2, 53) - 1;
  function rt(i, c) {
    return (
      (c = c == null ? i.length - 1 : +c),
      function () {
        for (var r = Math.max(arguments.length - c, 0), p = Array(r), v = 0; v < r; v++)
          p[v] = arguments[v + c];
        switch (c) {
          case 0:
            return i.call(this, p);
          case 1:
            return i.call(this, arguments[0], p);
          case 2:
            return i.call(this, arguments[0], arguments[1], p);
        }
        var h = Array(c + 1);
        for (v = 0; v < c; v++) h[v] = arguments[v];
        return (h[c] = p), i.apply(this, h);
      }
    );
  }
  function Kt(i) {
    var c = typeof i;
    return c === 'function' || (c === 'object' && !!i);
  }
  function nl(i) {
    return i === null;
  }
  function fs(i) {
    return i === void 0;
  }
  function ps(i) {
    return i === !0 || i === !1 || bn.call(i) === '[object Boolean]';
  }
  function al(i) {
    return !!(i && i.nodeType === 1);
  }
  function Ke(i) {
    var c = '[object ' + i + ']';
    return function (r) {
      return bn.call(r) === c;
    };
  }
  var Pi = Ke('String'),
    hs = Ke('Number'),
    il = Ke('Date'),
    sl = Ke('RegExp'),
    ol = Ke('Error'),
    ys = Ke('Symbol'),
    vs = Ke('ArrayBuffer'),
    ul = Ke('Function'),
    sy = Ju.document && Ju.document.childNodes;
  typeof /./ != 'function' &&
    typeof Int8Array != 'object' &&
    typeof sy != 'function' &&
    (ul = function (i) {
      return typeof i == 'function' || !1;
    });
  var Je = ul,
    ll = Ke('Object'),
    cl = ty && (!/\[native code\]/.test(String(DataView)) || ll(new DataView(new ArrayBuffer(8)))),
    gs = typeof Map < 'u' && ll(new Map()),
    oy = Ke('DataView');
  function uy(i) {
    return i != null && Je(i.getInt8) && vs(i.buffer);
  }
  var En = cl ? uy : oy,
    Jt = ry || Ke('Array');
  function Yt(i, c) {
    return i != null && ey.call(i, c);
  }
  var _s = Ke('Arguments');
  (function () {
    _s(arguments) ||
      (_s = function (i) {
        return Yt(i, 'callee');
      });
  })();
  var Ii = _s;
  function dl(i) {
    return !ys(i) && ay(i) && !isNaN(parseFloat(i));
  }
  function Ss(i) {
    return hs(i) && ny(i);
  }
  function Ps(i) {
    return function () {
      return i;
    };
  }
  function fl(i) {
    return function (c) {
      var r = i(c);
      return typeof r == 'number' && r >= 0 && r <= iy;
    };
  }
  function pl(i) {
    return function (c) {
      return c == null ? void 0 : c[i];
    };
  }
  var mi = pl('byteLength'),
    ly = fl(mi),
    cy = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function dy(i) {
    return el ? el(i) && !En(i) : ly(i) && cy.test(bn.call(i));
  }
  var Is = Qu ? dy : Ps(!1),
    ut = pl('length');
  function fy(i) {
    for (var c = {}, r = i.length, p = 0; p < r; ++p) c[i[p]] = !0;
    return {
      contains: function (v) {
        return c[v] === !0;
      },
      push: function (v) {
        return (c[v] = !0), i.push(v);
      },
    };
  }
  function hl(i, c) {
    c = fy(c);
    var r = rl.length,
      p = i.constructor,
      v = (Je(p) && p.prototype) || ds,
      h = 'constructor';
    for (Yt(i, h) && !c.contains(h) && c.push(h); r--; )
      (h = rl[r]), h in i && i[h] !== v[h] && !c.contains(h) && c.push(h);
  }
  function qe(i) {
    if (!Kt(i)) return [];
    if (Xu) return Xu(i);
    var c = [];
    for (var r in i) Yt(i, r) && c.push(r);
    return tl && hl(i, c), c;
  }
  function yl(i) {
    if (i == null) return !0;
    var c = ut(i);
    return typeof c == 'number' && (Jt(i) || Pi(i) || Ii(i)) ? c === 0 : ut(qe(i)) === 0;
  }
  function ms(i, c) {
    var r = qe(c),
      p = r.length;
    if (i == null) return !p;
    for (var v = Object(i), h = 0; h < p; h++) {
      var s = r[h];
      if (c[s] !== v[s] || !(s in v)) return !1;
    }
    return !0;
  }
  function Ee(i) {
    if (i instanceof Ee) return i;
    if (!(this instanceof Ee)) return new Ee(i);
    this._wrapped = i;
  }
  (Ee.VERSION = cs),
    (Ee.prototype.value = function () {
      return this._wrapped;
    }),
    (Ee.prototype.valueOf = Ee.prototype.toJSON = Ee.prototype.value),
    (Ee.prototype.toString = function () {
      return String(this._wrapped);
    });
  function vl(i) {
    return new Uint8Array(i.buffer || i, i.byteOffset || 0, mi(i));
  }
  var gl = '[object DataView]';
  function bs(i, c, r, p) {
    if (i === c) return i !== 0 || 1 / i === 1 / c;
    if (i == null || c == null) return !1;
    if (i !== i) return c !== c;
    var v = typeof i;
    return v !== 'function' && v !== 'object' && typeof c != 'object' ? !1 : _l(i, c, r, p);
  }
  function _l(i, c, r, p) {
    i instanceof Ee && (i = i._wrapped), c instanceof Ee && (c = c._wrapped);
    var v = bn.call(i);
    if (v !== bn.call(c)) return !1;
    if (cl && v == '[object Object]' && En(i)) {
      if (!En(c)) return !1;
      v = gl;
    }
    switch (v) {
      case '[object RegExp]':
      case '[object String]':
        return '' + i == '' + c;
      case '[object Number]':
        return +i != +i ? +c != +c : +i == 0 ? 1 / +i === 1 / c : +i == +c;
      case '[object Date]':
      case '[object Boolean]':
        return +i == +c;
      case '[object Symbol]':
        return Yu.valueOf.call(i) === Yu.valueOf.call(c);
      case '[object ArrayBuffer]':
      case gl:
        return _l(vl(i), vl(c), r, p);
    }
    var h = v === '[object Array]';
    if (!h && Is(i)) {
      var s = mi(i);
      if (s !== mi(c)) return !1;
      if (i.buffer === c.buffer && i.byteOffset === c.byteOffset) return !0;
      h = !0;
    }
    if (!h) {
      if (typeof i != 'object' || typeof c != 'object') return !1;
      var l = i.constructor,
        u = c.constructor;
      if (
        l !== u &&
        !(Je(l) && l instanceof l && Je(u) && u instanceof u) &&
        'constructor' in i &&
        'constructor' in c
      )
        return !1;
    }
    (r = r || []), (p = p || []);
    for (var y = r.length; y--; ) if (r[y] === i) return p[y] === c;
    if ((r.push(i), p.push(c), h)) {
      if (((y = i.length), y !== c.length)) return !1;
      for (; y--; ) if (!bs(i[y], c[y], r, p)) return !1;
    } else {
      var o = qe(i),
        a;
      if (((y = o.length), qe(c).length !== y)) return !1;
      for (; y--; ) if (((a = o[y]), !(Yt(c, a) && bs(i[a], c[a], r, p)))) return !1;
    }
    return r.pop(), p.pop(), !0;
  }
  function Sl(i, c) {
    return bs(i, c);
  }
  function rn(i) {
    if (!Kt(i)) return [];
    var c = [];
    for (var r in i) c.push(r);
    return tl && hl(i, c), c;
  }
  function Es(i) {
    var c = ut(i);
    return function (r) {
      if (r == null) return !1;
      var p = rn(r);
      if (ut(p)) return !1;
      for (var v = 0; v < c; v++) if (!Je(r[i[v]])) return !1;
      return i !== ml || !Je(r[Bs]);
    };
  }
  var Bs = 'forEach',
    Pl = 'has',
    Ts = ['clear', 'delete'],
    Il = ['get', Pl, 'set'],
    py = Ts.concat(Bs, Il),
    ml = Ts.concat(Il),
    hy = ['add'].concat(Ts, Bs, Pl),
    bl = gs ? Es(py) : Ke('Map'),
    El = gs ? Es(ml) : Ke('WeakMap'),
    Bl = gs ? Es(hy) : Ke('Set'),
    Tl = Ke('WeakSet');
  function sr(i) {
    for (var c = qe(i), r = c.length, p = Array(r), v = 0; v < r; v++) p[v] = i[c[v]];
    return p;
  }
  function Ol(i) {
    for (var c = qe(i), r = c.length, p = Array(r), v = 0; v < r; v++) p[v] = [c[v], i[c[v]]];
    return p;
  }
  function Os(i) {
    for (var c = {}, r = qe(i), p = 0, v = r.length; p < v; p++) c[i[r[p]]] = r[p];
    return c;
  }
  function Bn(i) {
    var c = [];
    for (var r in i) Je(i[r]) && c.push(r);
    return c.sort();
  }
  function As(i, c) {
    return function (r) {
      var p = arguments.length;
      if ((c && (r = Object(r)), p < 2 || r == null)) return r;
      for (var v = 1; v < p; v++)
        for (var h = arguments[v], s = i(h), l = s.length, u = 0; u < l; u++) {
          var y = s[u];
          (!c || r[y] === void 0) && (r[y] = h[y]);
        }
      return r;
    };
  }
  var Rs = As(rn),
    nn = As(qe),
    Fs = As(rn, !0);
  function yy() {
    return function () {};
  }
  function Al(i) {
    if (!Kt(i)) return {};
    if (Zu) return Zu(i);
    var c = yy();
    c.prototype = i;
    var r = new c();
    return (c.prototype = null), r;
  }
  function Rl(i, c) {
    var r = Al(i);
    return c && nn(r, c), r;
  }
  function Fl(i) {
    return Kt(i) ? (Jt(i) ? i.slice() : Rs({}, i)) : i;
  }
  function kl(i, c) {
    return c(i), i;
  }
  function ks(i) {
    return Jt(i) ? i : [i];
  }
  Ee.toPath = ks;
  function Tn(i) {
    return Ee.toPath(i);
  }
  function ws(i, c) {
    for (var r = c.length, p = 0; p < r; p++) {
      if (i == null) return;
      i = i[c[p]];
    }
    return r ? i : void 0;
  }
  function Cs(i, c, r) {
    var p = ws(i, Tn(c));
    return fs(p) ? r : p;
  }
  function wl(i, c) {
    c = Tn(c);
    for (var r = c.length, p = 0; p < r; p++) {
      var v = c[p];
      if (!Yt(i, v)) return !1;
      i = i[v];
    }
    return !!r;
  }
  function bi(i) {
    return i;
  }
  function or(i) {
    return (
      (i = nn({}, i)),
      function (c) {
        return ms(c, i);
      }
    );
  }
  function Ei(i) {
    return (
      (i = Tn(i)),
      function (c) {
        return ws(c, i);
      }
    );
  }
  function On(i, c, r) {
    if (c === void 0) return i;
    switch (r ?? 3) {
      case 1:
        return function (p) {
          return i.call(c, p);
        };
      case 3:
        return function (p, v, h) {
          return i.call(c, p, v, h);
        };
      case 4:
        return function (p, v, h, s) {
          return i.call(c, p, v, h, s);
        };
    }
    return function () {
      return i.apply(c, arguments);
    };
  }
  function Cl(i, c, r) {
    return i == null ? bi : Je(i) ? On(i, c, r) : Kt(i) && !Jt(i) ? or(i) : Ei(i);
  }
  function Bi(i, c) {
    return Cl(i, c, 1 / 0);
  }
  Ee.iteratee = Bi;
  function lt(i, c, r) {
    return Ee.iteratee !== Bi ? Ee.iteratee(i, c) : Cl(i, c, r);
  }
  function Ml(i, c, r) {
    c = lt(c, r);
    for (var p = qe(i), v = p.length, h = {}, s = 0; s < v; s++) {
      var l = p[s];
      h[l] = c(i[l], l, i);
    }
    return h;
  }
  function Ms() {}
  function xl(i) {
    return i == null
      ? Ms
      : function (c) {
          return Cs(i, c);
        };
  }
  function Ll(i, c, r) {
    var p = Array(Math.max(0, i));
    c = On(c, r, 1);
    for (var v = 0; v < i; v++) p[v] = c(v);
    return p;
  }
  function Ti(i, c) {
    return c == null && ((c = i), (i = 0)), i + Math.floor(Math.random() * (c - i + 1));
  }
  var an =
    Date.now ||
    function () {
      return new Date().getTime();
    };
  function Dl(i) {
    var c = function (h) {
        return i[h];
      },
      r = '(?:' + qe(i).join('|') + ')',
      p = RegExp(r),
      v = RegExp(r, 'g');
    return function (h) {
      return (h = h == null ? '' : '' + h), p.test(h) ? h.replace(v, c) : h;
    };
  }
  var Gl = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;', '`': '&#x60;' },
    Hl = Dl(Gl),
    vy = Os(Gl),
    Nl = Dl(vy),
    jl = (Ee.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g,
    }),
    xs = /(.)^/,
    gy = { "'": "'", '\\': '\\', '\r': 'r', '\n': 'n', '\u2028': 'u2028', '\u2029': 'u2029' },
    _y = /\\|'|\r|\n|\u2028|\u2029/g;
  function Sy(i) {
    return '\\' + gy[i];
  }
  var Py = /^\s*(\w|\$)+\s*$/;
  function ql(i, c, r) {
    !c && r && (c = r), (c = Fs({}, c, Ee.templateSettings));
    var p = RegExp(
        [(c.escape || xs).source, (c.interpolate || xs).source, (c.evaluate || xs).source].join(
          '|'
        ) + '|$',
        'g'
      ),
      v = 0,
      h = "__p+='";
    i.replace(p, function (y, o, a, n, e) {
      return (
        (h += i.slice(v, e).replace(_y, Sy)),
        (v = e + y.length),
        o
          ? (h +=
              `'+
((__t=(` +
              o +
              `))==null?'':_.escape(__t))+
'`)
          : a
            ? (h +=
                `'+
((__t=(` +
                a +
                `))==null?'':__t)+
'`)
            : n &&
              (h +=
                `';
` +
                n +
                `
__p+='`),
        y
      );
    }),
      (h += `';
`);
    var s = c.variable;
    if (s) {
      if (!Py.test(s)) throw new Error('variable is not a bare identifier: ' + s);
    } else
      (h =
        `with(obj||{}){
` +
        h +
        `}
`),
        (s = 'obj');
    h =
      `var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
` +
      h +
      `return __p;
`;
    var l;
    try {
      l = new Function(s, '_', h);
    } catch (y) {
      throw ((y.source = h), y);
    }
    var u = function (y) {
      return l.call(this, y, Ee);
    };
    return (
      (u.source =
        'function(' +
        s +
        `){
` +
        h +
        '}'),
      u
    );
  }
  function Ul(i, c, r) {
    c = Tn(c);
    var p = c.length;
    if (!p) return Je(r) ? r.call(i) : r;
    for (var v = 0; v < p; v++) {
      var h = i == null ? void 0 : i[c[v]];
      h === void 0 && ((h = r), (v = p)), (i = Je(h) ? h.call(i) : h);
    }
    return i;
  }
  var Iy = 0;
  function Wl(i) {
    var c = ++Iy + '';
    return i ? i + c : c;
  }
  function $l(i) {
    var c = Ee(i);
    return (c._chain = !0), c;
  }
  function zl(i, c, r, p, v) {
    if (!(p instanceof c)) return i.apply(r, v);
    var h = Al(i.prototype),
      s = i.apply(h, v);
    return Kt(s) ? s : h;
  }
  var ur = rt(function (i, c) {
    var r = ur.placeholder,
      p = function () {
        for (var v = 0, h = c.length, s = Array(h), l = 0; l < h; l++)
          s[l] = c[l] === r ? arguments[v++] : c[l];
        for (; v < arguments.length; ) s.push(arguments[v++]);
        return zl(i, p, this, this, s);
      };
    return p;
  });
  ur.placeholder = Ee;
  var Ls = rt(function (i, c, r) {
      if (!Je(i)) throw new TypeError('Bind must be called on a function');
      var p = rt(function (v) {
        return zl(i, p, c, this, r.concat(v));
      });
      return p;
    }),
    ct = fl(ut);
  function lr(i, c, r, p) {
    if (((p = p || []), !c && c !== 0)) c = 1 / 0;
    else if (c <= 0) return p.concat(i);
    for (var v = p.length, h = 0, s = ut(i); h < s; h++) {
      var l = i[h];
      if (ct(l) && (Jt(l) || Ii(l)))
        if (c > 1) lr(l, c - 1, r, p), (v = p.length);
        else for (var u = 0, y = l.length; u < y; ) p[v++] = l[u++];
      else r || (p[v++] = l);
    }
    return p;
  }
  var Vl = rt(function (i, c) {
    c = lr(c, !1, !1);
    var r = c.length;
    if (r < 1) throw new Error('bindAll must be passed function names');
    for (; r--; ) {
      var p = c[r];
      i[p] = Ls(i[p], i);
    }
    return i;
  });
  function Kl(i, c) {
    var r = function (p) {
      var v = r.cache,
        h = '' + (c ? c.apply(this, arguments) : p);
      return Yt(v, h) || (v[h] = i.apply(this, arguments)), v[h];
    };
    return (r.cache = {}), r;
  }
  var Ds = rt(function (i, c, r) {
      return setTimeout(function () {
        return i.apply(null, r);
      }, c);
    }),
    Jl = ur(Ds, Ee, 1);
  function Yl(i, c, r) {
    var p,
      v,
      h,
      s,
      l = 0;
    r || (r = {});
    var u = function () {
        (l = r.leading === !1 ? 0 : an()), (p = null), (s = i.apply(v, h)), p || (v = h = null);
      },
      y = function () {
        var o = an();
        !l && r.leading === !1 && (l = o);
        var a = c - (o - l);
        return (
          (v = this),
          (h = arguments),
          a <= 0 || a > c
            ? (p && (clearTimeout(p), (p = null)),
              (l = o),
              (s = i.apply(v, h)),
              p || (v = h = null))
            : !p && r.trailing !== !1 && (p = setTimeout(u, a)),
          s
        );
      };
    return (
      (y.cancel = function () {
        clearTimeout(p), (l = 0), (p = v = h = null);
      }),
      y
    );
  }
  function Ql(i, c, r) {
    var p,
      v,
      h,
      s,
      l,
      u = function () {
        var o = an() - v;
        c > o
          ? (p = setTimeout(u, c - o))
          : ((p = null), r || (s = i.apply(l, h)), p || (h = l = null));
      },
      y = rt(function (o) {
        return (
          (l = this),
          (h = o),
          (v = an()),
          p || ((p = setTimeout(u, c)), r && (s = i.apply(l, h))),
          s
        );
      });
    return (
      (y.cancel = function () {
        clearTimeout(p), (p = h = l = null);
      }),
      y
    );
  }
  function Xl(i, c) {
    return ur(c, i);
  }
  function Oi(i) {
    return function () {
      return !i.apply(this, arguments);
    };
  }
  function Zl() {
    var i = arguments,
      c = i.length - 1;
    return function () {
      for (var r = c, p = i[c].apply(this, arguments); r--; ) p = i[r].call(this, p);
      return p;
    };
  }
  function ec(i, c) {
    return function () {
      if (--i < 1) return c.apply(this, arguments);
    };
  }
  function Gs(i, c) {
    var r;
    return function () {
      return --i > 0 && (r = c.apply(this, arguments)), i <= 1 && (c = null), r;
    };
  }
  var tc = ur(Gs, 2);
  function Hs(i, c, r) {
    c = lt(c, r);
    for (var p = qe(i), v, h = 0, s = p.length; h < s; h++)
      if (((v = p[h]), c(i[v], v, i))) return v;
  }
  function rc(i) {
    return function (c, r, p) {
      r = lt(r, p);
      for (var v = ut(c), h = i > 0 ? 0 : v - 1; h >= 0 && h < v; h += i)
        if (r(c[h], h, c)) return h;
      return -1;
    };
  }
  var Ai = rc(1),
    Ns = rc(-1);
  function js(i, c, r, p) {
    r = lt(r, p, 1);
    for (var v = r(c), h = 0, s = ut(i); h < s; ) {
      var l = Math.floor((h + s) / 2);
      r(i[l]) < v ? (h = l + 1) : (s = l);
    }
    return h;
  }
  function nc(i, c, r) {
    return function (p, v, h) {
      var s = 0,
        l = ut(p);
      if (typeof h == 'number')
        i > 0
          ? (s = h >= 0 ? h : Math.max(h + l, s))
          : (l = h >= 0 ? Math.min(h + 1, l) : h + l + 1);
      else if (r && h && l) return (h = r(p, v)), p[h] === v ? h : -1;
      if (v !== v) return (h = c(mn.call(p, s, l), Ss)), h >= 0 ? h + s : -1;
      for (h = i > 0 ? s : l - 1; h >= 0 && h < l; h += i) if (p[h] === v) return h;
      return -1;
    };
  }
  var qs = nc(1, Ai, js),
    ac = nc(-1, Ns);
  function An(i, c, r) {
    var p = ct(i) ? Ai : Hs,
      v = p(i, c, r);
    if (v !== void 0 && v !== -1) return i[v];
  }
  function ic(i, c) {
    return An(i, or(c));
  }
  function Et(i, c, r) {
    c = On(c, r);
    var p, v;
    if (ct(i)) for (p = 0, v = i.length; p < v; p++) c(i[p], p, i);
    else {
      var h = qe(i);
      for (p = 0, v = h.length; p < v; p++) c(i[h[p]], h[p], i);
    }
    return i;
  }
  function Ht(i, c, r) {
    c = lt(c, r);
    for (var p = !ct(i) && qe(i), v = (p || i).length, h = Array(v), s = 0; s < v; s++) {
      var l = p ? p[s] : s;
      h[s] = c(i[l], l, i);
    }
    return h;
  }
  function sc(i) {
    var c = function (r, p, v, h) {
      var s = !ct(r) && qe(r),
        l = (s || r).length,
        u = i > 0 ? 0 : l - 1;
      for (h || ((v = r[s ? s[u] : u]), (u += i)); u >= 0 && u < l; u += i) {
        var y = s ? s[u] : u;
        v = p(v, r[y], y, r);
      }
      return v;
    };
    return function (r, p, v, h) {
      var s = arguments.length >= 3;
      return c(r, On(p, h, 4), v, s);
    };
  }
  var sn = sc(1),
    Ri = sc(-1);
  function Qt(i, c, r) {
    var p = [];
    return (
      (c = lt(c, r)),
      Et(i, function (v, h, s) {
        c(v, h, s) && p.push(v);
      }),
      p
    );
  }
  function oc(i, c, r) {
    return Qt(i, Oi(lt(c)), r);
  }
  function Fi(i, c, r) {
    c = lt(c, r);
    for (var p = !ct(i) && qe(i), v = (p || i).length, h = 0; h < v; h++) {
      var s = p ? p[h] : h;
      if (!c(i[s], s, i)) return !1;
    }
    return !0;
  }
  function ki(i, c, r) {
    c = lt(c, r);
    for (var p = !ct(i) && qe(i), v = (p || i).length, h = 0; h < v; h++) {
      var s = p ? p[h] : h;
      if (c(i[s], s, i)) return !0;
    }
    return !1;
  }
  function St(i, c, r, p) {
    return ct(i) || (i = sr(i)), (typeof r != 'number' || p) && (r = 0), qs(i, c, r) >= 0;
  }
  var uc = rt(function (i, c, r) {
    var p, v;
    return (
      Je(c) ? (v = c) : ((c = Tn(c)), (p = c.slice(0, -1)), (c = c[c.length - 1])),
      Ht(i, function (h) {
        var s = v;
        if (!s) {
          if ((p && p.length && (h = ws(h, p)), h == null)) return;
          s = h[c];
        }
        return s == null ? s : s.apply(h, r);
      })
    );
  });
  function wi(i, c) {
    return Ht(i, Ei(c));
  }
  function lc(i, c) {
    return Qt(i, or(c));
  }
  function Us(i, c, r) {
    var p = -1 / 0,
      v = -1 / 0,
      h,
      s;
    if (c == null || (typeof c == 'number' && typeof i[0] != 'object' && i != null)) {
      i = ct(i) ? i : sr(i);
      for (var l = 0, u = i.length; l < u; l++) (h = i[l]), h != null && h > p && (p = h);
    } else
      (c = lt(c, r)),
        Et(i, function (y, o, a) {
          (s = c(y, o, a)), (s > v || (s === -1 / 0 && p === -1 / 0)) && ((p = y), (v = s));
        });
    return p;
  }
  function cc(i, c, r) {
    var p = 1 / 0,
      v = 1 / 0,
      h,
      s;
    if (c == null || (typeof c == 'number' && typeof i[0] != 'object' && i != null)) {
      i = ct(i) ? i : sr(i);
      for (var l = 0, u = i.length; l < u; l++) (h = i[l]), h != null && h < p && (p = h);
    } else
      (c = lt(c, r)),
        Et(i, function (y, o, a) {
          (s = c(y, o, a)), (s < v || (s === 1 / 0 && p === 1 / 0)) && ((p = y), (v = s));
        });
    return p;
  }
  var my = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function Ws(i) {
    return i ? (Jt(i) ? mn.call(i) : Pi(i) ? i.match(my) : ct(i) ? Ht(i, bi) : sr(i)) : [];
  }
  function $s(i, c, r) {
    if (c == null || r) return ct(i) || (i = sr(i)), i[Ti(i.length - 1)];
    var p = Ws(i),
      v = ut(p);
    c = Math.max(Math.min(c, v), 0);
    for (var h = v - 1, s = 0; s < c; s++) {
      var l = Ti(s, h),
        u = p[s];
      (p[s] = p[l]), (p[l] = u);
    }
    return p.slice(0, c);
  }
  function dc(i) {
    return $s(i, 1 / 0);
  }
  function fc(i, c, r) {
    var p = 0;
    return (
      (c = lt(c, r)),
      wi(
        Ht(i, function (v, h, s) {
          return { value: v, index: p++, criteria: c(v, h, s) };
        }).sort(function (v, h) {
          var s = v.criteria,
            l = h.criteria;
          if (s !== l) {
            if (s > l || s === void 0) return 1;
            if (s < l || l === void 0) return -1;
          }
          return v.index - h.index;
        }),
        'value'
      )
    );
  }
  function Ci(i, c) {
    return function (r, p, v) {
      var h = c ? [[], []] : {};
      return (
        (p = lt(p, v)),
        Et(r, function (s, l) {
          var u = p(s, l, r);
          i(h, s, u);
        }),
        h
      );
    };
  }
  var pc = Ci(function (i, c, r) {
      Yt(i, r) ? i[r].push(c) : (i[r] = [c]);
    }),
    hc = Ci(function (i, c, r) {
      i[r] = c;
    }),
    yc = Ci(function (i, c, r) {
      Yt(i, r) ? i[r]++ : (i[r] = 1);
    }),
    vc = Ci(function (i, c, r) {
      i[r ? 0 : 1].push(c);
    }, !0);
  function gc(i) {
    return i == null ? 0 : ct(i) ? i.length : qe(i).length;
  }
  function by(i, c, r) {
    return c in r;
  }
  var zs = rt(function (i, c) {
      var r = {},
        p = c[0];
      if (i == null) return r;
      Je(p)
        ? (c.length > 1 && (p = On(p, c[1])), (c = rn(i)))
        : ((p = by), (c = lr(c, !1, !1)), (i = Object(i)));
      for (var v = 0, h = c.length; v < h; v++) {
        var s = c[v],
          l = i[s];
        p(l, s, i) && (r[s] = l);
      }
      return r;
    }),
    _c = rt(function (i, c) {
      var r = c[0],
        p;
      return (
        Je(r)
          ? ((r = Oi(r)), c.length > 1 && (p = c[1]))
          : ((c = Ht(lr(c, !1, !1), String)),
            (r = function (v, h) {
              return !St(c, h);
            })),
        zs(i, r, p)
      );
    });
  function Vs(i, c, r) {
    return mn.call(i, 0, Math.max(0, i.length - (c == null || r ? 1 : c)));
  }
  function on(i, c, r) {
    return i == null || i.length < 1
      ? c == null || r
        ? void 0
        : []
      : c == null || r
        ? i[0]
        : Vs(i, i.length - c);
  }
  function cr(i, c, r) {
    return mn.call(i, c == null || r ? 1 : c);
  }
  function Sc(i, c, r) {
    return i == null || i.length < 1
      ? c == null || r
        ? void 0
        : []
      : c == null || r
        ? i[i.length - 1]
        : cr(i, Math.max(0, i.length - c));
  }
  function Pc(i) {
    return Qt(i, Boolean);
  }
  function Ic(i, c) {
    return lr(i, c, !1);
  }
  var Ks = rt(function (i, c) {
      return (
        (c = lr(c, !0, !0)),
        Qt(i, function (r) {
          return !St(c, r);
        })
      );
    }),
    mc = rt(function (i, c) {
      return Ks(i, c);
    });
  function Rn(i, c, r, p) {
    ps(c) || ((p = r), (r = c), (c = !1)), r != null && (r = lt(r, p));
    for (var v = [], h = [], s = 0, l = ut(i); s < l; s++) {
      var u = i[s],
        y = r ? r(u, s, i) : u;
      c && !r
        ? ((!s || h !== y) && v.push(u), (h = y))
        : r
          ? St(h, y) || (h.push(y), v.push(u))
          : St(v, u) || v.push(u);
    }
    return v;
  }
  var bc = rt(function (i) {
    return Rn(lr(i, !0, !0));
  });
  function Ec(i) {
    for (var c = [], r = arguments.length, p = 0, v = ut(i); p < v; p++) {
      var h = i[p];
      if (!St(c, h)) {
        var s;
        for (s = 1; s < r && St(arguments[s], h); s++);
        s === r && c.push(h);
      }
    }
    return c;
  }
  function Fn(i) {
    for (var c = (i && Us(i, ut).length) || 0, r = Array(c), p = 0; p < c; p++) r[p] = wi(i, p);
    return r;
  }
  var Bc = rt(Fn);
  function Tc(i, c) {
    for (var r = {}, p = 0, v = ut(i); p < v; p++) c ? (r[i[p]] = c[p]) : (r[i[p][0]] = i[p][1]);
    return r;
  }
  function Oc(i, c, r) {
    c == null && ((c = i || 0), (i = 0)), r || (r = c < i ? -1 : 1);
    for (var p = Math.max(Math.ceil((c - i) / r), 0), v = Array(p), h = 0; h < p; h++, i += r)
      v[h] = i;
    return v;
  }
  function Ac(i, c) {
    if (c == null || c < 1) return [];
    for (var r = [], p = 0, v = i.length; p < v; ) r.push(mn.call(i, p, (p += c)));
    return r;
  }
  function Js(i, c) {
    return i._chain ? Ee(c).chain() : c;
  }
  function Ys(i) {
    return (
      Et(Bn(i), function (c) {
        var r = (Ee[c] = i[c]);
        Ee.prototype[c] = function () {
          var p = [this._wrapped];
          return Zh.apply(p, arguments), Js(this, r.apply(Ee, p));
        };
      }),
      Ee
    );
  }
  Et(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (i) {
    var c = Si[i];
    Ee.prototype[i] = function () {
      var r = this._wrapped;
      return (
        r != null &&
          (c.apply(r, arguments),
          (i === 'shift' || i === 'splice') && r.length === 0 && delete r[0]),
        Js(this, r)
      );
    };
  }),
    Et(['concat', 'join', 'slice'], function (i) {
      var c = Si[i];
      Ee.prototype[i] = function () {
        var r = this._wrapped;
        return r != null && (r = c.apply(r, arguments)), Js(this, r);
      };
    });
  var Ey = Object.freeze({
      __proto__: null,
      VERSION: cs,
      after: ec,
      all: Fi,
      allKeys: rn,
      any: ki,
      assign: nn,
      before: Gs,
      bind: Ls,
      bindAll: Vl,
      chain: $l,
      chunk: Ac,
      clone: Fl,
      collect: Ht,
      compact: Pc,
      compose: Zl,
      constant: Ps,
      contains: St,
      countBy: yc,
      create: Rl,
      debounce: Ql,
      default: Ee,
      defaults: Fs,
      defer: Jl,
      delay: Ds,
      detect: An,
      difference: Ks,
      drop: cr,
      each: Et,
      escape: Hl,
      every: Fi,
      extend: Rs,
      extendOwn: nn,
      filter: Qt,
      find: An,
      findIndex: Ai,
      findKey: Hs,
      findLastIndex: Ns,
      findWhere: ic,
      first: on,
      flatten: Ic,
      foldl: sn,
      foldr: Ri,
      forEach: Et,
      functions: Bn,
      get: Cs,
      groupBy: pc,
      has: wl,
      head: on,
      identity: bi,
      include: St,
      includes: St,
      indexBy: hc,
      indexOf: qs,
      initial: Vs,
      inject: sn,
      intersection: Ec,
      invert: Os,
      invoke: uc,
      isArguments: Ii,
      isArray: Jt,
      isArrayBuffer: vs,
      isBoolean: ps,
      isDataView: En,
      isDate: il,
      isElement: al,
      isEmpty: yl,
      isEqual: Sl,
      isError: ol,
      isFinite: dl,
      isFunction: Je,
      isMap: bl,
      isMatch: ms,
      isNaN: Ss,
      isNull: nl,
      isNumber: hs,
      isObject: Kt,
      isRegExp: sl,
      isSet: Bl,
      isString: Pi,
      isSymbol: ys,
      isTypedArray: Is,
      isUndefined: fs,
      isWeakMap: El,
      isWeakSet: Tl,
      iteratee: Bi,
      keys: qe,
      last: Sc,
      lastIndexOf: ac,
      map: Ht,
      mapObject: Ml,
      matcher: or,
      matches: or,
      max: Us,
      memoize: Kl,
      methods: Bn,
      min: cc,
      mixin: Ys,
      negate: Oi,
      noop: Ms,
      now: an,
      object: Tc,
      omit: _c,
      once: tc,
      pairs: Ol,
      partial: ur,
      partition: vc,
      pick: zs,
      pluck: wi,
      property: Ei,
      propertyOf: xl,
      random: Ti,
      range: Oc,
      reduce: sn,
      reduceRight: Ri,
      reject: oc,
      rest: cr,
      restArguments: rt,
      result: Ul,
      sample: $s,
      select: Qt,
      shuffle: dc,
      size: gc,
      some: ki,
      sortBy: fc,
      sortedIndex: js,
      tail: cr,
      take: on,
      tap: kl,
      template: ql,
      templateSettings: jl,
      throttle: Yl,
      times: Ll,
      toArray: Ws,
      toPath: ks,
      transpose: Fn,
      unescape: Nl,
      union: bc,
      uniq: Rn,
      unique: Rn,
      uniqueId: Wl,
      unzip: Fn,
      values: sr,
      where: lc,
      without: mc,
      wrap: Xl,
      zip: Bc,
    }),
    Qs = Ys(Ey);
  Qs._ = Qs;
  var By = Object.freeze({
      __proto__: null,
      VERSION: cs,
      after: ec,
      all: Fi,
      allKeys: rn,
      any: ki,
      assign: nn,
      before: Gs,
      bind: Ls,
      bindAll: Vl,
      chain: $l,
      chunk: Ac,
      clone: Fl,
      collect: Ht,
      compact: Pc,
      compose: Zl,
      constant: Ps,
      contains: St,
      countBy: yc,
      create: Rl,
      debounce: Ql,
      default: Qs,
      defaults: Fs,
      defer: Jl,
      delay: Ds,
      detect: An,
      difference: Ks,
      drop: cr,
      each: Et,
      escape: Hl,
      every: Fi,
      extend: Rs,
      extendOwn: nn,
      filter: Qt,
      find: An,
      findIndex: Ai,
      findKey: Hs,
      findLastIndex: Ns,
      findWhere: ic,
      first: on,
      flatten: Ic,
      foldl: sn,
      foldr: Ri,
      forEach: Et,
      functions: Bn,
      get: Cs,
      groupBy: pc,
      has: wl,
      head: on,
      identity: bi,
      include: St,
      includes: St,
      indexBy: hc,
      indexOf: qs,
      initial: Vs,
      inject: sn,
      intersection: Ec,
      invert: Os,
      invoke: uc,
      isArguments: Ii,
      isArray: Jt,
      isArrayBuffer: vs,
      isBoolean: ps,
      isDataView: En,
      isDate: il,
      isElement: al,
      isEmpty: yl,
      isEqual: Sl,
      isError: ol,
      isFinite: dl,
      isFunction: Je,
      isMap: bl,
      isMatch: ms,
      isNaN: Ss,
      isNull: nl,
      isNumber: hs,
      isObject: Kt,
      isRegExp: sl,
      isSet: Bl,
      isString: Pi,
      isSymbol: ys,
      isTypedArray: Is,
      isUndefined: fs,
      isWeakMap: El,
      isWeakSet: Tl,
      iteratee: Bi,
      keys: qe,
      last: Sc,
      lastIndexOf: ac,
      map: Ht,
      mapObject: Ml,
      matcher: or,
      matches: or,
      max: Us,
      memoize: Kl,
      methods: Bn,
      min: cc,
      mixin: Ys,
      negate: Oi,
      noop: Ms,
      now: an,
      object: Tc,
      omit: _c,
      once: tc,
      pairs: Ol,
      partial: ur,
      partition: vc,
      pick: zs,
      pluck: wi,
      property: Ei,
      propertyOf: xl,
      random: Ti,
      range: Oc,
      reduce: sn,
      reduceRight: Ri,
      reject: oc,
      rest: cr,
      restArguments: rt,
      result: Ul,
      sample: $s,
      select: Qt,
      shuffle: dc,
      size: gc,
      some: ki,
      sortBy: fc,
      sortedIndex: js,
      tail: cr,
      take: on,
      tap: kl,
      template: ql,
      templateSettings: jl,
      throttle: Yl,
      times: Ll,
      toArray: Ws,
      toPath: ks,
      transpose: Fn,
      unescape: Nl,
      union: bc,
      uniq: Rn,
      unique: Rn,
      uniqueId: Wl,
      unzip: Fn,
      values: sr,
      where: lc,
      without: mc,
      wrap: Xl,
      zip: Bc,
    }),
    Se = ss(By),
    Ce = {},
    Bt = {},
    Xs = {},
    Rc;
  function He() {
    return (
      Rc ||
        ((Rc = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.InvalidStateAccessorError =
              i.AccessorType =
              i.aggregateGroupableEvents =
              i.Placement =
              i.isTransactionMetaEvent =
              i.isMetaEvent =
              i.idFromEvent =
              i.isDBRef =
              i.TOTAL =
              i.UNASSIGNED_PLAYER =
                void 0);
          var c = Q,
            r = c.__importStar(Se);
          (i.UNASSIGNED_PLAYER = 'unassigned'), (i.TOTAL = 'total');
          function p(a) {
            return r.has(a, '$id') && r.has(a, '$ref');
          }
          i.isDBRef = p;
          function v(a) {
            if (a !== void 0) {
              if (a._id !== void 0) return a._id;
              if (a.id !== void 0) return a.id;
            }
          }
          i.idFromEvent = v;
          function h(a) {
            return (
              a.hasOwnProperty('code') &&
              r.contains(
                ['insert', 'delete', 'replace', 'transaction', 'edit_group', 'undo', 'redo'],
                a.code
              )
            );
          }
          i.isMetaEvent = h;
          function s(a) {
            return a.hasOwnProperty('code') && a.code === 'transaction';
          }
          i.isTransactionMetaEvent = s;
          var l;
          (function (a) {
            (a[(a.Before = 0)] = 'Before'), (a[(a.After = 1)] = 'After');
          })((l = i.Placement || (i.Placement = {})));
          function u(a) {
            for (var n = { deleteIds: [], insertions: [] }, e = 0, t = a; e < t.length; e++) {
              var d = t[e];
              y(d, n);
            }
            return n;
          }
          i.aggregateGroupableEvents = u;
          function y(a, n) {
            var e, t;
            switch (a.code) {
              case 'insert':
                if (a.beforeId) n.insertions.push([a.beforeId, l.Before, a.events]);
                else if (a.afterId) n.insertions.push([a.afterId, l.After, a.events]);
                else throw new Error('need before/after id');
                break;
              case 'delete':
                (e = n.deleteIds).push.apply(e, a.deleteIds);
                break;
              case 'replace':
                if (a.deleteIds.length === 0) throw new Error('need deletes in a replace');
                (t = n.deleteIds).push.apply(t, a.deleteIds),
                  n.insertions.push([a.deleteIds[0], l.After, a.events]);
                break;
              case 'edit_group':
                for (var d = 0, f = a.events; d < f.length; d++) {
                  var _ = f[d];
                  y(_, n);
                }
                break;
            }
          }
          (function (a) {
            (a[(a.Latest = 0)] = 'Latest'),
              (a[(a.Before = 1)] = 'Before'),
              (a[(a.After = 2)] = 'After');
          })(i.AccessorType || (i.AccessorType = {}));
          var o = (function (a) {
            c.__extends(n, a);
            function n(e, t) {
              var d =
                a.call(this, 'Could not find '.concat(t, ' for accessor ').concat(e, '.')) || this;
              return (d.name = 'InvalidStateAccessorError'), d;
            }
            return n;
          })(Error);
          i.InvalidStateAccessorError = o;
        })(Xs)),
      Xs
    );
  }
  var Fc;
  function Ie() {
    if (Fc) return Bt;
    (Fc = 1),
      Object.defineProperty(Bt, '__esModule', { value: !0 }),
      (Bt.SnapshottedStateEngine =
        Bt.SnapshottedStateEngineStateType =
        Bt.VersionedStateEngine =
        Bt.StateEngine =
          void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = He(),
      p = (function () {
        function l(u) {
          (this.baseEvents = u), (this.nextEventOffset = 0), (this.idToIndexMap = {});
        }
        return (
          Object.defineProperty(l.prototype, 'latestState', {
            get: function () {
              return this.getLatestState();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (l.prototype.stateBeforeEventOrUndefined = function (u) {
            try {
              this.stateBeforeEvent(u);
            } catch {
              return;
            }
          }),
          (l.prototype.stateBeforeEventId = function (u) {
            return this.stateBeforeEvent(this.indexForEventId(u));
          }),
          (l.prototype.stateBeforeEventIdOrLatest = function (u) {
            return u !== void 0 ? this.stateBeforeEvent(this.indexForEventId(u)) : this.latestState;
          }),
          (l.prototype.stateAfterEvent = function (u) {
            return this.stateBeforeEvent(u + 1);
          }),
          (l.prototype.stateAfterEventId = function (u) {
            return this.stateAfterEvent(this.indexForEventId(u));
          }),
          (l.prototype.indexForEventId = function (u) {
            return this.idToIndexMap[u];
          }),
          (l.prototype.processToBeforeEvent = function (u) {
            if (u > this.baseEvents.length || u === 0) return !1;
            for (; this.nextEventOffset < u; ) this.fullyProcessNextEvent();
            return !0;
          }),
          (l.prototype.processToLatestEvent = function () {
            for (; this.nextEventOffset < this.baseEvents.length; ) this.fullyProcessNextEvent();
          }),
          (l.prototype.fullyProcessNextEvent = function () {
            var u = this.nextEvent;
            if (u !== void 0) {
              var y = (0, r.idFromEvent)(u);
              (this.idToIndexMap[y] = this.nextEventOffset),
                this.preProcessEvent(u),
                this.processNextEvent(),
                this.nextEventOffset++,
                this.postProcessEvent(u);
            }
          }),
          (l.prototype.preProcessEvent = function (u) {}),
          (l.prototype.postProcessEvent = function (u) {}),
          Object.defineProperty(l.prototype, 'nextEvent', {
            get: function () {
              return this.baseEvents[this.nextEventOffset];
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(l.prototype, 'lastEvent', {
            get: function () {
              if (this.nextEventOffset !== 0) return this.baseEvents[this.nextEventOffset - 1];
            },
            enumerable: !1,
            configurable: !0,
          }),
          l
        );
      })();
    Bt.StateEngine = p;
    var v = (function (l) {
      i.__extends(u, l);
      function u(y) {
        var o = l.call(this, y) || this;
        (o.baseEvents = y), (o.stateHistory = []);
        var a = o.initialState().set('nextEventOffset', o.nextEventOffset);
        return o.stateHistory.push(a), o;
      }
      return (
        (u.prototype.get = function (y) {
          return this.currentState.toJS()[y];
        }),
        (u.prototype.getLatest = function (y) {
          return this.latestState.toJS()[y];
        }),
        (u.prototype.getLatestState = function () {
          return this.processToLatestEvent(), this.stateHistory[this.nextEventOffset];
        }),
        Object.defineProperty(u.prototype, 'currentState', {
          get: function () {
            return this.stateHistory[this.nextEventOffset];
          },
          enumerable: !1,
          configurable: !0,
        }),
        (u.prototype.stateBeforeEvent = function (y) {
          if (y < 0 || y > this.baseEvents.length)
            throw new r.InvalidStateAccessorError(r.AccessorType.Before, y.toString());
          return this.processToBeforeEvent(y), this.stateHistory[y];
        }),
        (u.prototype.processNextEvent = function () {
          var y = this.processOneEvent(this.currentState, this.nextEvent);
          if (y) {
            var o = y.set('nextEventOffset', this.nextEventOffset);
            this.stateHistory.push(o);
          }
        }),
        (u.prototype.rollbackToBeforeEvent = function (y) {
          y > this.stateHistory.length - 1 ||
            ((this.nextEventOffset = y), this.stateHistory.splice(y + 1, 1 / 0));
        }),
        u
      );
    })(p);
    Bt.VersionedStateEngine = v;
    var h = (function () {
      function l() {}
      return l;
    })();
    Bt.SnapshottedStateEngineStateType = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y) {
        var o = l.call(this, y) || this;
        return (
          (o.baseEvents = y),
          (o.snapshotIntervals = [10, 40, 80]),
          (o.snapshotRotationInterval = 10),
          (o.eventsSinceLastRotation = 0),
          (o.snapshots = {}),
          (o.extensionEngines = []),
          o.resetToInitialState(),
          o
        );
      }
      return (
        (u.prototype.get = function (y) {
          return this.currentState[y];
        }),
        (u.prototype.getLatest = function (y) {
          return this.latestState[y];
        }),
        Object.defineProperty(u.prototype, 'currentState', {
          get: function () {
            return this.state;
          },
          enumerable: !1,
          configurable: !0,
        }),
        (u.prototype.getLatestState = function () {
          return this.processToLatestEvent(), this.state;
        }),
        (u.prototype.stateBeforeEvent = function (y) {
          if (y < 0 || y > this.baseEvents.length)
            throw new r.InvalidStateAccessorError(r.AccessorType.Before, y.toString());
          return y === this.nextEventOffset
            ? this.currentState
            : (this.rollbackToBeforeEvent(y), this.currentState);
        }),
        (u.prototype.resetToInitialState = function () {
          (this.state = this.initialState()),
            (this.snapshots = {}),
            (this.nextEventOffset = 0),
            (this.eventsSinceLastRotation = 0);
        }),
        (u.prototype.copyState = function () {
          return JSON.parse(JSON.stringify(this.state));
        }),
        (u.prototype.rotateSnapshots = function () {
          for (
            var y = {},
              o = this.nextEventOffset - 1,
              a = c.sortBy(Object.keys(this.snapshots).map(Number), function (P) {
                return -1 * Number(P);
              }),
              n = 0,
              e = this.snapshotIntervals;
            n < e.length;
            n++
          ) {
            for (var t = e[n], d = a[0], f = 0, _ = a; f < _.length; f++) {
              var S = _[f];
              if (Number(S) < o + 1 - t) break;
              d = S;
            }
            d !== void 0 && (y[d] = !0);
          }
          for (var S in this.snapshots)
            this.snapshots.hasOwnProperty(S) && y[S] !== !0 && delete this.snapshots[S];
          (this.snapshots[o + 1] = this.copyState()), (this.eventsSinceLastRotation = 0);
        }),
        (u.prototype.processNextEvent = function () {
          this.processOneEvent(this.state, this.nextEvent), this.eventsSinceLastRotation++;
        }),
        (u.prototype.postProcessEvent = function (y) {
          for (var o = 0, a = this.extensionEngines; o < a.length; o++) {
            var n = a[o];
            n.fullyProcessNextEvent();
          }
          this.eventsSinceLastRotation >= this.snapshotRotationInterval && this.rotateSnapshots();
        }),
        (u.prototype.rollbackToBeforeEvent = function (y) {
          for (
            var o,
              a = c.sortBy(Object.keys(this.snapshots).map(Number), function (F) {
                return -1 * Number(F);
              }),
              n = 0,
              e = a;
            n < e.length;
            n++
          ) {
            var t = e[n];
            if (Number(t) < y) {
              o = Number(t);
              break;
            } else delete this.snapshots[t];
          }
          if (o === void 0) {
            this.resetToInitialState();
            for (var d = 0, f = this.extensionEngines; d < f.length; d++) {
              var _ = f[d];
              _.rollbackToBeforeEvent(0);
            }
            this.processToBeforeEvent(y);
            return;
          }
          for (var S = 0, P = this.extensionEngines; S < P.length; S++) {
            var _ = P[S];
            _.rollbackToBeforeEvent(o);
          }
          var I = [
              this.eventsSinceLastRotation,
              this.nextEventOffset - o,
              this.snapshotRotationInterval,
            ],
            b = I[0],
            E = I[1],
            T = I[2];
          (this.eventsSinceLastRotation = (((b - E) % T) + T) % T),
            (this.nextEventOffset = o),
            this.state.restoreFromSnapshot(JSON.parse(JSON.stringify(this.snapshots[o]))),
            this.processToBeforeEvent(y);
        }),
        u
      );
    })(p);
    return (Bt.SnapshottedStateEngine = s), Bt;
  }
  var Xt = {},
    kc;
  function wc() {
    if (kc) return Xt;
    (kc = 1),
      Object.defineProperty(Xt, '__esModule', { value: !0 }),
      (Xt.setDebug = Xt.debug = void 0),
      (Xt.debug = !1);
    function i(c) {
      Xt.debug = c;
    }
    return (Xt.setDebug = i), Xt;
  }
  var Cc;
  function dt() {
    if (Cc) return Ce;
    (Cc = 1),
      Object.defineProperty(Ce, '__esModule', { value: !0 }),
      (Ce.EngineStateAccessor =
        Ce.BaseStateAccessor =
        Ce.TranscoderController =
        Ce.CompactorController =
        Ce.InvalidEventIndexError =
        Ce.Controller =
        Ce.SnapshottedTranscoder =
        Ce.TranscoderState =
        Ce.SabertoothError =
          void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(Ie()),
      p = i.__importStar(He()),
      v = wc(),
      h = (function (d) {
        i.__extends(f, d);
        function f(_, S) {
          var P = d.call(this, JSON.stringify({ type: _, reason: S })) || this;
          return (P.name = 'SabertoothError'), Object.setPrototypeOf(P, f.prototype), P;
        }
        return f;
      })(Error);
    Ce.SabertoothError = h;
    var s = (function (d) {
      i.__extends(f, d);
      function f() {
        var _ = (d !== null && d.apply(this, arguments)) || this;
        return (
          (_.outStream = []),
          (_.idToInputIndex = {}),
          (_.idToOutputIndex = {}),
          (_.idToOutputCount = {}),
          (_.outIndexMap = {}),
          _
        );
      }
      return (
        (f.prototype.restoreFromSnapshot = function (_) {
          (this.outStream = _.outStream),
            (this.idToInputIndex = _.idToInputIndex),
            (this.idToOutputIndex = _.idToOutputIndex),
            (this.idToOutputCount = _.idToOutputCount);
        }),
        f
      );
    })(r.SnapshottedStateEngineStateType);
    Ce.TranscoderState = s;
    var l = (function (d) {
      i.__extends(f, d);
      function f() {
        return (d !== null && d.apply(this, arguments)) || this;
      }
      return (
        Object.defineProperty(f.prototype, 'outStream', {
          get: function () {
            return this.state.outStream;
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(f.prototype, 'outIndexMap', {
          get: function () {
            return this.state.outIndexMap;
          },
          enumerable: !1,
          configurable: !0,
        }),
        (f.prototype.preProcessEvent = function (_) {
          var S = p.idFromEvent(_);
          (this.state.idToInputIndex[S] = this.idToIndexMap[S]),
            (this.state.idToOutputIndex[S] = this.outStream.length);
        }),
        (f.prototype.postProcessEvent = function (_) {
          var S = p.idFromEvent(_);
          this.state.idToOutputCount[S] =
            this.state.outStream.length - this.state.idToOutputIndex[S];
          for (var P = this.state.idToOutputIndex[S], I = P; I < this.state.outStream.length; I++) {
            var b = p.idFromEvent(this.state.outStream[I]);
            this.state.outIndexMap[b] = I;
          }
          d.prototype.postProcessEvent.call(this, _);
        }),
        (f.prototype.currentStateOfEngine = function (_) {
          return this.outStream.length === 0
            ? _.stateBeforeEvent(0)
            : _.stateAfterEvent(this.outStream.length - 1);
        }),
        (f.prototype.firstOutputIndexAfterInputEventId = function (_) {
          var S = this.state.idToOutputIndex[_],
            P = this.state.idToOutputCount[_];
          return S + P;
        }),
        (f.prototype._inputEventForOutputIndex = function (_) {
          for (var S in this.state.idToInputIndex)
            if (
              this.state.idToOutputIndex[S] <= _ &&
              this.state.idToOutputIndex[S] + this.state.idToOutputCount[S] > _
            )
              return this.baseEvents[this.state.idToInputIndex[S]];
          throw new Error('input event index missing output event index');
        }),
        (f.prototype._outputEventsForInputIndex = function (_) {
          for (
            var S = [], P = p.idFromEvent(this.baseEvents[_]), I = 0;
            I < this.state.idToOutputCount[P];
            I++
          )
            S.push(this.state.outStream[I + this.state.idToOutputIndex[P]]);
          return S;
        }),
        f
      );
    })(r.SnapshottedStateEngine);
    Ce.SnapshottedTranscoder = l;
    var u = (function () {
      function d() {}
      return (
        (d.prototype.pushSerialized = function (f) {
          var _ = JSON.parse(f);
          return this.pushBatch(_);
        }),
        (d.prototype.pushBatch = function (f, _) {
          for (var S = this.outputStream().length - 1, P = 0, I = f; P < I.length; P++) {
            var b = I[P],
              E = this.push(b, _);
            S = Math.min(S, E);
          }
          return S;
        }),
        (d.prototype.latestState = function () {
          return new this.stateAccessorClass(p.AccessorType.Latest, this);
        }),
        (d.prototype.setDebug = function (f) {
          return (0, v.setDebug)(f);
        }),
        d
      );
    })();
    Ce.Controller = u;
    var y = (function (d) {
      i.__extends(f, d);
      function f(_) {
        var S = d.call(this, 'State for '.concat(_, ' was undefined.')) || this;
        return (S.name = 'InvalidEventIndexError'), S;
      }
      return f;
    })(Error);
    Ce.InvalidEventIndexError = y;
    var o = (function (d) {
      i.__extends(f, d);
      function f() {
        var _ = (d !== null && d.apply(this, arguments)) || this;
        return (_.scratch = []), (_.preScratchTailIndex = void 0), (_.numberOfEventsPushed = 0), _;
      }
      return (
        (f.prototype.inStreamLength = function () {
          return this.compactor.inStream.length;
        }),
        (f.prototype.clearScratch = function () {
          if (this.scratch.length !== 0) {
            for (var _ = 0, S = this.engines; _ < S.length; _++) {
              var P = S[_];
              P.rollbackToBeforeEvent(this.preScratchTailIndex + 1);
            }
            this.compactor.clearScratch(this.scratch),
              (this.scratch = []),
              (this.preScratchTailIndex = void 0);
          }
        }),
        (f.prototype.pushToScratch = function (_) {
          if (p.isMetaEvent(_)) throw 'Scratch does not currently support compactor metaevents';
          this.preScratchTailIndex === void 0 &&
            (this.preScratchTailIndex = this.compactor.outStream.length - 1),
            this.scratch.push(_),
            this.compactor.pushForScratch(_);
        }),
        (f.prototype.pushBatchToScratch = function (_) {
          for (var S = 0, P = _; S < P.length; S++) {
            var I = P[S];
            this.pushToScratch(I);
          }
        }),
        (f.prototype.firstScratchEventId = function () {
          if (this.scratch.length !== 0) return this.scratch[0].id;
        }),
        (f.prototype.undoRedoAvailability = function (_) {
          var S = this.compactor.eventTargetedByUndoSubjectToBlacklist(_);
          return { undo: S !== void 0, undoEvent: S, redo: this.compactor.redoIsPossible(_) };
        }),
        (f.prototype.push = function (_, S) {
          this.clearScratch(), this.numberOfEventsPushed++;
          var P = this.compactor.outStream.length - 1,
            I = Number(this.compactor.push(_, S ?? 'looselyCheckUndoRedo'));
          if (P <= I) return I;
          for (var b = 0, E = this.engines; b < E.length; b++) {
            var T = E[b];
            T.rollbackToBeforeEvent(I + 1);
          }
          return I;
        }),
        (f.prototype.pushBatch = function (_, S) {
          return d.prototype.pushBatch.call(this, _, S);
        }),
        (f.prototype.stateBeforeEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.Before, this);
          if (((S.eventIndex = this.compactor.outIndexMap[_]), S.eventIndex === void 0))
            throw new p.InvalidStateAccessorError(p.AccessorType.Before, _);
          return S;
        }),
        (f.prototype.stateAfterEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.After, this);
          if (((S.eventIndex = this.compactor.outIndexMap[_]), S.eventIndex === void 0))
            throw new p.InvalidStateAccessorError(p.AccessorType.After, _);
          return S;
        }),
        (f.prototype.stateAfterTimestamp = function (_) {
          var S = t(this.compactor.outStream, _);
          return S
            ? this.stateAfterEvent(S.id)
            : new this.stateAccessorClass(p.AccessorType.After, this);
        }),
        (f.prototype.eventIdAfterTimestamp = function (_) {
          var S = t(this.compactor.outStream, _);
          if (S) return S.id;
          throw new Error('No event found for timestamp '.concat(_));
        }),
        (f.prototype.outputStream = function () {
          return this.compactor.outStream;
        }),
        (f.prototype.outputEventById = function (_) {
          return this.compactor.outStream[this.compactor.outIndexMap[_]];
        }),
        (f.prototype.outputEventsById = function (_) {
          return c.map(_, this.outputEventById, this);
        }),
        (f.prototype.updateFromPushPayload = function (_, S) {
          for (
            var P = this.compactor.outStream.length - 1, I = {}, b = 0, E = S;
            b < E.length;
            b++
          ) {
            var T = E[b];
            I[p.idFromEvent(T)] = T;
          }
          for (var F = this.numberOfEventsPushed; F < _.length; F++) {
            var R = _[F],
              L = I[R];
            if (L !== void 0) {
              var x = L.event_data;
              P = Math.min(P, this.push(x, 'looselyCheckUndoRedo'));
            } else {
              console.log(
                'WARNING: The controller thinks that event ' +
                  R +
                  ' is new. But we cannot find it in the newEvents in the push payload. Will not attempt to push any more events'
              );
              break;
            }
          }
          return P;
        }),
        (f.prototype.updateFromSerializedPushPayload = function (_, S) {
          var P = JSON.parse(S);
          return this.updateFromPushPayload(_, P);
        }),
        f
      );
    })(u);
    Ce.CompactorController = o;
    var a = (function (d) {
      i.__extends(f, d);
      function f() {
        var _ = (d !== null && d.apply(this, arguments)) || this;
        return (_.legacyEvents = []), _;
      }
      return (
        (f.prototype.push = function (_) {
          var S = p.idFromEvent(_);
          if (S !== void 0 && this.transcoder.latestState.idToInputIndex[S] !== void 0)
            return this.replaceEventsInLegacyStream([_]);
          var P = this.transcoder.outStream.length - 1;
          return this.legacyEvents.push(_), this.transcoder.processToLatestEvent(), P;
        }),
        (f.prototype.processUndosFromPushPayload = function (_) {
          for (var S = void 0, P = Math.min(_.length, this.legacyEvents.length), I = 0; I < P; I++)
            if (_[I] !== p.idFromEvent(this.legacyEvents[I])) {
              S = I - 1;
              break;
            }
          return (
            S === void 0 && _.length < this.legacyEvents.length && (S = _.length - 1),
            S !== void 0
              ? this.deleteTailEvents(this.legacyEvents.length - 1 - S)
              : this.transcoder.outStream.length - 1
          );
        }),
        (f.prototype.updateFromPushPayload = function (_, S) {
          if (this.transcoder.baseEvents.length > 0) {
            var P = p.idFromEvent(this.transcoder.baseEvents[0]);
            P && P.indexOf('auto_generated') !== -1 && _.unshift(P);
          }
          for (
            var I = this.processUndosFromPushPayload(_), b = {}, E = 0, T = S;
            E < T.length;
            E++
          ) {
            var F = T[E];
            b[p.idFromEvent(F)] = F;
          }
          for (var R = [], L = 0, x = this.legacyEvents; L < x.length; L++) {
            var N = x[L],
              M = p.idFromEvent(N);
            M && c.has(b, M) && R.push(b[M]);
          }
          R.length !== 0 && (I = this.replaceEventsInLegacyStream(R));
          for (var J = this.legacyEvents.length; J < _.length; J++) {
            var D = _[J],
              $ = b[D];
            if ($ !== void 0) this.push($);
            else {
              console.log(
                'WARNING: The controller thinks that event ' +
                  D +
                  ' is new. But we cannot find it in the newEvents in the push payload. Will not attempt to push any more events'
              );
              break;
            }
          }
          return this.transcoder.processToLatestEvent(), I;
        }),
        (f.prototype.updateFromSerializedPushPayload = function (_, S) {
          var P = JSON.parse(S);
          return this.updateFromPushPayload(_, P);
        }),
        (f.prototype.replaceEventsInLegacyStream = function (_) {
          for (
            var S = c.clone(this.transcoder.latestState), P = 1 / 0, I = 0, b = 0, E = _;
            b < E.length;
            b++
          ) {
            var T = E[b],
              F = p.idFromEvent(T),
              R = S.idToInputIndex[F];
            R < P && ((P = R), (I = S.idToOutputIndex[F]));
          }
          this.transcoder.rollbackToBeforeEvent(P);
          var L = this.transcoder.outStream.length - 1;
          this.setEngineOutStreamAndIndex(I);
          for (var x = 0, N = _; x < N.length; x++) {
            var M = N[x],
              J = S.idToInputIndex[p.idFromEvent(M)];
            this.legacyEvents.splice(J, 1, M);
          }
          return this.transcoder.processToLatestEvent(), L;
        }),
        (f.prototype.deleteTailEvents = function (_) {
          (_ = Math.min(this.legacyEvents.length, _)),
            this.legacyEvents.splice(this.legacyEvents.length - _, _),
            this.transcoder.rollbackToBeforeEvent(this.legacyEvents.length);
          var S = this.transcoder.outStream.length - 1;
          return this.setEngineOutStreamAndIndex(this.transcoder.outStream.length), S;
        }),
        (f.prototype.stateBeforeLegacyEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.Before, this);
          return (S.eventIndex = this.transcoder.latestState.idToOutputIndex[_]), S;
        }),
        (f.prototype.stateAfterLegacyEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.Before, this);
          return (S.eventIndex = this.transcoder.firstOutputIndexAfterInputEventId(_)), S;
        }),
        (f.prototype.stateBeforeEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.Before, this);
          return (S.eventIndex = this.transcoder.outIndexMap[_]), S;
        }),
        (f.prototype.stateAfterEvent = function (_) {
          var S = new this.stateAccessorClass(p.AccessorType.After, this);
          return (S.eventIndex = this.transcoder.outIndexMap[_]), S;
        }),
        (f.prototype.stateAfterTimestamp = function (_) {
          return new this.stateAccessorClass(p.AccessorType.After, this);
        }),
        (f.prototype.eventIdAfterTimestamp = function (_) {
          throw new Error('method not implemented for Transcoder');
        }),
        (f.prototype.outputStream = function () {
          return this.transcoder.processToLatestEvent(), this.transcoder.outStream;
        }),
        (f.prototype.outputEventById = function (_) {
          return this.outputStream()[this.transcoder.outIndexMap[_]];
        }),
        (f.prototype.outputEventsById = function (_) {
          return c.map(_, this.outputEventById, this);
        }),
        (f.prototype.setEngineOutStreamAndIndex = function (_) {
          for (var S = 0, P = this.engines; S < P.length; S++) {
            var I = P[S];
            (I.baseEvents = this.transcoder.outStream), I.rollbackToBeforeEvent(_);
          }
        }),
        f
      );
    })(u);
    Ce.TranscoderController = a;
    var n = (function () {
      function d(f) {
        (this.accessorType = f),
          (this.typeToMethodName = {
            0: 'latestState',
            1: 'stateBeforeEvent',
            2: 'stateAfterEvent',
          });
      }
      return d;
    })();
    Ce.BaseStateAccessor = n;
    var e = (function (d) {
      i.__extends(f, d);
      function f(_, S) {
        var P = d.call(this, _) || this;
        return (P.controller = S), P;
      }
      return (
        (f.prototype.get = function (_, S) {
          return this.stateForCurrentAccessType(S)[_];
        }),
        (f.prototype.call = function (_, S, P) {
          var I;
          return (I = this.stateForCurrentAccessType(P))[_].apply(I, S);
        }),
        (f.prototype.stateForCurrentAccessType = function (_) {
          if (this.accessorType === p.AccessorType.Latest)
            return _[this.typeToMethodName[this.accessorType]];
          var S = _[this.typeToMethodName[this.accessorType]](this.eventIndex);
          if (S === void 0) throw new y(this.eventIndex);
          return S;
        }),
        f
      );
    })(n);
    Ce.EngineStateAccessor = e;
    function t(d, f) {
      for (var _ = 0, S = d.length - 1; _ <= S; ) {
        var P = Math.floor((_ + S) / 2),
          I = d[P - 1];
        if (I) {
          if (d[P].createdAt > f && I.createdAt <= f) return I;
        } else return d[P];
        var b = d[P].createdAt;
        b && f < b ? (S = P - 1) : (_ = P + 1);
      }
      return d[d.length - 1];
    }
    return Ce;
  }
  var Nt = {},
    Zs = {},
    Mc;
  function Pt() {
    return (
      Mc ||
        ((Mc = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.baseRunningPlayTypeConfigs =
              i.ballInPlayResultConfigs =
              i.PitchSpeedProvider =
              i.PitchResult =
              i.ReplaceRunnerFlavor =
              i.BaseballOffensiveLocation =
              i.BaseballOffensiveRole =
                void 0),
            (function (c) {
              (c.Batter = 'batter'), (c.Runner = 'runner');
            })(i.BaseballOffensiveRole || (i.BaseballOffensiveRole = {})),
            (function (c) {
              (c.Batter = 'batter'),
                (c.RunnerOnFirst = 'runner_first'),
                (c.RunnerOnSecond = 'runner_second'),
                (c.RunnerOnThird = 'runner_third');
            })(i.BaseballOffensiveLocation || (i.BaseballOffensiveLocation = {})),
            (function (c) {
              (c.SpecialPinchRunner = 'special_pinch_runner'),
                (c.RetroactiveSubstitution = 'retroactive_sub');
            })(i.ReplaceRunnerFlavor || (i.ReplaceRunnerFlavor = {})),
            (function (c) {
              (c.Ball = 'ball'),
                (c.IntentionalBall = 'intentional_ball'),
                (c.StrikeSwinging = 'strike_swinging'),
                (c.StrikeLooking = 'strike_looking'),
                (c.Foul = 'foul'),
                (c.BallInPlay = 'ball_in_play'),
                (c.IllegalPitch = 'illegal_pitch'),
                (c.FoulTip = 'foul_tip'),
                (c.FoulBunt = 'foul_bunt');
            })(i.PitchResult || (i.PitchResult = {})),
            (function (c) {
              (c.POCKET_RADAR = 'pocket_radar'), (c.USER = 'user');
            })(i.PitchSpeedProvider || (i.PitchSpeedProvider = {})),
            (i.ballInPlayResultConfigs = {
              single: { bases: 1, batterOut: !1, error: !1 },
              double: { bases: 2, batterOut: !1, error: !1 },
              triple: { bases: 3, batterOut: !1, error: !1 },
              home_run: { bases: 4, batterOut: !1, error: !1 },
              dropped_third_strike: { bases: 1, batterOut: !1, error: !1 },
              dropped_third_strike_batter_out: { bases: 1, batterOut: !0, error: !1 },
              fielders_choice: { bases: 1, batterOut: !1, error: !1 },
              error: { bases: 1, batterOut: !1, error: !0 },
              sacrifice_bunt: { bases: 1, batterOut: !1, error: !1 },
              sacrifice_fly: { bases: 1, batterOut: !0, error: !1 },
              sacrifice_bunt_error: { bases: 1, batterOut: !1, error: !0 },
              sacrifice_fly_error: { bases: 1, batterOut: !1, error: !0 },
              batter_out: { bases: 0, batterOut: !0, error: !1 },
              batter_out_advance_runners: { bases: 1, batterOut: !0, error: !1 },
              offensive_interference: { bases: 0, batterOut: !0, error: !1 },
              infield_fly: { bases: 0, batterOut: !0, error: !1 },
              other_out: { bases: 0, batterOut: !0, error: !1 },
              foul_tip_out: { bases: 0, batterOut: !0, error: !1 },
            }),
            (i.baseRunningPlayTypeConfigs = {
              offensive_interference: { runnerOut: !0, error: !1 },
              stole_base: { runnerOut: !1, error: !1 },
              defensive_indifference: { runnerOut: !1, error: !1 },
              passed_ball: { runnerOut: !1, error: !1 },
              on_same_pitch: { runnerOut: !1, error: !1 },
              wild_pitch: { runnerOut: !1, error: !1 },
              attempted_pickoff: { runnerOut: !1, error: !1 },
              fielders_choice_attempted_pickoff: { runnerOut: !1, error: !1 },
              advanced_on_error: { runnerOut: !1, error: !0 },
              on_same_error: { runnerOut: !1, error: !1 },
              out_on_appeal: { runnerOut: !0, error: !1 },
              caught_stealing: { runnerOut: !0, error: !1 },
              other_out: { runnerOut: !0, error: !1 },
              other_advance: { runnerOut: !1, error: !1 },
              picked_off: { runnerOut: !0, error: !1 },
              did_not_score: { runnerOut: !1, error: !1 },
              advanced_on_last_play: { runnerOut: !1, error: !1 },
              remained_on_last_play: { runnerOut: !1, error: !1 },
              out_on_last_play: { runnerOut: !0, error: !1 },
            });
        })(Zs)),
      Zs
    );
  }
  var nt = {},
    xc;
  function Ty() {
    if (xc) return nt;
    (xc = 1),
      Object.defineProperty(nt, '__esModule', { value: !0 }),
      (nt.eventEndedInning =
        nt.eventIsFromLegacyAndroid =
        nt.isNewLineup =
        nt.getParticipants =
        nt.getEventLineupIndex =
        nt.teamForLineupIndexKey =
          void 0);
    var i = Q,
      c = i.__importStar(Se);
    function r(u, y) {
      var o = y === 'home' ? 'away' : 'home';
      return s(u) ? y : o;
    }
    nt.teamForLineupIndexKey = r;
    function p(u, y, o) {
      var a = o[u];
      if (a !== void 0) {
        var n = ''.concat(r(o, y), '_lineupindex');
        return a.situation !== void 0 && a.situation[n] !== void 0 ? a.situation[n] : a[n];
      }
    }
    nt.getEventLineupIndex = p;
    function v(u, y) {
      return c.filter(y.participants, function (o) {
        return c.intersection(o.roles, u).length === u.length;
      });
    }
    nt.getParticipants = v;
    function h(u) {
      return u.batters !== void 0;
    }
    nt.isNewLineup = h;
    function s(u) {
      return u['~va'] !== void 0 && u['~vc'] === void 0;
    }
    nt.eventIsFromLegacyAndroid = s;
    function l(u) {
      var y = u.setting,
        o = u.result;
      return (
        !!(y != null && y.situation) &&
        !!(o != null && o.situation) &&
        y.situation.half !== o.situation.half
      );
    }
    return (nt.eventEndedInning = l), nt;
  }
  Object.defineProperty(Nt, '__esModule', { value: !0 }),
    (Nt.Transcoder = Nt.transcoderConfigFromStream = Nt.TranscoderState = void 0);
  var dr = Q,
    fe = dr.__importStar(Se),
    eo = dr.__importStar(Pt()),
    Lc = dr.__importStar(dt()),
    me = dr.__importStar(Ty()),
    kn = wc(),
    Oy = He(),
    Zt = Pt(),
    Ay = {
      BK: 'balk',
      IP: 'illegal_pitch_advance',
      SO: 'end_at_bat',
      BB: 'end_at_bat',
      HB: 'end_at_bat',
      CI: 'end_at_bat',
      '1B': 'ball_in_play',
      '2B': 'ball_in_play',
      '3B': 'ball_in_play',
      HR: 'ball_in_play',
      E: 'ball_in_play',
      BT: 'ball_in_play',
      FC: 'ball_in_play',
      OI: 'ball_in_play',
      K: 'ball_in_play',
      OG: 'ball_in_play',
      OL: 'ball_in_play',
      OF: 'ball_in_play',
      IF: 'ball_in_play',
      DP: 'ball_in_play',
      TP: 'ball_in_play',
      KO: 'ball_in_play',
      SHB: 'ball_in_play',
      'SHB+E': 'ball_in_play',
      SHF: 'ball_in_play',
      'SHF+E': 'ball_in_play',
      'F+E': 'foul_error',
      OO: 'ball_in_play',
      FT: 'ball_in_play',
      rTU: 'base_running',
      rRF: 'base_running',
      rCT: 'base_running',
      rOA: 'base_running',
      rRS: 'base_running',
      rBT: 'base_running',
      rOI: 'base_running',
      rDT: 'base_running',
      rSB: 'base_running',
      rDI: 'base_running',
      rPB: 'base_running',
      rWP: 'base_running',
      rAP: 'base_running',
      rFC: 'base_running',
      rAE: 'base_running',
      rOOA: 'base_running',
      rCS: 'base_running',
      rOO: 'base_running',
      rPO: 'base_running',
      rDO: 'base_running',
      rCR: 'base_running',
      rTH: 'base_running',
      rET: 'base_running',
    },
    Ry = {
      FB: 'fastball',
      CB: 'curveball',
      SL: 'slider',
      CH: 'changeup',
      CT: 'cutter',
      RB: 'riseball',
      DB: 'dropball',
      SB: 'screwball',
      DC: 'drop_curve',
      KB: 'knuckleball',
      KC: 'knuckle_curve',
      '--': void 0,
    },
    Fy = (function (i) {
      dr.__extends(c, i);
      function c(r, p) {
        return (
          i.call(this, 'Player id: '.concat(r, ' is not part of teams: ').concat(p.join(', '))) ||
          this
        );
      }
      return c;
    })(Error),
    Dc = (function (i) {
      dr.__extends(c, i);
      function c() {
        var r = (i !== null && i.apply(this, arguments)) || this;
        return (
          (r.nextEventOffset = 0),
          (r.lineupsInitialized = {}),
          (r.seedFieldersOnNextEligibleEvent = {}),
          (r.pitcherAndCatcherSeededForTeam = {}),
          r
        );
      }
      return (
        (c.prototype.restoreFromSnapshot = function (r) {
          i.prototype.restoreFromSnapshot.call(this, r),
            (this.nextEventOffset = r.nextEventOffset),
            (this.lineupsInitialized = r.lineupsInitialized),
            (this.seedFieldersOnNextEligibleEvent = r.seedFieldersOnNextEligibleEvent),
            (this.pitcherAndCatcherSeededForTeam = r.pitcherAndCatcherSeededForTeam),
            (this.playerTeamMembership = r.playerTeamMembership);
        }),
        (c.prototype.safePlayerTeamMembership = function (r) {
          var p = this.playerTeamMembership[r];
          if (p) return p;
          var v = Array.from(new Set(Object.values(this.playerTeamMembership)));
          throw new Fy(r, v);
        }),
        c
      );
    })(Lc.TranscoderState);
  Nt.TranscoderState = Dc;
  function ky(i, c, r, p, v) {
    var h = { homeTeamId: p, awayTeamId: v, playerTeamMembership: {} };
    if (i.sal !== void 0 && i.sal.batters !== void 0)
      for (var s = 0, l = i.sal.batters; s < l.length; s++) {
        var u = l[s];
        h.playerTeamMembership[u.curr_id] = h.awayTeamId;
      }
    for (var y = 0, o = c; y < o.length; y++) {
      var a = o[y];
      h.playerTeamMembership[a] = h.homeTeamId;
    }
    if (i.shl !== void 0 && i.shl.batters !== void 0)
      for (var n = 0, e = i.shl.batters; n < e.length; n++) {
        var u = e[n];
        h.playerTeamMembership[u.curr_id] = h.homeTeamId;
      }
    for (var t = 0, d = r; t < d.length; t++) {
      var f = d[t];
      h.playerTeamMembership[f] = h.awayTeamId;
    }
    return h;
  }
  Nt.transcoderConfigFromStream = ky;
  var wy = (function (i) {
    dr.__extends(c, i);
    function c(r, p, v, h, s, l) {
      var u = i.call(this, p) || this;
      return (
        (u.config = r),
        (u.baseEvents = p),
        (u.situation = v),
        (u.lineup = h),
        (u.fielders = s),
        (u.baserunners = l),
        (u.state.playerTeamMembership = r.playerTeamMembership),
        u.processToLatestEvent(),
        u
      );
    }
    return (
      (c.prototype.initialState = function () {
        var r = new Dc();
        return (
          this.config !== void 0 && (r.playerTeamMembership = this.config.playerTeamMembership), r
        );
      }),
      (c.prototype.inputEventById = function (r) {
        return this.baseEvents[this.state.idToInputIndex[r]];
      }),
      (c.prototype.addWriteInDescription = function (r, p) {
        r.note !== void 0 && (p.description = r.note);
      }),
      (c.prototype.processOneEvent = function (r, p) {
        if (((this._eventCounter = -1), p.passThrough === !0)) {
          this.state.outStream.push(p);
          return;
        }
        var v = this.currentStateOfEngine(this.situation).atBatTeamId,
          h = this.currentStateOfEngine(this.situation).inFieldTeamId;
        this.updateTeamMembershipFromEvent(p),
          !this.state.lineupsInitialized[v] &&
            this.eventIsEligibleToInitializeLineup(p) &&
            p.result !== void 0 &&
            p.result.lineup !== void 0 &&
            (this.seedLineupForTeam(p, v, p.result.lineup),
            (this.state.seedFieldersOnNextEligibleEvent[h] = !0),
            (this.state.lineupsInitialized[v] = !0)),
          this.state.seedFieldersOnNextEligibleEvent[h] &&
            p.fielders !== void 0 &&
            (this.seedFieldersForTeam(h, p.fielders, p),
            (this.state.seedFieldersOnNextEligibleEvent[h] = !1)),
          h !== void 0 &&
            this.state.pitcherAndCatcherSeededForTeam[h] !== !0 &&
            p.code === 'pitch' &&
            (this.seedPitcherAndCatcherFromPitch(h, p),
            (this.state.pitcherAndCatcherSeededForTeam[h] = !0)),
          this.state.outStream.push.apply(
            this.state.outStream,
            this.inferredPlayEditingSubsForEvent(p)
          ),
          this.state.outStream.push.apply(this.state.outStream, this.scoreOverridesForEvent(p)),
          this.state.outStream.push.apply(this.state.outStream, this.transcodeEvent(p)),
          this.state.outStream.push.apply(
            this.state.outStream,
            this.batterIndexOverridesForEvent(p)
          ),
          this.state.nextEventOffset++;
      }),
      (c.prototype.pushEventsFromCompletedStream = function (r) {
        this.state.outStream.push.apply(this.state.outStream, this.generateDecisionEvents(r));
      }),
      (c.prototype.nextEventIdForEvent = function (r) {
        return this._eventCounter++, ''.concat(r._id, '_').concat(this._eventCounter);
      }),
      (c.prototype.eventIsEligibleToInitializeLineup = function (r) {
        return r.code === 'pitch'
          ? !0
          : !fe.contains(
              [
                'over',
                'rename',
                'swaphome',
                'tov',
                'undh',
                'dh',
                'deact',
                'act',
                'sub',
                'reord',
                'pos',
                'skp',
                'newplayer',
                'clear',
                'crn',
              ],
              r.code
            );
      }),
      (c.prototype.seedPitcherAndCatcherFromPitch = function (r, p) {
        if (p.participants !== void 0)
          for (var v = 0, h = p.participants; v < h.length; v++) {
            var s = h[v],
              l = void 0,
              u = s.roles;
            if (u && fe.contains(u, 'pitcher')) l = 'P';
            else if (fe.contains(u ?? [], 'catcher')) l = 'C';
            else continue;
            this.state.outStream.push({
              code: 'fill_position',
              id: this.nextEventIdForEvent(p),
              attributes: { teamId: r, playerId: s.player.$id, position: l },
            });
          }
      }),
      (c.prototype.seedFieldersForTeam = function (r, p, v) {
        for (var h in p)
          if (p.hasOwnProperty(h)) {
            var s = p[h],
              l = {
                code: 'fill_position',
                id: this.nextEventIdForEvent(v),
                attributes: { teamId: r, playerId: s, position: h },
              };
            this.state.outStream.push(l);
          }
      }),
      (c.prototype.seedLineupForTeam = function (r, p, v) {
        if (me.isNewLineup(v)) {
          for (var h in v.positions)
            if (v.positions.hasOwnProperty(h)) {
              var s = v.positions[h];
              if (s.curr_id !== void 0) {
                var l = {
                  code: 'fill_position',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: p, playerId: s.curr_id, position: h },
                };
                this.state.outStream.push(l);
              }
            }
        } else
          for (var u = 0; u < this.lineupLength(v); u++) {
            var y = {
              code: 'fill_position',
              id: this.nextEventIdForEvent(r),
              attributes: {
                teamId: p,
                playerId: this.playerIdAtLineupIndex(v, u),
                position: v.entries[u].position,
              },
            };
            this.state.outStream.push(y);
          }
        if (me.isNewLineup(v)) {
          for (var o in v.dhs)
            if (v.dhs.hasOwnProperty(o)) {
              var a = [v.dhs[o].b_id, v.dhs[o].f_id],
                n = a[0],
                e = a[1];
              this.state.outStream.push({
                code: 'fill_position',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: p, playerId: n, position: 'DH' },
              }),
                this.state.outStream.push({
                  code: 'assign_dh',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: p, dhId: n, fielderId: e },
                });
            }
        }
        for (var u = 0; u < this.lineupLength(v); u++) {
          var t = this.playerIdAtLineupIndex(v, u);
          t !== void 0 &&
            this.state.outStream.push({
              code: 'fill_lineup_index',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: p, playerId: t, index: u },
            });
        }
        var d = p === this.config.homeTeamId ? 'home' : 'away',
          f = me.getEventLineupIndex('setting', d, r);
        f !== void 0 &&
          f !== this.currentStateOfEngine(this.lineup).lineupIndex(p) &&
          this.state.outStream.push({
            code: 'goto_lineup_index',
            id: this.nextEventIdForEvent(r),
            attributes: { teamId: p, index: f },
          });
      }),
      (c.prototype.updateTeamMembershipFromEvent = function (r) {
        if (r.participants && fe.contains(['act', 'pos', 'crn', 'sub', 'dh'], r.code))
          for (var p = 0, v = r.participants; p < v.length; p++) {
            var h = v[p],
              s = h.player.$id;
            this.state.playerTeamMembership[s] === void 0 &&
              h.team_id !== void 0 &&
              (this.state.playerTeamMembership[s] = h.team_id);
          }
      }),
      (c.prototype.generateDecisionEvents = function (r) {
        var p = [];
        if (r.state === void 0 || r.state.decisions === void 0 || r.status !== 'CPT') return p;
        var v = r.state.decisions;
        v.win !== void 0 &&
          p.push({
            code: 'pitcher_decision',
            id: this.nextEventIdForEvent(r),
            attributes: {
              teamId: this.state.safePlayerTeamMembership(v.win.$id),
              pitcherId: v.win.$id,
              decision: 'win',
            },
          }),
          v.loss !== void 0 &&
            p.push({
              code: 'pitcher_decision',
              id: this.nextEventIdForEvent(r),
              attributes: {
                teamId: this.state.safePlayerTeamMembership(v.loss.$id),
                pitcherId: v.loss.$id,
                decision: 'loss',
              },
            }),
          v.save !== void 0 &&
            p.push({
              code: 'pitcher_decision',
              id: this.nextEventIdForEvent(r),
              attributes: {
                teamId: this.state.safePlayerTeamMembership(v.save.$id),
                pitcherId: v.save.$id,
                decision: 'save',
              },
            });
        for (var h = (v.wbs || []).concat(v.lbs || []), s = 0, l = h; s < l.length; s++) {
          var u = l[s];
          p.push({
            code: 'pitcher_decision',
            id: this.nextEventIdForEvent(r),
            attributes: {
              teamId: this.state.safePlayerTeamMembership(u.$id),
              pitcherId: u.$id,
              decision: 'blown_save',
            },
          });
        }
        return p;
      }),
      (c.prototype.scoreOverridesForEvent = function (r) {
        if (
          r.setting === void 0 ||
          r.setting.score === void 0 ||
          r.setting.score.away === void 0 ||
          r.setting.score.home === void 0
        )
          return [];
        var p = [],
          v = this.currentStateOfEngine(this.baserunners).scoreForTeam(this.config.homeTeamId),
          h = this.currentStateOfEngine(this.baserunners).scoreForTeam(this.config.awayTeamId),
          s = r.setting.score.home,
          l = r.setting.score.away;
        return (
          v !== s && p.push({ teamId: this.config.homeTeamId, score: s }),
          h !== l && p.push({ teamId: this.config.awayTeamId, score: l }),
          p.length !== 0
            ? [{ code: 'override', id: this.nextEventIdForEvent(r), attributes: { scores: p } }]
            : []
        );
      }),
      (c.prototype.batterIndexOverridesForEvent = function (r) {
        var p = this.currentStateOfEngine(this.lineup).lineupIndex(this.config.homeTeamId),
          v = this.currentStateOfEngine(this.lineup).lineupIndex(this.config.awayTeamId),
          h = this.currentStateOfEngine(this.lineup).numberOfBatters(this.config.homeTeamId),
          s = this.currentStateOfEngine(this.lineup).numberOfBatters(this.config.awayTeamId),
          l = me.getEventLineupIndex('result', 'home', r),
          u = me.getEventLineupIndex('result', 'away', r);
        if (l === void 0 || u === void 0) return [];
        var y = [];
        return (
          p !== l &&
            l !== h &&
            (y.push({
              code: 'goto_lineup_index',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: this.config.homeTeamId, index: l },
            }),
            (p >= 5 || p === void 0) &&
              l === 0 &&
              y.push({
                code: 'confirm_end_of_lineup',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: this.config.homeTeamId },
              })),
          v !== u &&
            u !== s &&
            (y.push({
              code: 'goto_lineup_index',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: this.config.awayTeamId, index: u },
            }),
            (v >= 5 || v === void 0) &&
              u === 0 &&
              y.push({
                code: 'confirm_end_of_lineup',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: this.config.awayTeamId },
              })),
          y
        );
      }),
      (c.prototype.inferredPlayEditingSubsForEvent = function (r) {
        if (r.participants === void 0) return [];
        if (
          fe.contains(['SO', 'act', 'deact', 'clear', 'pos', 'reord', 'skp', 'dh', 'undh'], r.code)
        )
          return [];
        if (r.code === 'BB' && this.currentStateOfEngine(this.situation).lastEventWasWalk)
          return [];
        if (
          fe.contains(['crn', 'sub'], r.code) &&
          r.setting !== void 0 &&
          r.setting.situation !== void 0
        ) {
          for (var p = [], v = 0, h = r.setting.situation.bases || []; v < h.length; v++) {
            var s = h[v];
            s.player.$id !== this.currentStateOfEngine(this.baserunners).playerAtBase(s.base) &&
              p.push({
                code: 'place_runner',
                id: this.nextEventIdForEvent(r),
                attributes: { runnerId: s.player.$id, base: s.base },
              });
          }
          return p;
        }
        var l = this.participantMismatches(r),
          u = this.playEditingParticipantSubsExcludingBaserunners(r, l);
        fe.contains(['PROB', 'XS'], r.code) ||
          (u = u.concat(this.playEditingParticipantSubsForBaserunners(r)));
        var y = this.fillUnsetPlayers(r, l),
          o = fe.uniq(u, !1, function (a) {
            var n,
              e = void 0;
            if (a.code === 'swap_players') {
              var t = a;
              (n =
                t.attributes.secondPlayerId < t.attributes.firstPlayerId
                  ? t.attributes.secondPlayerId + t.attributes.firstPlayerId
                  : t.attributes.firstPlayerId + t.attributes.secondPlayerId),
                (e = t.attributes.teamId);
            } else {
              var d = a;
              (n = d.attributes.incomingPlayerId + d.attributes.outgoingPlayerId),
                (e = d.attributes.teamId);
            }
            return a.code + e + n;
          });
        return o
          .concat(
            fe.uniq(this.playEditingFielderPositionSubs(r), !1, function (a) {
              return a.code + a.attributes.teamId + a.attributes.playerId + a.attributes.position;
            })
          )
          .concat(y);
      }),
      (c.prototype.playEditingFielderPositionSubs = function (r) {
        var p = [];
        if (r.fielders !== void 0) {
          var v = this.currentStateOfEngine(this.situation).inFieldTeamId;
          for (var h in r.fielders)
            if (r.fielders.hasOwnProperty(h)) {
              var s = this.currentStateOfEngine(this.fielders).playerForPosition(v, h),
                l = r.fielders[h];
              if (s !== l) {
                var u = {
                  code: 'fill_position',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: v, playerId: l, position: h },
                };
                kn.debug && (u.debug = { cause: 'play_edit', type: 'fielder' }), p.push(u);
              }
            }
          return p;
        }
      }),
      (c.prototype.participantMismatches = function (r) {
        for (var p, v, h = [], s = 0, l = r.participants || []; s < l.length; s++) {
          var u = l[s];
          if (u.roles !== void 0) {
            var y = void 0,
              o = void 0,
              a = void 0,
              n = this.currentStateOfEngine(this.situation).atBatTeamId,
              e = this.currentStateOfEngine(this.situation).inFieldTeamId,
              t = '',
              d = void 0;
            if (fe.contains(u.roles, 'batter') && r.parent_play === void 0) {
              var f =
                  ((v = (p = r.setting) === null || p === void 0 ? void 0 : p.situation) === null ||
                  v === void 0
                    ? void 0
                    : v.half) === 0
                    ? 'away'
                    : 'home',
                _ = me.getEventLineupIndex('setting', f, r),
                S = this.currentStateOfEngine(this.lineup).getPlayerAtIndex(n, _);
              S !== u.player.$id && ((y = n), (o = S), (t = 'batter'), (a = _));
            } else if (fe.contains(u.roles, 'pitcher')) {
              var P = this.currentStateOfEngine(this.fielders).playerForPosition(e, 'P');
              P !== u.player.$id && ((y = e), (o = P), (t = 'pitcher'), (d = 'P'));
            } else if (fe.contains(u.roles, 'catcher')) {
              var I = this.currentStateOfEngine(this.fielders).playerForPosition(e, 'C');
              I !== u.player.$id && ((y = e), (o = I), (t = 'catcher'), (d = 'C'));
            } else if (fe.contains(u.roles, 'fielder'))
              for (var b = 0, E = u.roles; b < E.length; b++) {
                var T = E[b];
                if (T.substr(0, 8) === 'defender') {
                  var F = Number(T.substr(9, 1 / 0)) - 1;
                  d = this.deriveDefendersFromEvent(r)[F].position;
                  var R = this.currentStateOfEngine(this.fielders).playerForPosition(e, d);
                  R !== u.player.$id && ((y = e), (o = R), (t = 'fielder'));
                  break;
                }
              }
            if (y !== void 0) {
              var L = { expectedPlayerId: o, actualPlayerId: u.player.$id, teamId: y };
              d !== void 0
                ? ((L.code = 'fielder'), (L.position = d))
                : ((L.code = 'batter'), (L.batterIndex = a)),
                kn.debug && (L.debug = { cause: 'play_edit', type: t }),
                h.push(L);
            }
          }
        }
        return h;
      }),
      (c.prototype.playEditingParticipantSubsExcludingBaserunners = function (r, p) {
        for (var v = [], h = 0, s = p; h < s.length; h++) {
          var l = s[h];
          if (l.expectedPlayerId !== void 0) {
            var u = void 0;
            l.code === 'batter'
              ? (u = {
                  code: 'sub_players',
                  id: this.nextEventIdForEvent(r),
                  attributes: {
                    teamId: l.teamId,
                    incomingPlayerId: l.actualPlayerId,
                    outgoingPlayerId: l.expectedPlayerId,
                  },
                })
              : ((u = {
                  code: 'swap_players',
                  id: this.nextEventIdForEvent(r),
                  attributes: {
                    teamId: l.teamId,
                    firstPlayerId: l.actualPlayerId,
                    secondPlayerId: l.expectedPlayerId,
                  },
                }),
                kn.debug && (u.debug = l.debug)),
              v.push(u);
          }
        }
        return v;
      }),
      (c.prototype.fillUnsetPlayers = function (r, p) {
        for (var v = [], h = 0, s = p; h < s.length; h++) {
          var l = s[h];
          if (l.expectedPlayerId === void 0)
            switch (l.code) {
              case 'batter':
                v.push({
                  code: 'fill_lineup_index',
                  id: this.nextEventIdForEvent(r),
                  attributes: {
                    teamId: l.teamId,
                    playerId: l.actualPlayerId,
                    index: l.batterIndex,
                  },
                }),
                  this.currentStateOfEngine(this.lineup).lineupIndex(l.teamId) !== l.batterIndex &&
                    v.push({
                      code: 'goto_lineup_index',
                      id: this.nextEventIdForEvent(r),
                      attributes: { index: l.batterIndex, teamId: l.teamId },
                    });
                break;
              case 'fielder':
                l.position !== void 0 &&
                  v.push({
                    code: 'fill_position',
                    id: this.nextEventIdForEvent(r),
                    attributes: {
                      teamId: l.teamId,
                      playerId: l.actualPlayerId,
                      position: l.position,
                    },
                  });
                break;
            }
        }
        return v;
      }),
      (c.prototype.playEditingParticipantSubsForBaserunners = function (r) {
        for (
          var p = [],
            v = 1,
            h = { 1: [], 2: [], 3: [], 4: [] },
            s = {},
            l = 0,
            u = r.participants || [];
          l < u.length;
          l++
        ) {
          var y = u[l];
          y.properties !== void 0 &&
            y.properties.base !== void 0 &&
            (h[y.properties.base].push(y), (s[y.player.$id] = !0));
        }
        if (
          r.result !== void 0 &&
          r.result.situation !== void 0 &&
          r.setting !== void 0 &&
          r.setting.situation !== void 0
        ) {
          var o = void 0,
            a = void 0;
          if (
            (me.eventEndedInning(r)
              ? ((o = r.setting.situation.bases), (a = (r.properties || {}).bases || 0))
              : ((o = r.result.situation.bases), (a = 0)),
            o !== void 0)
          )
            for (var n = 0, e = o; n < e.length; n++) {
              var t = e[n];
              if (s[t.player.$id] === void 0) {
                var d = Math.min(4, t.base + a);
                h[d].push({ player: t.player, properties: { base: d }, roles: ['runner', 'safe'] });
              }
            }
        }
        for (var f = 0, _ = h[1].concat(h[2], h[3]); f < _.length; f++) {
          var S = _[f];
          if (!(fe.contains(S.roles, 'batter') && r.parent_play === void 0))
            for (; v < 4; ) {
              var P = this.currentStateOfEngine(this.baserunners).playerAtBase(v);
              if ((v++, P !== void 0)) {
                if (S.player.$id !== P) {
                  var I = {
                    code: 'swap_players',
                    id: this.nextEventIdForEvent(r),
                    attributes: {
                      teamId: this.currentStateOfEngine(this.situation).atBatTeamId,
                      secondPlayerId: P,
                      firstPlayerId: S.player.$id,
                    },
                  };
                  kn.debug && (I.debug = { cause: 'play_edit', type: 'baserunner on 1-3' }),
                    p.push(I);
                }
                break;
              }
            }
        }
        var b = [];
        for (var E in p)
          if (p.hasOwnProperty(E)) {
            var T = p[E],
              F = !1;
            for (var R in p)
              if (!(!p.hasOwnProperty(R) || E === R)) {
                var L = p[R];
                if (
                  fe.intersection(
                    [T.attributes.firstPlayerId, T.attributes.secondPlayerId],
                    [L.attributes.firstPlayerId, L.attributes.secondPlayerId]
                  ).length === 2
                ) {
                  F = !0;
                  break;
                }
              }
            F || b.push(T);
          }
        p = b;
        for (var x = []; v < 4; v++) {
          var N = this.currentStateOfEngine(this.baserunners).playerAtBase(v);
          N !== void 0 && x.push(N);
        }
        for (var M = 0, J = h[4]; M < J.length; M++) {
          var S = J[M];
          if (!fe.contains(S.roles, 'batter'))
            if (fe.contains(x, S.player.$id)) x = fe.without(x, S.player.$id);
            else {
              var I = {
                code: 'swap_players',
                id: this.nextEventIdForEvent(r),
                attributes: {
                  teamId: this.currentStateOfEngine(this.situation).atBatTeamId,
                  secondPlayerId: x.shift(),
                  firstPlayerId: S.player.$id,
                },
              };
              kn.debug && (I.debug = { cause: 'play_edit', type: 'baserunner on 4' }), p.push(I);
            }
        }
        return p;
      }),
      (c.prototype.stateUnchangedUnclearEvent = function (r) {
        var p, v, h, s, l, u, y, o, a, n;
        if (r.description === 'Unclear') {
          var e = r.setting,
            t = r.result,
            d =
              ((p = e == null ? void 0 : e.count) === null || p === void 0 ? void 0 : p.balls) ===
                ((v = t == null ? void 0 : t.count) === null || v === void 0 ? void 0 : v.balls) &&
              ((h = e == null ? void 0 : e.count) === null || h === void 0 ? void 0 : h.strikes) ===
                ((s = t == null ? void 0 : t.count) === null || s === void 0
                  ? void 0
                  : s.strikes) &&
              ((l = e == null ? void 0 : e.count) === null || l === void 0 ? void 0 : l.outs) ===
                ((u = t == null ? void 0 : t.count) === null || u === void 0 ? void 0 : u.outs) &&
              ((y = e == null ? void 0 : e.situation) === null || y === void 0
                ? void 0
                : y.inning) ===
                ((o = t == null ? void 0 : t.situation) === null || o === void 0
                  ? void 0
                  : o.inning) &&
              ((a = e == null ? void 0 : e.situation) === null || a === void 0
                ? void 0
                : a.half) ===
                ((n = t == null ? void 0 : t.situation) === null || n === void 0 ? void 0 : n.half),
            f =
              (e == null ? void 0 : e.lineup) !== void 0 &&
              (t == null ? void 0 : t.lineup) !== void 0 &&
              e.lineup.batters !== void 0 &&
              t.lineup.batters !== void 0;
          if (d)
            if (f) {
              var _ = e == null ? void 0 : e.lineup,
                S = t == null ? void 0 : t.lineup;
              return _.batters === S.batters && _.positions === S.positions;
            } else return !0;
        }
        return !1;
      }),
      (c.prototype.transcodeEvent = function (r) {
        var p = [];
        if (this.stateUnchangedUnclearEvent(r)) return [];
        switch (r.code) {
          case 'act':
            p = this.transcodeActEvent(r);
            break;
          case 'deact':
            p = this.transcodeDeactEvent(r);
            break;
          case 'clear':
            p = this.transcodeClearEvent(r);
            break;
          case 'pos':
            p = this.transcodePosEvent(r);
            break;
          case 'reord':
            p = this.transcodeReordEvent(r);
            break;
          case 'skp':
            p = [];
            break;
          case 'newplayer':
            p = [];
            break;
          case 'rename':
            p = [];
            break;
          case 'dh':
            p = this.transcodeDHEvent(r);
            break;
          case 'undh':
            p = this.transcodeUnDHEvent(r);
            break;
          case 'crn':
            p = this.transcodeCrnEvent(r);
            break;
          case 'sub':
            p = this.transcodeSubEvent(r);
            break;
          case 'pitch':
            p = this.transcodePitchEvent(r);
            break;
          case 'PROB':
            p = this.transcodeProbEvent(r);
            break;
          case 'XS':
            p = this.transcodeXsEvent(r);
            break;
          case 'over':
            p = this.transcodeOverEvent(r);
            break;
          case 'endhalf':
            p = this.transcodeEndHalfEvent(r);
            break;
          case 'msg':
            p = this.transcodeMsgEvent(r);
            break;
        }
        switch (Ay[r.code]) {
          case 'end_at_bat':
            p = this.transcodeToEndAtBatEvent(r);
            break;
          case 'balk':
            p = this.transcodeToBalkEvent(r);
            break;
          case 'illegal_pitch_advance':
            p = this.transcodeToIllegalPitchAdvanceEvent(r);
            break;
          case 'ball_in_play':
            p = this.transcodeToBallInPlayEvent(r);
            break;
          case 'base_running':
            p = this.transcodeToBaseRunningEvent(r);
            break;
          case 'foul_error':
            p = this.transcodeToFoulErrorEvent(r);
            break;
        }
        return p.length !== 0 && this.addWriteInDescription(r, p[0]), p;
      }),
      (c.prototype.transcodeActEvent = function (r) {
        var p,
          v,
          h = [],
          s;
        switch ((p = r.properties) === null || p === void 0 ? void 0 : p.index) {
          case -2:
            s = 'none';
            break;
          case void 0:
          case -1:
            s = 'append';
            break;
          default:
            s = 'replace';
            break;
        }
        var l = '',
          u = me.getParticipants(['subin'], r);
        if (u.length !== 1)
          return (
            console.log(
              'WARNING: Act event violated exactly one subin participant invariant. Bailing out of transcode.'
            ),
            []
          );
        for (var y = 0, o = u; y < o.length; y++) {
          var a = o[y],
            n = a.player.$id;
          switch (((l = this.state.safePlayerTeamMembership(n)), s)) {
            case 'append':
              this.currentStateOfEngine(this.lineup).indexOfPlayer(l, n) === void 0 &&
                h.push({
                  code: 'fill_lineup',
                  id: this.nextEventIdForEvent(r),
                  attributes: { playerId: n, teamId: l },
                });
              break;
            case 'replace':
              h.push({
                code: 'fill_lineup_index',
                id: this.nextEventIdForEvent(r),
                attributes: { playerId: n, teamId: l, index: r.properties.index },
              });
              break;
          }
        }
        if (!((v = r.properties) === null || v === void 0) && v.pos) {
          var n = u[0].player.$id,
            e = this.state.safePlayerTeamMembership(n);
          h.push({
            code: 'fill_position',
            id: this.nextEventIdForEvent(r),
            attributes: { teamId: e, playerId: n, position: r.properties.pos },
          });
        }
        if (
          fe.contains(['append', 'replace'], s) &&
          r.result !== void 0 &&
          (me.getEventLineupIndex('result', 'away', r) ||
            me.getEventLineupIndex('result', 'home', r))
        ) {
          var t = void 0;
          l === this.config.homeTeamId
            ? (t = me.getEventLineupIndex('result', 'home', r))
            : (t = me.getEventLineupIndex('result', 'away', r)),
            (s === 'append' || (s === 'replace' && t === r.properties.index)) &&
              h.push({
                code: 'goto_lineup_index',
                id: this.nextEventIdForEvent(r),
                attributes: { index: t, teamId: l },
              });
        }
        return h;
      }),
      (c.prototype.transcodeDeactEvent = function (r) {
        var p,
          v,
          h,
          s,
          l = [],
          u,
          y;
        if (((p = r.participants) === null || p === void 0 ? void 0 : p.length) === 1)
          (u = r.participants[0].player.$id), (y = 'simple');
        else if (((v = r.participants) === null || v === void 0 ? void 0 : v.length) === 2) {
          var o = (h = r.participants) === null || h === void 0 ? void 0 : h[1].roles;
          if (o && fe.contains(o, 'dh')) (u = r.participants[0].player.$id), (y = 'sitFielder');
          else if (o && fe.contains(o, 'dhFielder'))
            (u = r.participants[1].player.$id), (y = 'sitDH');
          else
            return (
              console.log('WARNING: Unexpected two-participant format for deact event: ' + r), l
            );
        } else
          return console.log('WARNING: Could not determine participants for deact event: ' + r), l;
        var a = this.state.playerTeamMembership[u];
        if (a === void 0) return l;
        switch (y) {
          case 'simple':
            ((s = r.properties) === null || s === void 0 ? void 0 : s.index) !== void 0 &&
              this.currentStateOfEngine(this.lineup).numberOfBatters(a) > r.properties.index &&
              l.push({
                code: 'clear_lineup_index',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: a, index: r.properties.index },
              }),
              l.push({
                code: 'clear_position_by_id',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: a, playerId: u },
              });
            break;
          case 'sitFielder':
            l.push({
              code: 'clear_position_by_id',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: a, playerId: u },
            });
            break;
          case 'sitDH':
            l.push({
              code: 'fill_lineup_index',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: a, playerId: u, index: r.properties.index },
            });
            break;
        }
        return l;
      }),
      (c.prototype.eventsForPartialLineupSquash = function (r) {
        var p, v;
        if (r.properties.index !== void 0) v = r.properties.index;
        else {
          var h = r.properties.former_lineup,
            s = (p = r.result) === null || p === void 0 ? void 0 : p.lineup;
          if (h !== void 0 && s !== void 0 && me.isNewLineup(h) && me.isNewLineup(s)) {
            if (
              ((v = fe.findIndex(fe.zip(h.batters, s.batters), function (u) {
                var y = u[0],
                  o = u[1];
                return y.curr_id !== o.curr_id || y.hide !== o.hide;
              })),
              v === -1)
            ) {
              console.log(
                'WARNING: Got a clear SQH event that did not have any indication of what to squash. Former lineup and result batters were identicle.'
              );
              return;
            }
          } else return;
        }
        var l = this.teamIdFromEventProperties(r);
        return l === void 0
          ? []
          : this.currentStateOfEngine(this.lineup).numberOfBatters(l) > v
            ? [
                {
                  code: 'squash_lineup_index',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: l, index: v },
                },
              ]
            : [];
      }),
      (c.prototype.transcodeClearEvent = function (r) {
        var p = [],
          v = this.teamIdFromEventProperties(r);
        return (
          v === void 0 ||
            (r.short_description === 'SQH'
              ? p.push.apply(p, this.eventsForPartialLineupSquash(r))
              : p.push(
                  {
                    code: 'clear_entire_lineup',
                    id: this.nextEventIdForEvent(r),
                    attributes: { teamId: v },
                  },
                  {
                    code: 'clear_all_positions',
                    id: this.nextEventIdForEvent(r),
                    attributes: { teamId: v },
                  }
                ),
            r.setting !== void 0 &&
              r.setting.situation !== void 0 &&
              r.setting.situation.away_lineupindex !== void 0 &&
              r.setting.situation.home_lineupindex !== void 0 &&
              r.result !== void 0 &&
              r.result.situation !== void 0 &&
              r.result.situation.away_lineupindex !== void 0 &&
              r.result.situation.home_lineupindex !== void 0 &&
              (r.setting.situation.away_lineupindex !== r.result.situation.away_lineupindex &&
                ((v =
                  me.teamForLineupIndexKey(r, 'away') === 'away'
                    ? this.config.awayTeamId
                    : this.config.homeTeamId),
                p.push({
                  code: 'goto_lineup_index',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: v, index: r.result.situation.away_lineupindex },
                })),
              r.setting.situation.home_lineupindex !== r.result.situation.home_lineupindex &&
                ((v =
                  me.teamForLineupIndexKey(r, 'home') === 'home'
                    ? this.config.homeTeamId
                    : this.config.awayTeamId),
                p.push({
                  code: 'goto_lineup_index',
                  id: this.nextEventIdForEvent(r),
                  attributes: { teamId: v, index: r.result.situation.home_lineupindex },
                })))),
          p
        );
      }),
      (c.prototype.transcodePosEvent = function (r) {
        var p = [];
        if (r.properties.strategy === 'swap dp/flex') {
          var v = fe.first(me.getParticipants(['flex'], r)),
            h = fe.first(me.getParticipants(['dp'], r));
          v !== void 0 &&
            h !== void 0 &&
            p.push({
              code: 'swap_players',
              id: this.nextEventIdForEvent(r),
              attributes: {
                teamId: this.state.safePlayerTeamMembership(v.player.$id),
                secondPlayerId: v.player.$id,
                firstPlayerId: h.player.$id,
              },
            });
        } else
          for (var s = 0, l = r.participants || []; s < l.length; s++) {
            var u = l[s];
            u.roles &&
              fe.contains(u.roles, 'moving') &&
              p.push({
                code: 'fill_position',
                id: this.nextEventIdForEvent(r),
                attributes: {
                  teamId: this.state.safePlayerTeamMembership(u.player.$id),
                  playerId: u.player.$id,
                  position: r.properties.newpos,
                },
              }),
              u.roles &&
                fe.contains(u.roles, 'displaced') &&
                (r.properties.oldpos !== void 0
                  ? p.push({
                      code: 'fill_position',
                      id: this.nextEventIdForEvent(r),
                      attributes: {
                        teamId: this.state.safePlayerTeamMembership(u.player.$id),
                        playerId: u.player.$id,
                        position: r.properties.oldpos,
                      },
                    })
                  : p.push({
                      code: 'clear_position_by_id',
                      id: this.nextEventIdForEvent(r),
                      attributes: {
                        teamId: this.state.safePlayerTeamMembership(u.player.$id),
                        playerId: u.player.$id,
                      },
                    }));
          }
        return p;
      }),
      (c.prototype.lineupIndexOfPlayer = function (r, p) {
        for (var v = 0; v < this.lineupLength(r); v++)
          if (this.playerIdAtLineupIndex(r, v) === p) return v;
      }),
      (c.prototype.lineupLength = function (r) {
        return me.isNewLineup(r) ? r.batters.length : r.entries.length;
      }),
      (c.prototype.playerIdAtLineupIndex = function (r, p) {
        return me.isNewLineup(r) ? r.batters[p].curr_id : r.entries[p].player.$id;
      }),
      (c.prototype.isValidTeamId = function (r) {
        return fe.contains([this.config.awayTeamId, this.config.homeTeamId], r);
      }),
      (c.prototype.teamIdFromEventProperties = function (r) {
        var p = r.properties;
        if ('team_id' in p && p.team_id && this.isValidTeamId(p.team_id)) return p.team_id;
        if ('team' in p && p.team !== void 0 && this.isValidTeamId(p.team.$id)) return p.team.$id;
        if (!me.isNewLineup(p.former_lineup) && this.isValidTeamId(p.former_lineup.team_id))
          return p.former_lineup.team_id;
      }),
      (c.prototype.transcodeReordEvent = function (r) {
        var p,
          v = [];
        if (r.result.lineup === void 0) return v;
        var h = this.teamIdFromEventProperties(r);
        if (h === void 0)
          return console.log('WARNING: Could not find valid team ID for reord event'), v;
        if (r.participants && r.participants.length > 0) {
          var s = r.participants[0].player.$id,
            l = this.lineupIndexOfPlayer(r.properties.former_lineup, s),
            u = this.lineupIndexOfPlayer(r.result.lineup, s);
          if (l !== void 0 && u !== void 0) {
            var y = this.currentStateOfEngine(this.lineup).numberOfBatters(h);
            (y - 1 > l || y - 1 > u) &&
              v.push({
                code: 'reorder_lineup',
                id: this.nextEventIdForEvent(r),
                attributes: { teamId: h, fromIndex: l, toIndex: u },
              });
          } else console.log('WARNING: Could not derive swap from reord event: ', r);
        } else {
          for (
            var o = r.properties.former_lineup, a = r.result.lineup, l = void 0, u = void 0, n = 0;
            n < this.lineupLength(o) - 1;
            n++
          )
            if (this.playerIdAtLineupIndex(o, n) !== this.playerIdAtLineupIndex(a, n)) {
              u = n;
              break;
            }
          if (u === void 0) return v;
          for (var n = u + 1; n < this.lineupLength(o); n++)
            this.playerIdAtLineupIndex(o, n) !== this.playerIdAtLineupIndex(a, n) && (l = n);
          l === void 0 && (l = this.lineupLength(o) - 1),
            this.playerIdAtLineupIndex(o, l) !== this.playerIdAtLineupIndex(a, u) &&
              ((p = [l, u]), (u = p[0]), (l = p[1])),
            v.push({
              code: 'reorder_lineup',
              id: this.nextEventIdForEvent(r),
              attributes: { teamId: h, fromIndex: l, toIndex: u },
            });
        }
        return v;
      }),
      (c.prototype.transcodeDHEvent = function (r) {
        var p = [r.participants[0], r.participants[1]],
          v = p[0],
          h = p[1];
        return [
          {
            code: 'assign_dh',
            id: this.nextEventIdForEvent(r),
            attributes: {
              teamId: this.state.safePlayerTeamMembership(v.player.$id),
              dhId: h.player.$id,
              fielderId: v.player.$id,
            },
          },
        ];
      }),
      (c.prototype.transcodeUnDHEvent = function (r) {
        var p = r.participants[1];
        return [
          {
            code: 'remove_dh',
            id: this.nextEventIdForEvent(r),
            attributes: {
              teamId: this.state.safePlayerTeamMembership(p.player.$id),
              dhId: p.player.$id,
            },
          },
        ];
      }),
      (c.prototype.transcodeCrnEvent = function (r) {
        var p = [r.participants[0], r.participants[1]],
          v = p[0],
          h = p[1],
          s = {
            teamId: this.state.safePlayerTeamMembership(v.player.$id),
            incomingPlayerId: v.player.$id,
            outgoingPlayerId: h.player.$id,
          };
        return (
          r.short_description === 'Special' &&
            (s.flavor = Zt.ReplaceRunnerFlavor.SpecialPinchRunner),
          [{ code: 'replace_runner', id: this.nextEventIdForEvent(r), attributes: s }]
        );
      }),
      (c.prototype.transcodeSubEvent = function (r) {
        var p = fe.first(me.getParticipants(['subin'], r)),
          v = fe.first(me.getParticipants(['subout'], r));
        return [
          {
            code: 'sub_players',
            id: this.nextEventIdForEvent(r),
            attributes: {
              teamId: this.state.safePlayerTeamMembership(p.player.$id),
              incomingPlayerId: p.player.$id,
              outgoingPlayerId: v.player.$id,
              applyToBaserunners: r.short_description === 'Pinch',
            },
          },
        ];
      }),
      (c.prototype.transcodePitchEvent = function (r) {
        var p = void 0;
        if (r.properties.pitch === 'ball' && r.properties.illegal === !0)
          p = Zt.PitchResult.IllegalPitch;
        else if (r.properties.pitch === 'ball')
          p = r.properties.intentional ? Zt.PitchResult.IntentionalBall : Zt.PitchResult.Ball;
        else if (r.properties.pitch === 'strike')
          switch (r.properties.swing) {
            case 'hit':
              p = Zt.PitchResult.BallInPlay;
              break;
            case 'take':
              p = Zt.PitchResult.StrikeLooking;
              break;
            case 'miss':
              p = Zt.PitchResult.StrikeSwinging;
              break;
            case 'foul':
              p = Zt.PitchResult.Foul;
              break;
            default:
              return console.log('Unrecognized swing result '.concat(r.properties.swing)), [];
          }
        var v = { code: 'pitch', id: this.nextEventIdForEvent(r), attributes: { result: p } };
        if (r.properties.style !== void 0) {
          var h = Ry[r.properties.style];
          h !== void 0 && (v.attributes.style = h);
        }
        return (
          r.properties.speed !== void 0 && (v.attributes.speed = r.properties.speed),
          p !== 'ball_in_play' &&
            r.setting !== void 0 &&
            r.setting.count !== void 0 &&
            r.result !== void 0 &&
            r.result.count !== void 0 &&
            fe.isEqual(r.setting.count, r.result.count) &&
            (v.attributes.advancesCount = !1),
          [v]
        );
      }),
      (c.prototype.transcodeProbEvent = function (r) {
        return [
          {
            code: 'place_runner',
            id: this.nextEventIdForEvent(r),
            attributes: { base: r.properties.bases, runnerId: r.participants[0].player.$id },
          },
        ];
      }),
      (c.prototype.transcodeXsEvent = function (r) {
        var p = {
          code: 'place_batter',
          id: this.nextEventIdForEvent(r),
          attributes: { base: r.properties.bases },
        };
        return [p];
      }),
      (c.prototype.transcodeOverEvent = function (r) {
        var p,
          v,
          h,
          s,
          l = { code: 'override', id: this.nextEventIdForEvent(r), attributes: {} };
        if (
          (['balls', 'outs', 'strikes'].forEach(function (y) {
            r.setting.count[y] !== r.result.count[y] && (l.attributes[y] = r.result.count[y]);
          }),
          !((p = r.setting) === null || p === void 0) &&
            p.situation &&
            !((v = r.result) === null || v === void 0) &&
            v.situation &&
            (r.setting.situation.inning !== r.result.situation.inning &&
              (l.attributes.inning = r.result.situation.inning),
            r.setting.situation.half !== r.result.situation.half &&
              (l.attributes.half = r.result.situation.half === 0 ? 'top' : 'bottom')),
          !((h = r.setting) === null || h === void 0) &&
            h.score &&
            !((s = r.result) === null || s === void 0) &&
            s.score)
        ) {
          var u = [];
          r.setting.score.home !== r.result.score.home &&
            u.push({ teamId: this.config.homeTeamId, score: r.result.score.home }),
            r.setting.score.away !== r.result.score.away &&
              u.push({ teamId: this.config.awayTeamId, score: r.result.score.away }),
            u.length !== 0 && (l.attributes.scores = u);
        }
        return [l];
      }),
      (c.prototype.transcodeEndHalfEvent = function (r) {
        return [{ code: 'end_half', id: this.nextEventIdForEvent(r) }];
      }),
      (c.prototype.transcodeToEndAtBatEvent = function (r) {
        var p;
        switch (r.code) {
          case 'SO':
            p = 'strikeout';
            break;
          case 'BB':
            p = 'walk';
            break;
          case 'HB':
            p = 'hit_by_pitch';
            break;
          case 'CI':
            p = 'catcher_interference';
            break;
          default:
            return console.log('Unrecognized end at bat reason '.concat(r.code)), [];
        }
        var v = { reason: p };
        return (
          p === 'walk' && r.properties.intentional && (v.intentional = !0),
          [{ code: 'end_at_bat', id: this.nextEventIdForEvent(r), attributes: v }]
        );
      }),
      (c.prototype.transcodeToBalkEvent = function (r) {
        return [{ code: 'balk', id: this.nextEventIdForEvent(r) }];
      }),
      (c.prototype.transcodeToIllegalPitchAdvanceEvent = function (r) {
        return [
          {
            code: 'illegal_pitch_advance',
            id: this.nextEventIdForEvent(r),
            attributes: { advancesCount: !0 },
          },
        ];
      }),
      (c.prototype.translateLocation = function (r) {
        var p = r.split('x'),
          v = p[0],
          h = p[1];
        return { x: Number(v), y: Number(h) };
      }),
      (c.prototype.deriveDefendersFromEvent = function (r) {
        var p = [];
        if (r.properties.sequential_defenders !== void 0)
          for (var v in r.properties.sequential_defenders)
            r.properties.sequential_defenders.hasOwnProperty(v) &&
              p.push({
                position: r.properties.sequential_defenders[v],
                location: this.translateLocation(r.properties.sequential_locations[v]),
                error: !1,
              });
        else
          r.properties.defender !== void 0 &&
            p.push({
              position: r.properties.defender,
              location: this.translateLocation(r.properties.location),
              error: !1,
            });
        if (r.properties.error_on !== void 0)
          for (var h = 0, s = p; h < s.length; h++) {
            var l = s[h];
            if (l.position === r.properties.error_on) {
              l.error = !0;
              break;
            }
          }
        return p;
      }),
      (c.prototype.playAttributesForBallInPlay = function (r) {
        var p, v;
        switch (r.properties.hit_type) {
          case 'fly':
            p = 'fly_ball';
            break;
          case 'line':
            p = 'line_drive';
            break;
          case 'ground':
            p = 'ground_ball';
            break;
          case 'hground':
            p = 'hard_ground_ball';
            break;
          case 'pop':
            p = 'pop_fly';
            break;
          case 'bunt':
            p = 'bunt';
            break;
        }
        switch (r.code) {
          case '1B':
            v = 'single';
            break;
          case '2B':
            v = 'double';
            break;
          case '3B':
            v = 'triple';
            break;
          case 'HR':
            v = 'home_run';
            break;
          case 'E':
            v = 'error';
            break;
          case 'BT':
            v = 'single';
            break;
          case 'FC':
            v = 'fielders_choice';
            break;
          case 'OI':
            v = 'offensive_interference';
            break;
          case 'K':
            v = 'dropped_third_strike';
            break;
          case 'OG':
            break;
          case 'OL':
            v = 'batter_out';
            break;
          case 'OF':
            v = 'batter_out';
            break;
          case 'IF':
            v = 'infield_fly';
            break;
          case 'DP':
            break;
          case 'TP':
            break;
          case 'KO':
            v = 'dropped_third_strike_batter_out';
            break;
          case 'SHB':
            v = 'sacrifice_bunt';
            break;
          case 'SHB+E':
            v = 'sacrifice_bunt_error';
            break;
          case 'SHF':
            v = 'sacrifice_fly';
            break;
          case 'SHF+E':
            v = 'sacrifice_fly_error';
            break;
          case 'OO':
            v = 'other_out';
            break;
          case 'FT':
            (v = 'foul_tip_out'), (p = 'foul_tip');
            break;
        }
        if (
          (r.code === 'OG' &&
            (v =
              this.currentStateOfEngine(this.situation).outs < 2
                ? 'batter_out_advance_runners'
                : 'batter_out'),
          fe.contains(['DP', 'TP'], r.code))
        )
          if (r.participants !== void 0) {
            v = 'fielders_choice';
            var h = fe.first(me.getParticipants(['batter', 'out'], r)),
              s = fe.first(me.getParticipants(['scorer'], r));
            h !== void 0 &&
            s === void 0 &&
            (r.code === 'TP' ||
              this.currentStateOfEngine(this.situation).outs !== 0 ||
              !fe.contains(['ground', 'hground'], r.properties.hit_type))
              ? (v = 'batter_out')
              : h !== void 0 && (v = 'batter_out_advance_runners');
          } else v = 'batter_out';
        return [p, v];
      }),
      (c.prototype.primaryEventForBallInPlay = function (r, p, v, h) {
        var s = { playType: p, playResult: v, defenders: h };
        switch ((r.properties.foul === 1 && (s.playFlavor = 'in_foul_territory'), v)) {
          case 'home_run':
            var l = s;
            switch (r.properties.hr) {
              case 'RF':
                l.hrLocation = 'right_field';
                break;
              case 'CF':
                l.hrLocation = 'center_field';
                break;
              case 'LF':
                l.hrLocation = 'left_field';
                break;
              default:
                l.hrLocation = 'in_the_park';
                break;
            }
            return (
              l.hrLocation !== 'in_the_park' && (s.defenders = []),
              { code: 'ball_in_play', id: this.nextEventIdForEvent(r), attributes: s }
            );
          case 'dropped_third_strike_batter_out':
          case 'dropped_third_strike':
            var u = void 0;
            r.properties.cause !== void 0
              ? (u = r.properties.cause === 'wp' ? 'wild_pitch' : 'passed_ball')
              : (u = 'unspecified');
            var y = { playResult: v, defenders: h, cause: u };
            return { code: 'ball_in_play', id: this.nextEventIdForEvent(r), attributes: y };
          default:
            return { code: 'ball_in_play', id: this.nextEventIdForEvent(r), attributes: s };
        }
      }),
      (c.prototype.sortUnexpectedBaserunnerMovementEvents = function (r, p) {
        for (var v = [], h = p.length, s = fe.invert(r), l = 0; v.length !== h && l < 10; ) {
          l++;
          for (var u in p)
            if (p.hasOwnProperty(u)) {
              var y = p[u],
                o = y.attributes.base,
                a = y.attributes.runnerId;
              if (o === 4 || y.attributes.playType === 'out_on_last_play') {
                v.push(y), p.splice(Number(u), 1), (r[s[a]] = void 0), (s[a] = 4);
                break;
              } else if (r[o] === void 0) {
                v.push(y), p.splice(Number(u), 1), (r[s[a]] = void 0), (s[a] = o);
                break;
              }
            }
        }
        return (
          v.length !== h &&
            (console.log(
              'WARNING: Something went horribly wrong in sortUnexpectedBaserunnerMovementEvent'
            ),
            console.log(p)),
          v
        );
      }),
      (c.prototype.expectedBaseData = function (r, p, v) {
        if (
          r.setting === void 0 ||
          r.setting.situation === void 0 ||
          r.setting.situation.bases === void 0
        )
          return [];
        var h = [];
        if (p.code === 'ball_in_play') {
          var s = p,
            l = eo.ballInPlayResultConfigs[s.attributes.playResult],
            u = fe.first(me.getParticipants(['batter'], r));
          l.batterOut || h.push({ playerId: u.player.$id, base: l.bases });
        }
        for (
          var y = eo.ballInPlayResultConfigs[v].bases, o = 0, a = r.setting.situation.bases;
          o < a.length;
          o++
        ) {
          var n = a[o],
            e = Math.min(4, n.base + y);
          e !== 4 && h.push({ playerId: n.player.$id, base: e });
        }
        return h;
      }),
      (c.prototype.expectedBaseStateByPlayer = function (r, p, v) {
        for (var h = this.expectedBaseData(r, p, v), s = {}, l = 0, u = h; l < u.length; l++) {
          var y = u[l];
          s[y.playerId] = y.base;
        }
        return s;
      }),
      (c.prototype.expectedBaseStateByBase = function (r, p, v) {
        for (var h = this.expectedBaseData(r, p, v), s = {}, l = 0, u = h; l < u.length; l++) {
          var y = u[l];
          s[y.base] = y.playerId;
        }
        return s;
      }),
      (c.prototype.unexpectedBaserunnerMovementForBallInPlay = function (r, p, v) {
        var h = [];
        if (
          r.setting !== void 0 &&
          r.setting.situation !== void 0 &&
          r.setting.situation.bases !== void 0 &&
          r.result !== void 0 &&
          r.result.situation !== void 0 &&
          r.result.situation.bases !== void 0
        ) {
          var s = this.expectedBaseStateByPlayer(r, p, v) || {},
            l = void 0;
          if (me.eventEndedInning(r)) {
            l = [];
            var u = fe.find(r.setting.situation.bases, function (L) {
              return L.base === 3;
            });
            if (u !== void 0) {
              var y = fe.first(me.getParticipants(['scorer'], r));
              y !== void 0 && y.player.$id === u.player.$id
                ? (l = [])
                : (l = [{ base: u.base, player: u.player }]);
            }
          } else l = r.result.situation.bases;
          if (me.eventEndedInning(r)) {
            for (var o in s)
              if (s.hasOwnProperty(o)) {
                var a = !0;
                if (r.participants !== void 0)
                  for (var n = 0, e = r.participants; n < e.length; n++) {
                    var t = e[n];
                    if (t.player.$id === o) {
                      a = !1;
                      break;
                    }
                  }
                a && s[o] === void 0 && l.push({ base: 3, player: { $id: o, $ref: 'player' } });
              }
          }
          for (
            var d = fe.first(me.getParticipants(['batter'], r)),
              f = d === void 0 ? void 0 : d.player.$id,
              _ = fe.map(me.getParticipants(['out'], r), function (L) {
                return L.player.$id;
              }),
              S = 0,
              P = l;
            S < P.length;
            S++
          ) {
            var I = P[S],
              b = [I.base, s[I.player.$id]],
              E = b[0],
              T = b[1];
            if (I.player.$id !== f && E !== T) {
              var F = void 0,
                R = void 0;
              if (fe.contains(_, I.player.$id)) continue;
              me.eventEndedInning(r) && T === void 0 && E < 4
                ? ((F = 'did_not_score'), (R = 4))
                : ((F = E > T ? 'advanced_on_last_play' : 'remained_on_last_play'), (R = E)),
                h.push({
                  code: 'base_running',
                  id: this.nextEventIdForEvent(r),
                  attributes: { playType: F, base: R, runnerId: I.player.$id, defenders: [] },
                });
            }
          }
        }
        return h;
      }),
      (c.prototype.poofRuleEventsForBallInPlay = function (r) {
        var p = [];
        if (r.participants !== void 0)
          for (var v = 0, h = r.participants; v < h.length; v++) {
            var s = h[v];
            if (s.roles !== void 0 && fe.contains(s.roles, 'poof')) {
              p.push({
                code: 'base_running',
                id: this.nextEventIdForEvent(r),
                attributes: {
                  playType: 'did_not_score',
                  base: 4,
                  runnerId: s.player.$id,
                  defenders: [],
                },
              });
              break;
            }
          }
        return p;
      }),
      (c.prototype.baserunnerOutsForBallInPlay = function (r, p) {
        var v,
          h = [],
          s = eo.ballInPlayResultConfigs[p];
        if (r.participants !== void 0)
          for (var l = 0, u = r.participants; l < u.length; l++) {
            var y = u[l];
            y.roles &&
              fe.contains(y.roles, 'out') &&
              (!s.batterOut || !fe.contains(y.roles, 'batter')) &&
              h.push({
                code: 'base_running',
                id: this.nextEventIdForEvent(r),
                attributes: {
                  playType: 'out_on_last_play',
                  base: ((v = y.properties) === null || v === void 0 ? void 0 : v.base) || 0,
                  runnerId: y.player.$id,
                  defenders: [],
                },
              });
          }
        return h;
      }),
      (c.prototype.transcodeToBallInPlayEvent = function (r) {
        var p = [],
          v = this.playAttributesForBallInPlay(r),
          h = v[0],
          s = v[1],
          l = this.deriveDefendersFromEvent(r),
          u = this.primaryEventForBallInPlay(r, h, s, l);
        p.push(u);
        var y = this.unexpectedBaserunnerMovementForBallInPlay(r, u, s);
        y.push.apply(y, this.poofRuleEventsForBallInPlay(r)),
          y.push.apply(y, this.baserunnerOutsForBallInPlay(r, s));
        var o = this.expectedBaseStateByBase(r, u, s) || {};
        return p.push.apply(p, this.sortUnexpectedBaserunnerMovementEvents(o, y)), p;
      }),
      (c.prototype.transcodeToBaseRunningEvent = function (r) {
        var p,
          v,
          h,
          s = void 0,
          l = void 0;
        switch (r.code) {
          case 'rTU':
            (s = 'advanced_on_last_play'), (l = 'tagged_up');
            break;
          case 'rRF':
            break;
          case 'rCT':
            (s = 'out_on_last_play'), (l = 'caught_tagging');
            break;
          case 'rOA':
            break;
          case 'rRS':
            break;
          case 'rBT':
            (s = 'out_on_last_play'), (l = 'caught_backtracking');
            break;
          case 'rOI':
            s = 'offensive_interference';
            break;
          case 'rDT':
            (s = 'out_on_last_play'), (l = 'did_not_tag');
            break;
          case 'rSB':
            s = 'stole_base';
            break;
          case 'rDI':
            s = 'defensive_indifference';
            break;
          case 'rPB':
            s = 'passed_ball';
            break;
          case 'rWP':
            s = 'wild_pitch';
            break;
          case 'rAP':
            s = 'attempted_pickoff';
            break;
          case 'rFC':
            s = 'fielders_choice_attempted_pickoff';
            break;
          case 'rAE':
            s = 'advanced_on_error';
            break;
          case 'rOOA':
            s = 'out_on_appeal';
            break;
          case 'rCS':
            s = 'caught_stealing';
            break;
          case 'rOO':
            s = 'other_out';
            break;
          case 'rPO':
            s = 'picked_off';
            break;
          case 'rDO':
            (s = 'out_on_last_play'), (l = 'doubled_off');
            break;
          case 'rCR':
            (s = 'out_on_last_play'), (l = 'caught_running');
            break;
          case 'rTH':
            (s = 'advanced_on_last_play'), (l = 'on_the_throw');
            break;
          case 'rET':
            s = 'advanced_on_error';
            break;
        }
        for (
          var u = 0, y = (p = r.participants) !== null && p !== void 0 ? p : [];
          u < y.length;
          u++
        ) {
          var o = y[u];
          if (!(o.roles && !fe.contains(o.roles, 'runner'))) {
            var a = fe.contains((v = o.roles) !== null && v !== void 0 ? v : [], 'out');
            if (r.code === 'rOA') s = a ? 'other_out' : 'other_advance';
            else if (fe.contains(['rRF', 'rRS'], r.code)) {
              s = r.code === 'rRF' ? 'advanced_on_last_play' : 'remained_on_last_play';
              var n = void 0;
              (0, Oy.isDBRef)(r.parent_play)
                ? (n = this.inputEventById(r.parent_play.$id))
                : (n = r.parent_play),
                n !== void 0 &&
                  (n.code === 'pitch'
                    ? (s = 'on_same_pitch')
                    : n.code === 'rAE' && (s = 'on_same_error'));
            }
            var e = {
              playType: s,
              base: (h = o.properties) === null || h === void 0 ? void 0 : h.base,
              runnerId: o.player.$id,
              defenders: this.deriveDefendersFromEvent(r),
            };
            return (
              l !== void 0 && (e.playFlavor = l),
              [{ code: 'base_running', id: this.nextEventIdForEvent(r), attributes: e }]
            );
          }
        }
      }),
      (c.prototype.transcodeToFoulErrorEvent = function (r) {
        return [
          {
            code: 'foul_error',
            id: this.nextEventIdForEvent(r),
            attributes: { defenders: this.deriveDefendersFromEvent(r), advancesCount: !0 },
          },
        ];
      }),
      (c.prototype.transcodeMsgEvent = function (r) {
        var p = void 0,
          v = /\"(.*)\" \(via (.*)\)/,
          h = r.description.match(v) || [];
        return (
          h.length === 3 ? (p = h[1]) : (p = r.description),
          [{ code: 'message', id: this.nextEventIdForEvent(r), attributes: { content: p } }]
        );
      }),
      c
    );
  })(Lc.SnapshottedTranscoder);
  Nt.Transcoder = wy;
  var fr = {},
    to = { exports: {} },
    Gc;
  function de() {
    return (
      Gc ||
        ((Gc = 1),
        (function (i, c) {
          (function (r, p) {
            i.exports = p();
          })(Kh, function () {
            var r = Array.prototype.slice;
            function p(g, m) {
              m && (g.prototype = Object.create(m.prototype)), (g.prototype.constructor = g);
            }
            function v(g) {
              return u(g) ? g : G(g);
            }
            p(h, v);
            function h(g) {
              return y(g) ? g : X(g);
            }
            p(s, v);
            function s(g) {
              return o(g) ? g : ie(g);
            }
            p(l, v);
            function l(g) {
              return u(g) && !a(g) ? g : ve(g);
            }
            function u(g) {
              return !!(g && g[e]);
            }
            function y(g) {
              return !!(g && g[t]);
            }
            function o(g) {
              return !!(g && g[d]);
            }
            function a(g) {
              return y(g) || o(g);
            }
            function n(g) {
              return !!(g && g[f]);
            }
            (v.isIterable = u),
              (v.isKeyed = y),
              (v.isIndexed = o),
              (v.isAssociative = a),
              (v.isOrdered = n),
              (v.Keyed = h),
              (v.Indexed = s),
              (v.Set = l);
            var e = '@@__IMMUTABLE_ITERABLE__@@',
              t = '@@__IMMUTABLE_KEYED__@@',
              d = '@@__IMMUTABLE_INDEXED__@@',
              f = '@@__IMMUTABLE_ORDERED__@@',
              _ = 'delete',
              S = 5,
              P = 1 << S,
              I = P - 1,
              b = {},
              E = { value: !1 },
              T = { value: !1 };
            function F(g) {
              return (g.value = !1), g;
            }
            function R(g) {
              g && (g.value = !0);
            }
            function L() {}
            function x(g, m) {
              m = m || 0;
              for (var B = Math.max(0, g.length - m), O = new Array(B), A = 0; A < B; A++)
                O[A] = g[A + m];
              return O;
            }
            function N(g) {
              return g.size === void 0 && (g.size = g.__iterate(J)), g.size;
            }
            function M(g, m) {
              if (typeof m != 'number') {
                var B = m >>> 0;
                if ('' + B !== m || B === 4294967295) return NaN;
                m = B;
              }
              return m < 0 ? N(g) + m : m;
            }
            function J() {
              return !0;
            }
            function D(g, m, B) {
              return (
                (g === 0 || (B !== void 0 && g <= -B)) && (m === void 0 || (B !== void 0 && m >= B))
              );
            }
            function $(g, m) {
              return q(g, m, 0);
            }
            function z(g, m) {
              return q(g, m, m);
            }
            function q(g, m, B) {
              return g === void 0
                ? B
                : g < 0
                  ? Math.max(0, m + g)
                  : m === void 0
                    ? g
                    : Math.min(m, g);
            }
            var V = 0,
              U = 1,
              j = 2,
              re = typeof Symbol == 'function' && Symbol.iterator,
              se = '@@iterator',
              ce = re || se;
            function ae(g) {
              this.next = g;
            }
            (ae.prototype.toString = function () {
              return '[Iterator]';
            }),
              (ae.KEYS = V),
              (ae.VALUES = U),
              (ae.ENTRIES = j),
              (ae.prototype.inspect = ae.prototype.toSource =
                function () {
                  return this.toString();
                }),
              (ae.prototype[ce] = function () {
                return this;
              });
            function ue(g, m, B, O) {
              var A = g === 0 ? m : g === 1 ? B : [m, B];
              return O ? (O.value = A) : (O = { value: A, done: !1 }), O;
            }
            function pe() {
              return { value: void 0, done: !0 };
            }
            function De(g) {
              return !!ee(g);
            }
            function W(g) {
              return g && typeof g.next == 'function';
            }
            function te(g) {
              var m = ee(g);
              return m && m.call(g);
            }
            function ee(g) {
              var m = g && ((re && g[re]) || g[se]);
              if (typeof m == 'function') return m;
            }
            function C(g) {
              return g && typeof g.length == 'number';
            }
            p(G, v);
            function G(g) {
              return g == null ? Ct() : u(g) ? g.toSeq() : $i(g);
            }
            (G.of = function () {
              return G(arguments);
            }),
              (G.prototype.toSeq = function () {
                return this;
              }),
              (G.prototype.toString = function () {
                return this.__toString('Seq {', '}');
              }),
              (G.prototype.cacheResult = function () {
                return (
                  !this._cache &&
                    this.__iterateUncached &&
                    ((this._cache = this.entrySeq().toArray()), (this.size = this._cache.length)),
                  this
                );
              }),
              (G.prototype.__iterate = function (g, m) {
                return zi(this, g, m, !0);
              }),
              (G.prototype.__iterator = function (g, m) {
                return Vi(this, g, m, !0);
              }),
              p(X, G);
            function X(g) {
              return g == null
                ? Ct().toKeyedSeq()
                : u(g)
                  ? y(g)
                    ? g.toSeq()
                    : g.fromEntrySeq()
                  : cn(g);
            }
            (X.prototype.toKeyedSeq = function () {
              return this;
            }),
              p(ie, G);
            function ie(g) {
              return g == null ? Ct() : u(g) ? (y(g) ? g.entrySeq() : g.toIndexedSeq()) : dn(g);
            }
            (ie.of = function () {
              return ie(arguments);
            }),
              (ie.prototype.toIndexedSeq = function () {
                return this;
              }),
              (ie.prototype.toString = function () {
                return this.__toString('Seq [', ']');
              }),
              (ie.prototype.__iterate = function (g, m) {
                return zi(this, g, m, !1);
              }),
              (ie.prototype.__iterator = function (g, m) {
                return Vi(this, g, m, !1);
              }),
              p(ve, G);
            function ve(g) {
              return (g == null ? Ct() : u(g) ? (y(g) ? g.entrySeq() : g) : dn(g)).toSetSeq();
            }
            (ve.of = function () {
              return ve(arguments);
            }),
              (ve.prototype.toSetSeq = function () {
                return this;
              }),
              (G.isSeq = Rt),
              (G.Keyed = X),
              (G.Set = ve),
              (G.Indexed = ie);
            var le = '@@__IMMUTABLE_SEQ__@@';
            (G.prototype[le] = !0), p(Be, ie);
            function Be(g) {
              (this._array = g), (this.size = g.length);
            }
            (Be.prototype.get = function (g, m) {
              return this.has(g) ? this._array[M(this, g)] : m;
            }),
              (Be.prototype.__iterate = function (g, m) {
                for (var B = this._array, O = B.length - 1, A = 0; A <= O; A++)
                  if (g(B[m ? O - A : A], A, this) === !1) return A + 1;
                return A;
              }),
              (Be.prototype.__iterator = function (g, m) {
                var B = this._array,
                  O = B.length - 1,
                  A = 0;
                return new ae(function () {
                  return A > O ? pe() : ue(g, A, B[m ? O - A++ : A++]);
                });
              }),
              p(Oe, X);
            function Oe(g) {
              var m = Object.keys(g);
              (this._object = g), (this._keys = m), (this.size = m.length);
            }
            (Oe.prototype.get = function (g, m) {
              return m !== void 0 && !this.has(g) ? m : this._object[g];
            }),
              (Oe.prototype.has = function (g) {
                return this._object.hasOwnProperty(g);
              }),
              (Oe.prototype.__iterate = function (g, m) {
                for (var B = this._object, O = this._keys, A = O.length - 1, k = 0; k <= A; k++) {
                  var w = O[m ? A - k : k];
                  if (g(B[w], w, this) === !1) return k + 1;
                }
                return k;
              }),
              (Oe.prototype.__iterator = function (g, m) {
                var B = this._object,
                  O = this._keys,
                  A = O.length - 1,
                  k = 0;
                return new ae(function () {
                  var w = O[m ? A - k : k];
                  return k++ > A ? pe() : ue(g, w, B[w]);
                });
              }),
              (Oe.prototype[f] = !0),
              p(Re, ie);
            function Re(g) {
              (this._iterable = g), (this.size = g.length || g.size);
            }
            (Re.prototype.__iterateUncached = function (g, m) {
              if (m) return this.cacheResult().__iterate(g, m);
              var B = this._iterable,
                O = te(B),
                A = 0;
              if (W(O)) for (var k; !(k = O.next()).done && g(k.value, A++, this) !== !1; );
              return A;
            }),
              (Re.prototype.__iteratorUncached = function (g, m) {
                if (m) return this.cacheResult().__iterator(g, m);
                var B = this._iterable,
                  O = te(B);
                if (!W(O)) return new ae(pe);
                var A = 0;
                return new ae(function () {
                  var k = O.next();
                  return k.done ? k : ue(g, A++, k.value);
                });
              }),
              p(et, ie);
            function et(g) {
              (this._iterator = g), (this._iteratorCache = []);
            }
            (et.prototype.__iterateUncached = function (g, m) {
              if (m) return this.cacheResult().__iterate(g, m);
              for (var B = this._iterator, O = this._iteratorCache, A = 0; A < O.length; )
                if (g(O[A], A++, this) === !1) return A;
              for (var k; !(k = B.next()).done; ) {
                var w = k.value;
                if (((O[A] = w), g(w, A++, this) === !1)) break;
              }
              return A;
            }),
              (et.prototype.__iteratorUncached = function (g, m) {
                if (m) return this.cacheResult().__iterator(g, m);
                var B = this._iterator,
                  O = this._iteratorCache,
                  A = 0;
                return new ae(function () {
                  if (A >= O.length) {
                    var k = B.next();
                    if (k.done) return k;
                    O[A] = k.value;
                  }
                  return ue(g, A, O[A++]);
                });
              });
            function Rt(g) {
              return !!(g && g[le]);
            }
            var Ft;
            function Ct() {
              return Ft || (Ft = new Be([]));
            }
            function cn(g) {
              var m = Array.isArray(g)
                ? new Be(g).fromEntrySeq()
                : W(g)
                  ? new et(g).fromEntrySeq()
                  : De(g)
                    ? new Re(g).fromEntrySeq()
                    : typeof g == 'object'
                      ? new Oe(g)
                      : void 0;
              if (!m)
                throw new TypeError(
                  'Expected Array or iterable object of [k, v] entries, or keyed object: ' + g
                );
              return m;
            }
            function dn(g) {
              var m = ni(g);
              if (!m) throw new TypeError('Expected Array or iterable object of values: ' + g);
              return m;
            }
            function $i(g) {
              var m = ni(g) || (typeof g == 'object' && new Oe(g));
              if (!m)
                throw new TypeError(
                  'Expected Array or iterable object of values, or keyed object: ' + g
                );
              return m;
            }
            function ni(g) {
              return C(g) ? new Be(g) : W(g) ? new et(g) : De(g) ? new Re(g) : void 0;
            }
            function zi(g, m, B, O) {
              var A = g._cache;
              if (A) {
                for (var k = A.length - 1, w = 0; w <= k; w++) {
                  var H = A[B ? k - w : w];
                  if (m(H[1], O ? H[0] : w, g) === !1) return w + 1;
                }
                return w;
              }
              return g.__iterateUncached(m, B);
            }
            function Vi(g, m, B, O) {
              var A = g._cache;
              if (A) {
                var k = A.length - 1,
                  w = 0;
                return new ae(function () {
                  var H = A[B ? k - w : w];
                  return w++ > k ? pe() : ue(m, O ? H[0] : w - 1, H[1]);
                });
              }
              return g.__iteratorUncached(m, B);
            }
            function ai(g, m) {
              return m ? ii(m, g, '', { '': g }) : si(g);
            }
            function ii(g, m, B, O) {
              return Array.isArray(m)
                ? g.call(
                    O,
                    B,
                    ie(m).map(function (A, k) {
                      return ii(g, A, k, m);
                    })
                  )
                : Ki(m)
                  ? g.call(
                      O,
                      B,
                      X(m).map(function (A, k) {
                        return ii(g, A, k, m);
                      })
                    )
                  : m;
            }
            function si(g) {
              return Array.isArray(g) ? ie(g).map(si).toList() : Ki(g) ? X(g).map(si).toMap() : g;
            }
            function Ki(g) {
              return g && (g.constructor === Object || g.constructor === void 0);
            }
            function Ne(g, m) {
              if (g === m || (g !== g && m !== m)) return !0;
              if (!g || !m) return !1;
              if (typeof g.valueOf == 'function' && typeof m.valueOf == 'function') {
                if (((g = g.valueOf()), (m = m.valueOf()), g === m || (g !== g && m !== m)))
                  return !0;
                if (!g || !m) return !1;
              }
              return !!(
                typeof g.equals == 'function' &&
                typeof m.equals == 'function' &&
                g.equals(m)
              );
            }
            function zo(g, m) {
              if (g === m) return !0;
              if (
                !u(m) ||
                (g.size !== void 0 && m.size !== void 0 && g.size !== m.size) ||
                (g.__hash !== void 0 && m.__hash !== void 0 && g.__hash !== m.__hash) ||
                y(g) !== y(m) ||
                o(g) !== o(m) ||
                n(g) !== n(m)
              )
                return !1;
              if (g.size === 0 && m.size === 0) return !0;
              var B = !a(g);
              if (n(g)) {
                var O = g.entries();
                return (
                  m.every(function (K, Y) {
                    var Z = O.next().value;
                    return Z && Ne(Z[1], K) && (B || Ne(Z[0], Y));
                  }) && O.next().done
                );
              }
              var A = !1;
              if (g.size === void 0)
                if (m.size === void 0) typeof g.cacheResult == 'function' && g.cacheResult();
                else {
                  A = !0;
                  var k = g;
                  (g = m), (m = k);
                }
              var w = !0,
                H = m.__iterate(function (K, Y) {
                  if (B ? !g.has(K) : A ? !Ne(K, g.get(Y, b)) : !Ne(g.get(Y, b), K))
                    return (w = !1), !1;
                });
              return w && g.size === H;
            }
            p(tt, ie);
            function tt(g, m) {
              if (!(this instanceof tt)) return new tt(g, m);
              if (
                ((this._value = g),
                (this.size = m === void 0 ? 1 / 0 : Math.max(0, m)),
                this.size === 0)
              ) {
                if (Vo) return Vo;
                Vo = this;
              }
            }
            (tt.prototype.toString = function () {
              return this.size === 0
                ? 'Repeat []'
                : 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
            }),
              (tt.prototype.get = function (g, m) {
                return this.has(g) ? this._value : m;
              }),
              (tt.prototype.includes = function (g) {
                return Ne(this._value, g);
              }),
              (tt.prototype.slice = function (g, m) {
                var B = this.size;
                return D(g, m, B) ? this : new tt(this._value, z(m, B) - $(g, B));
              }),
              (tt.prototype.reverse = function () {
                return this;
              }),
              (tt.prototype.indexOf = function (g) {
                return Ne(this._value, g) ? 0 : -1;
              }),
              (tt.prototype.lastIndexOf = function (g) {
                return Ne(this._value, g) ? this.size : -1;
              }),
              (tt.prototype.__iterate = function (g, m) {
                for (var B = 0; B < this.size; B++)
                  if (g(this._value, B, this) === !1) return B + 1;
                return B;
              }),
              (tt.prototype.__iterator = function (g, m) {
                var B = this,
                  O = 0;
                return new ae(function () {
                  return O < B.size ? ue(g, O++, B._value) : pe();
                });
              }),
              (tt.prototype.equals = function (g) {
                return g instanceof tt ? Ne(this._value, g._value) : zo(g);
              });
            var Vo;
            function Ji(g, m) {
              if (!g) throw new Error(m);
            }
            p(ze, ie);
            function ze(g, m, B) {
              if (!(this instanceof ze)) return new ze(g, m, B);
              if (
                (Ji(B !== 0, 'Cannot step a Range by 0'),
                (g = g || 0),
                m === void 0 && (m = 1 / 0),
                (B = B === void 0 ? 1 : Math.abs(B)),
                m < g && (B = -B),
                (this._start = g),
                (this._end = m),
                (this._step = B),
                (this.size = Math.max(0, Math.ceil((m - g) / B - 1) + 1)),
                this.size === 0)
              ) {
                if (Ko) return Ko;
                Ko = this;
              }
            }
            (ze.prototype.toString = function () {
              return this.size === 0
                ? 'Range []'
                : 'Range [ ' +
                    this._start +
                    '...' +
                    this._end +
                    (this._step !== 1 ? ' by ' + this._step : '') +
                    ' ]';
            }),
              (ze.prototype.get = function (g, m) {
                return this.has(g) ? this._start + M(this, g) * this._step : m;
              }),
              (ze.prototype.includes = function (g) {
                var m = (g - this._start) / this._step;
                return m >= 0 && m < this.size && m === Math.floor(m);
              }),
              (ze.prototype.slice = function (g, m) {
                return D(g, m, this.size)
                  ? this
                  : ((g = $(g, this.size)),
                    (m = z(m, this.size)),
                    m <= g
                      ? new ze(0, 0)
                      : new ze(this.get(g, this._end), this.get(m, this._end), this._step));
              }),
              (ze.prototype.indexOf = function (g) {
                var m = g - this._start;
                if (m % this._step === 0) {
                  var B = m / this._step;
                  if (B >= 0 && B < this.size) return B;
                }
                return -1;
              }),
              (ze.prototype.lastIndexOf = function (g) {
                return this.indexOf(g);
              }),
              (ze.prototype.__iterate = function (g, m) {
                for (
                  var B = this.size - 1,
                    O = this._step,
                    A = m ? this._start + B * O : this._start,
                    k = 0;
                  k <= B;
                  k++
                ) {
                  if (g(A, k, this) === !1) return k + 1;
                  A += m ? -O : O;
                }
                return k;
              }),
              (ze.prototype.__iterator = function (g, m) {
                var B = this.size - 1,
                  O = this._step,
                  A = m ? this._start + B * O : this._start,
                  k = 0;
                return new ae(function () {
                  var w = A;
                  return (A += m ? -O : O), k > B ? pe() : ue(g, k++, w);
                });
              }),
              (ze.prototype.equals = function (g) {
                return g instanceof ze
                  ? this._start === g._start && this._end === g._end && this._step === g._step
                  : zo(this, g);
              });
            var Ko;
            p(nr, v);
            function nr() {
              throw TypeError('Abstract');
            }
            p(oi, nr);
            function oi() {}
            p(fn, nr);
            function fn() {}
            p(Yi, nr);
            function Yi() {}
            (nr.Keyed = oi), (nr.Indexed = fn), (nr.Set = Yi);
            var ui =
              typeof Math.imul == 'function' && Math.imul(4294967295, 2) === -2
                ? Math.imul
                : function (m, B) {
                    (m = m | 0), (B = B | 0);
                    var O = m & 65535,
                      A = B & 65535;
                    return (O * A + ((((m >>> 16) * A + O * (B >>> 16)) << 16) >>> 0)) | 0;
                  };
            function Jo(g) {
              return ((g >>> 1) & 1073741824) | (g & 3221225471);
            }
            function yt(g) {
              if (
                g === !1 ||
                g === null ||
                g === void 0 ||
                (typeof g.valueOf == 'function' &&
                  ((g = g.valueOf()), g === !1 || g === null || g === void 0))
              )
                return 0;
              if (g === !0) return 1;
              var m = typeof g;
              if (m === 'number') {
                if (g !== g || g === 1 / 0) return 0;
                var B = g | 0;
                for (B !== g && (B ^= g * 4294967295); g > 4294967295; )
                  (g /= 4294967295), (B ^= g);
                return Jo(B);
              }
              if (m === 'string') return g.length > l_ ? s_(g) : Yo(g);
              if (typeof g.hashCode == 'function') return g.hashCode();
              if (m === 'object') return o_(g);
              if (typeof g.toString == 'function') return Yo(g.toString());
              throw new Error('Value type ' + m + ' cannot be hashed.');
            }
            function s_(g) {
              var m = tu[g];
              return (
                m === void 0 &&
                  ((m = Yo(g)), eu === c_ && ((eu = 0), (tu = {})), eu++, (tu[g] = m)),
                m
              );
            }
            function Yo(g) {
              for (var m = 0, B = 0; B < g.length; B++) m = (31 * m + g.charCodeAt(B)) | 0;
              return Jo(m);
            }
            function o_(g) {
              var m;
              if (
                (Qo && ((m = Xo.get(g)), m !== void 0)) ||
                ((m = g[en]), m !== void 0) ||
                (!nh &&
                  ((m = g.propertyIsEnumerable && g.propertyIsEnumerable[en]),
                  m !== void 0 || ((m = u_(g)), m !== void 0)))
              )
                return m;
              if (((m = ++Zo), Zo & 1073741824 && (Zo = 0), Qo)) Xo.set(g, m);
              else {
                if (rh !== void 0 && rh(g) === !1)
                  throw new Error('Non-extensible objects are not allowed as keys.');
                if (nh)
                  Object.defineProperty(g, en, {
                    enumerable: !1,
                    configurable: !1,
                    writable: !1,
                    value: m,
                  });
                else if (
                  g.propertyIsEnumerable !== void 0 &&
                  g.propertyIsEnumerable === g.constructor.prototype.propertyIsEnumerable
                )
                  (g.propertyIsEnumerable = function () {
                    return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
                  }),
                    (g.propertyIsEnumerable[en] = m);
                else if (g.nodeType !== void 0) g[en] = m;
                else throw new Error('Unable to set a non-enumerable property on object.');
              }
              return m;
            }
            var rh = Object.isExtensible,
              nh = (function () {
                try {
                  return Object.defineProperty({}, '@', {}), !0;
                } catch {
                  return !1;
                }
              })();
            function u_(g) {
              if (g && g.nodeType > 0)
                switch (g.nodeType) {
                  case 1:
                    return g.uniqueID;
                  case 9:
                    return g.documentElement && g.documentElement.uniqueID;
                }
            }
            var Qo = typeof WeakMap == 'function',
              Xo;
            Qo && (Xo = new WeakMap());
            var Zo = 0,
              en = '__immutablehash__';
            typeof Symbol == 'function' && (en = Symbol(en));
            var l_ = 16,
              c_ = 255,
              eu = 0,
              tu = {};
            function vt(g) {
              Ji(g !== 1 / 0, 'Cannot perform this action with an infinite size.');
            }
            p(Pe, oi);
            function Pe(g) {
              return g == null
                ? kt()
                : ru(g) && !n(g)
                  ? g
                  : kt().withMutations(function (m) {
                      var B = h(g);
                      vt(B.size),
                        B.forEach(function (O, A) {
                          return m.set(A, O);
                        });
                    });
            }
            (Pe.of = function () {
              var g = r.call(arguments, 0);
              return kt().withMutations(function (m) {
                for (var B = 0; B < g.length; B += 2) {
                  if (B + 1 >= g.length) throw new Error('Missing value for key: ' + g[B]);
                  m.set(g[B], g[B + 1]);
                }
              });
            }),
              (Pe.prototype.toString = function () {
                return this.__toString('Map {', '}');
              }),
              (Pe.prototype.get = function (g, m) {
                return this._root ? this._root.get(0, void 0, g, m) : m;
              }),
              (Pe.prototype.set = function (g, m) {
                return oh(this, g, m);
              }),
              (Pe.prototype.setIn = function (g, m) {
                return this.updateIn(g, b, function () {
                  return m;
                });
              }),
              (Pe.prototype.remove = function (g) {
                return oh(this, g, b);
              }),
              (Pe.prototype.deleteIn = function (g) {
                return this.updateIn(g, function () {
                  return b;
                });
              }),
              (Pe.prototype.update = function (g, m, B) {
                return arguments.length === 1 ? g(this) : this.updateIn([g], m, B);
              }),
              (Pe.prototype.updateIn = function (g, m, B) {
                B || ((B = m), (m = void 0));
                var O = fh(this, Ch(g), m, B);
                return O === b ? void 0 : O;
              }),
              (Pe.prototype.clear = function () {
                return this.size === 0
                  ? this
                  : this.__ownerID
                    ? ((this.size = 0),
                      (this._root = null),
                      (this.__hash = void 0),
                      (this.__altered = !0),
                      this)
                    : kt();
              }),
              (Pe.prototype.merge = function () {
                return Qi(this, void 0, arguments);
              }),
              (Pe.prototype.mergeWith = function (g) {
                var m = r.call(arguments, 1);
                return Qi(this, g, m);
              }),
              (Pe.prototype.mergeIn = function (g) {
                var m = r.call(arguments, 1);
                return this.updateIn(g, kt(), function (B) {
                  return typeof B.merge == 'function' ? B.merge.apply(B, m) : m[m.length - 1];
                });
              }),
              (Pe.prototype.mergeDeep = function () {
                return Qi(this, lh, arguments);
              }),
              (Pe.prototype.mergeDeepWith = function (g) {
                var m = r.call(arguments, 1);
                return Qi(this, ch(g), m);
              }),
              (Pe.prototype.mergeDeepIn = function (g) {
                var m = r.call(arguments, 1);
                return this.updateIn(g, kt(), function (B) {
                  return typeof B.mergeDeep == 'function'
                    ? B.mergeDeep.apply(B, m)
                    : m[m.length - 1];
                });
              }),
              (Pe.prototype.sort = function (g) {
                return Ge(Sn(this, g));
              }),
              (Pe.prototype.sortBy = function (g, m) {
                return Ge(Sn(this, m, g));
              }),
              (Pe.prototype.withMutations = function (g) {
                var m = this.asMutable();
                return g(m), m.wasAltered() ? m.__ensureOwner(this.__ownerID) : this;
              }),
              (Pe.prototype.asMutable = function () {
                return this.__ownerID ? this : this.__ensureOwner(new L());
              }),
              (Pe.prototype.asImmutable = function () {
                return this.__ensureOwner();
              }),
              (Pe.prototype.wasAltered = function () {
                return this.__altered;
              }),
              (Pe.prototype.__iterator = function (g, m) {
                return new nu(this, g, m);
              }),
              (Pe.prototype.__iterate = function (g, m) {
                var B = this,
                  O = 0;
                return (
                  this._root &&
                    this._root.iterate(function (A) {
                      return O++, g(A[1], A[0], B);
                    }, m),
                  O
                );
              }),
              (Pe.prototype.__ensureOwner = function (g) {
                return g === this.__ownerID
                  ? this
                  : g
                    ? iu(this.size, this._root, g, this.__hash)
                    : ((this.__ownerID = g), (this.__altered = !1), this);
              });
            function ru(g) {
              return !!(g && g[ah]);
            }
            Pe.isMap = ru;
            var ah = '@@__IMMUTABLE_MAP__@@',
              _e = Pe.prototype;
            (_e[ah] = !0), (_e[_] = _e.remove), (_e.removeIn = _e.deleteIn);
            function li(g, m) {
              (this.ownerID = g), (this.entries = m);
            }
            (li.prototype.get = function (g, m, B, O) {
              for (var A = this.entries, k = 0, w = A.length; k < w; k++)
                if (Ne(B, A[k][0])) return A[k][1];
              return O;
            }),
              (li.prototype.update = function (g, m, B, O, A, k, w) {
                for (
                  var H = A === b, K = this.entries, Y = 0, Z = K.length;
                  Y < Z && !Ne(O, K[Y][0]);
                  Y++
                );
                var ne = Y < Z;
                if (ne ? K[Y][1] === A : H) return this;
                if ((R(w), (H || !ne) && R(k), !(H && K.length === 1))) {
                  if (!ne && !H && K.length >= v_) return d_(g, K, O, A);
                  var oe = g && g === this.ownerID,
                    he = oe ? K : x(K);
                  return (
                    ne
                      ? H
                        ? Y === Z - 1
                          ? he.pop()
                          : (he[Y] = he.pop())
                        : (he[Y] = [O, A])
                      : he.push([O, A]),
                    oe ? ((this.entries = he), this) : new li(g, he)
                  );
                }
              });
            function pn(g, m, B) {
              (this.ownerID = g), (this.bitmap = m), (this.nodes = B);
            }
            (pn.prototype.get = function (g, m, B, O) {
              m === void 0 && (m = yt(B));
              var A = 1 << ((g === 0 ? m : m >>> g) & I),
                k = this.bitmap;
              return k & A ? this.nodes[ph(k & (A - 1))].get(g + S, m, B, O) : O;
            }),
              (pn.prototype.update = function (g, m, B, O, A, k, w) {
                B === void 0 && (B = yt(O));
                var H = (m === 0 ? B : B >>> m) & I,
                  K = 1 << H,
                  Y = this.bitmap,
                  Z = (Y & K) !== 0;
                if (!Z && A === b) return this;
                var ne = ph(Y & (K - 1)),
                  oe = this.nodes,
                  he = Z ? oe[ne] : void 0,
                  ge = su(he, g, m + S, B, O, A, k, w);
                if (ge === he) return this;
                if (!Z && ge && oe.length >= g_) return p_(g, oe, Y, H, ge);
                if (Z && !ge && oe.length === 2 && uh(oe[ne ^ 1])) return oe[ne ^ 1];
                if (Z && ge && oe.length === 1 && uh(ge)) return ge;
                var ke = g && g === this.ownerID,
                  wt = Z ? (ge ? Y : Y ^ K) : Y | K,
                  Dt = Z ? (ge ? hh(oe, ne, ge, ke) : y_(oe, ne, ke)) : h_(oe, ne, ge, ke);
                return ke ? ((this.bitmap = wt), (this.nodes = Dt), this) : new pn(g, wt, Dt);
              });
            function ci(g, m, B) {
              (this.ownerID = g), (this.count = m), (this.nodes = B);
            }
            (ci.prototype.get = function (g, m, B, O) {
              m === void 0 && (m = yt(B));
              var A = (g === 0 ? m : m >>> g) & I,
                k = this.nodes[A];
              return k ? k.get(g + S, m, B, O) : O;
            }),
              (ci.prototype.update = function (g, m, B, O, A, k, w) {
                B === void 0 && (B = yt(O));
                var H = (m === 0 ? B : B >>> m) & I,
                  K = A === b,
                  Y = this.nodes,
                  Z = Y[H];
                if (K && !Z) return this;
                var ne = su(Z, g, m + S, B, O, A, k, w);
                if (ne === Z) return this;
                var oe = this.count;
                if (!Z) oe++;
                else if (!ne && (oe--, oe < __)) return f_(g, Y, oe, H);
                var he = g && g === this.ownerID,
                  ge = hh(Y, H, ne, he);
                return he ? ((this.count = oe), (this.nodes = ge), this) : new ci(g, oe, ge);
              });
            function hn(g, m, B) {
              (this.ownerID = g), (this.keyHash = m), (this.entries = B);
            }
            (hn.prototype.get = function (g, m, B, O) {
              for (var A = this.entries, k = 0, w = A.length; k < w; k++)
                if (Ne(B, A[k][0])) return A[k][1];
              return O;
            }),
              (hn.prototype.update = function (g, m, B, O, A, k, w) {
                B === void 0 && (B = yt(O));
                var H = A === b;
                if (B !== this.keyHash) return H ? this : (R(w), R(k), ou(this, g, m, B, [O, A]));
                for (var K = this.entries, Y = 0, Z = K.length; Y < Z && !Ne(O, K[Y][0]); Y++);
                var ne = Y < Z;
                if (ne ? K[Y][1] === A : H) return this;
                if ((R(w), (H || !ne) && R(k), H && Z === 2))
                  return new Vt(g, this.keyHash, K[Y ^ 1]);
                var oe = g && g === this.ownerID,
                  he = oe ? K : x(K);
                return (
                  ne
                    ? H
                      ? Y === Z - 1
                        ? he.pop()
                        : (he[Y] = he.pop())
                      : (he[Y] = [O, A])
                    : he.push([O, A]),
                  oe ? ((this.entries = he), this) : new hn(g, this.keyHash, he)
                );
              });
            function Vt(g, m, B) {
              (this.ownerID = g), (this.keyHash = m), (this.entry = B);
            }
            (Vt.prototype.get = function (g, m, B, O) {
              return Ne(B, this.entry[0]) ? this.entry[1] : O;
            }),
              (Vt.prototype.update = function (g, m, B, O, A, k, w) {
                var H = A === b,
                  K = Ne(O, this.entry[0]);
                if (K ? A === this.entry[1] : H) return this;
                if ((R(w), H)) {
                  R(k);
                  return;
                }
                return K
                  ? g && g === this.ownerID
                    ? ((this.entry[1] = A), this)
                    : new Vt(g, this.keyHash, [O, A])
                  : (R(k), ou(this, g, m, yt(O), [O, A]));
              }),
              (li.prototype.iterate = hn.prototype.iterate =
                function (g, m) {
                  for (var B = this.entries, O = 0, A = B.length - 1; O <= A; O++)
                    if (g(B[m ? A - O : O]) === !1) return !1;
                }),
              (pn.prototype.iterate = ci.prototype.iterate =
                function (g, m) {
                  for (var B = this.nodes, O = 0, A = B.length - 1; O <= A; O++) {
                    var k = B[m ? A - O : O];
                    if (k && k.iterate(g, m) === !1) return !1;
                  }
                }),
              (Vt.prototype.iterate = function (g, m) {
                return g(this.entry);
              }),
              p(nu, ae);
            function nu(g, m, B) {
              (this._type = m), (this._reverse = B), (this._stack = g._root && ih(g._root));
            }
            nu.prototype.next = function () {
              for (var g = this._type, m = this._stack; m; ) {
                var B = m.node,
                  O = m.index++,
                  A;
                if (B.entry) {
                  if (O === 0) return au(g, B.entry);
                } else if (B.entries) {
                  if (((A = B.entries.length - 1), O <= A))
                    return au(g, B.entries[this._reverse ? A - O : O]);
                } else if (((A = B.nodes.length - 1), O <= A)) {
                  var k = B.nodes[this._reverse ? A - O : O];
                  if (k) {
                    if (k.entry) return au(g, k.entry);
                    m = this._stack = ih(k, m);
                  }
                  continue;
                }
                m = this._stack = this._stack.__prev;
              }
              return pe();
            };
            function au(g, m) {
              return ue(g, m[0], m[1]);
            }
            function ih(g, m) {
              return { node: g, index: 0, __prev: m };
            }
            function iu(g, m, B, O) {
              var A = Object.create(_e);
              return (
                (A.size = g),
                (A._root = m),
                (A.__ownerID = B),
                (A.__hash = O),
                (A.__altered = !1),
                A
              );
            }
            var sh;
            function kt() {
              return sh || (sh = iu(0));
            }
            function oh(g, m, B) {
              var O, A;
              if (g._root) {
                var k = F(E),
                  w = F(T);
                if (((O = su(g._root, g.__ownerID, 0, void 0, m, B, k, w)), !w.value)) return g;
                A = g.size + (k.value ? (B === b ? -1 : 1) : 0);
              } else {
                if (B === b) return g;
                (A = 1), (O = new li(g.__ownerID, [[m, B]]));
              }
              return g.__ownerID
                ? ((g.size = A), (g._root = O), (g.__hash = void 0), (g.__altered = !0), g)
                : O
                  ? iu(A, O)
                  : kt();
            }
            function su(g, m, B, O, A, k, w, H) {
              return g
                ? g.update(m, B, O, A, k, w, H)
                : k === b
                  ? g
                  : (R(H), R(w), new Vt(m, O, [A, k]));
            }
            function uh(g) {
              return g.constructor === Vt || g.constructor === hn;
            }
            function ou(g, m, B, O, A) {
              if (g.keyHash === O) return new hn(m, O, [g.entry, A]);
              var k = (B === 0 ? g.keyHash : g.keyHash >>> B) & I,
                w = (B === 0 ? O : O >>> B) & I,
                H,
                K =
                  k === w
                    ? [ou(g, m, B + S, O, A)]
                    : ((H = new Vt(m, O, A)), k < w ? [g, H] : [H, g]);
              return new pn(m, (1 << k) | (1 << w), K);
            }
            function d_(g, m, B, O) {
              g || (g = new L());
              for (var A = new Vt(g, yt(B), [B, O]), k = 0; k < m.length; k++) {
                var w = m[k];
                A = A.update(g, 0, void 0, w[0], w[1]);
              }
              return A;
            }
            function f_(g, m, B, O) {
              for (
                var A = 0, k = 0, w = new Array(B), H = 0, K = 1, Y = m.length;
                H < Y;
                H++, K <<= 1
              ) {
                var Z = m[H];
                Z !== void 0 && H !== O && ((A |= K), (w[k++] = Z));
              }
              return new pn(g, A, w);
            }
            function p_(g, m, B, O, A) {
              for (var k = 0, w = new Array(P), H = 0; B !== 0; H++, B >>>= 1)
                w[H] = B & 1 ? m[k++] : void 0;
              return (w[O] = A), new ci(g, k + 1, w);
            }
            function Qi(g, m, B) {
              for (var O = [], A = 0; A < B.length; A++) {
                var k = B[A],
                  w = h(k);
                u(k) ||
                  (w = w.map(function (H) {
                    return ai(H);
                  })),
                  O.push(w);
              }
              return dh(g, m, O);
            }
            function lh(g, m, B) {
              return g && g.mergeDeep && u(m) ? g.mergeDeep(m) : Ne(g, m) ? g : m;
            }
            function ch(g) {
              return function (m, B, O) {
                if (m && m.mergeDeepWith && u(B)) return m.mergeDeepWith(g, B);
                var A = g(m, B, O);
                return Ne(m, A) ? m : A;
              };
            }
            function dh(g, m, B) {
              return (
                (B = B.filter(function (O) {
                  return O.size !== 0;
                })),
                B.length === 0
                  ? g
                  : g.size === 0 && !g.__ownerID && B.length === 1
                    ? g.constructor(B[0])
                    : g.withMutations(function (O) {
                        for (
                          var A = m
                              ? function (w, H) {
                                  O.update(H, b, function (K) {
                                    return K === b ? w : m(K, w, H);
                                  });
                                }
                              : function (w, H) {
                                  O.set(H, w);
                                },
                            k = 0;
                          k < B.length;
                          k++
                        )
                          B[k].forEach(A);
                      })
              );
            }
            function fh(g, m, B, O) {
              var A = g === b,
                k = m.next();
              if (k.done) {
                var w = A ? B : g,
                  H = O(w);
                return H === w ? g : H;
              }
              Ji(A || (g && g.set), 'invalid keyPath');
              var K = k.value,
                Y = A ? b : g.get(K, b),
                Z = fh(Y, m, B, O);
              return Z === Y ? g : Z === b ? g.remove(K) : (A ? kt() : g).set(K, Z);
            }
            function ph(g) {
              return (
                (g = g - ((g >> 1) & 1431655765)),
                (g = (g & 858993459) + ((g >> 2) & 858993459)),
                (g = (g + (g >> 4)) & 252645135),
                (g = g + (g >> 8)),
                (g = g + (g >> 16)),
                g & 127
              );
            }
            function hh(g, m, B, O) {
              var A = O ? g : x(g);
              return (A[m] = B), A;
            }
            function h_(g, m, B, O) {
              var A = g.length + 1;
              if (O && m + 1 === A) return (g[m] = B), g;
              for (var k = new Array(A), w = 0, H = 0; H < A; H++)
                H === m ? ((k[H] = B), (w = -1)) : (k[H] = g[H + w]);
              return k;
            }
            function y_(g, m, B) {
              var O = g.length - 1;
              if (B && m === O) return g.pop(), g;
              for (var A = new Array(O), k = 0, w = 0; w < O; w++)
                w === m && (k = 1), (A[w] = g[w + k]);
              return A;
            }
            var v_ = P / 4,
              g_ = P / 2,
              __ = P / 4;
            p(Ae, fn);
            function Ae(g) {
              var m = uu();
              if (g == null) return m;
              if (yh(g)) return g;
              var B = s(g),
                O = B.size;
              return O === 0
                ? m
                : (vt(O),
                  O > 0 && O < P
                    ? fi(0, O, S, null, new ar(B.toArray()))
                    : m.withMutations(function (A) {
                        A.setSize(O),
                          B.forEach(function (k, w) {
                            return A.set(w, k);
                          });
                      }));
            }
            (Ae.of = function () {
              return this(arguments);
            }),
              (Ae.prototype.toString = function () {
                return this.__toString('List [', ']');
              }),
              (Ae.prototype.get = function (g, m) {
                if (((g = M(this, g)), g >= 0 && g < this.size)) {
                  g += this._origin;
                  var B = Sh(this, g);
                  return B && B.array[g & I];
                }
                return m;
              }),
              (Ae.prototype.set = function (g, m) {
                return S_(this, g, m);
              }),
              (Ae.prototype.remove = function (g) {
                return this.has(g)
                  ? g === 0
                    ? this.shift()
                    : g === this.size - 1
                      ? this.pop()
                      : this.splice(g, 1)
                  : this;
              }),
              (Ae.prototype.insert = function (g, m) {
                return this.splice(g, 0, m);
              }),
              (Ae.prototype.clear = function () {
                return this.size === 0
                  ? this
                  : this.__ownerID
                    ? ((this.size = this._origin = this._capacity = 0),
                      (this._level = S),
                      (this._root = this._tail = null),
                      (this.__hash = void 0),
                      (this.__altered = !0),
                      this)
                    : uu();
              }),
              (Ae.prototype.push = function () {
                var g = arguments,
                  m = this.size;
                return this.withMutations(function (B) {
                  ir(B, 0, m + g.length);
                  for (var O = 0; O < g.length; O++) B.set(m + O, g[O]);
                });
              }),
              (Ae.prototype.pop = function () {
                return ir(this, 0, -1);
              }),
              (Ae.prototype.unshift = function () {
                var g = arguments;
                return this.withMutations(function (m) {
                  ir(m, -g.length);
                  for (var B = 0; B < g.length; B++) m.set(B, g[B]);
                });
              }),
              (Ae.prototype.shift = function () {
                return ir(this, 1);
              }),
              (Ae.prototype.merge = function () {
                return Xi(this, void 0, arguments);
              }),
              (Ae.prototype.mergeWith = function (g) {
                var m = r.call(arguments, 1);
                return Xi(this, g, m);
              }),
              (Ae.prototype.mergeDeep = function () {
                return Xi(this, lh, arguments);
              }),
              (Ae.prototype.mergeDeepWith = function (g) {
                var m = r.call(arguments, 1);
                return Xi(this, ch(g), m);
              }),
              (Ae.prototype.setSize = function (g) {
                return ir(this, 0, g);
              }),
              (Ae.prototype.slice = function (g, m) {
                var B = this.size;
                return D(g, m, B) ? this : ir(this, $(g, B), z(m, B));
              }),
              (Ae.prototype.__iterator = function (g, m) {
                var B = 0,
                  O = gh(this, m);
                return new ae(function () {
                  var A = O();
                  return A === di ? pe() : ue(g, B++, A);
                });
              }),
              (Ae.prototype.__iterate = function (g, m) {
                for (var B = 0, O = gh(this, m), A; (A = O()) !== di && g(A, B++, this) !== !1; );
                return B;
              }),
              (Ae.prototype.__ensureOwner = function (g) {
                return g === this.__ownerID
                  ? this
                  : g
                    ? fi(
                        this._origin,
                        this._capacity,
                        this._level,
                        this._root,
                        this._tail,
                        g,
                        this.__hash
                      )
                    : ((this.__ownerID = g), this);
              });
            function yh(g) {
              return !!(g && g[vh]);
            }
            Ae.isList = yh;
            var vh = '@@__IMMUTABLE_LIST__@@',
              st = Ae.prototype;
            (st[vh] = !0),
              (st[_] = st.remove),
              (st.setIn = _e.setIn),
              (st.deleteIn = st.removeIn = _e.removeIn),
              (st.update = _e.update),
              (st.updateIn = _e.updateIn),
              (st.mergeIn = _e.mergeIn),
              (st.mergeDeepIn = _e.mergeDeepIn),
              (st.withMutations = _e.withMutations),
              (st.asMutable = _e.asMutable),
              (st.asImmutable = _e.asImmutable),
              (st.wasAltered = _e.wasAltered);
            function ar(g, m) {
              (this.array = g), (this.ownerID = m);
            }
            (ar.prototype.removeBefore = function (g, m, B) {
              if (B === m ? 1 << m : this.array.length === 0) return this;
              var O = (B >>> m) & I;
              if (O >= this.array.length) return new ar([], g);
              var A = O === 0,
                k;
              if (m > 0) {
                var w = this.array[O];
                if (((k = w && w.removeBefore(g, m - S, B)), k === w && A)) return this;
              }
              if (A && !k) return this;
              var H = yn(this, g);
              if (!A) for (var K = 0; K < O; K++) H.array[K] = void 0;
              return k && (H.array[O] = k), H;
            }),
              (ar.prototype.removeAfter = function (g, m, B) {
                if (B === (m ? 1 << m : 0) || this.array.length === 0) return this;
                var O = ((B - 1) >>> m) & I;
                if (O >= this.array.length) return this;
                var A;
                if (m > 0) {
                  var k = this.array[O];
                  if (
                    ((A = k && k.removeAfter(g, m - S, B)), A === k && O === this.array.length - 1)
                  )
                    return this;
                }
                var w = yn(this, g);
                return w.array.splice(O + 1), A && (w.array[O] = A), w;
              });
            var di = {};
            function gh(g, m) {
              var B = g._origin,
                O = g._capacity,
                A = pi(O),
                k = g._tail;
              return w(g._root, g._level, 0);
              function w(Y, Z, ne) {
                return Z === 0 ? H(Y, ne) : K(Y, Z, ne);
              }
              function H(Y, Z) {
                var ne = Z === A ? k && k.array : Y && Y.array,
                  oe = Z > B ? 0 : B - Z,
                  he = O - Z;
                return (
                  he > P && (he = P),
                  function () {
                    if (oe === he) return di;
                    var ge = m ? --he : oe++;
                    return ne && ne[ge];
                  }
                );
              }
              function K(Y, Z, ne) {
                var oe,
                  he = Y && Y.array,
                  ge = ne > B ? 0 : (B - ne) >> Z,
                  ke = ((O - ne) >> Z) + 1;
                return (
                  ke > P && (ke = P),
                  function () {
                    do {
                      if (oe) {
                        var wt = oe();
                        if (wt !== di) return wt;
                        oe = null;
                      }
                      if (ge === ke) return di;
                      var Dt = m ? --ke : ge++;
                      oe = w(he && he[Dt], Z - S, ne + (Dt << Z));
                    } while (!0);
                  }
                );
              }
            }
            function fi(g, m, B, O, A, k, w) {
              var H = Object.create(st);
              return (
                (H.size = m - g),
                (H._origin = g),
                (H._capacity = m),
                (H._level = B),
                (H._root = O),
                (H._tail = A),
                (H.__ownerID = k),
                (H.__hash = w),
                (H.__altered = !1),
                H
              );
            }
            var _h;
            function uu() {
              return _h || (_h = fi(0, 0, S));
            }
            function S_(g, m, B) {
              if (((m = M(g, m)), m !== m)) return g;
              if (m >= g.size || m < 0)
                return g.withMutations(function (w) {
                  m < 0 ? ir(w, m).set(0, B) : ir(w, 0, m + 1).set(m, B);
                });
              m += g._origin;
              var O = g._tail,
                A = g._root,
                k = F(T);
              return (
                m >= pi(g._capacity)
                  ? (O = lu(O, g.__ownerID, 0, m, B, k))
                  : (A = lu(A, g.__ownerID, g._level, m, B, k)),
                k.value
                  ? g.__ownerID
                    ? ((g._root = A), (g._tail = O), (g.__hash = void 0), (g.__altered = !0), g)
                    : fi(g._origin, g._capacity, g._level, A, O)
                  : g
              );
            }
            function lu(g, m, B, O, A, k) {
              var w = (O >>> B) & I,
                H = g && w < g.array.length;
              if (!H && A === void 0) return g;
              var K;
              if (B > 0) {
                var Y = g && g.array[w],
                  Z = lu(Y, m, B - S, O, A, k);
                return Z === Y ? g : ((K = yn(g, m)), (K.array[w] = Z), K);
              }
              return H && g.array[w] === A
                ? g
                : (R(k),
                  (K = yn(g, m)),
                  A === void 0 && w === K.array.length - 1 ? K.array.pop() : (K.array[w] = A),
                  K);
            }
            function yn(g, m) {
              return m && g && m === g.ownerID ? g : new ar(g ? g.array.slice() : [], m);
            }
            function Sh(g, m) {
              if (m >= pi(g._capacity)) return g._tail;
              if (m < 1 << (g._level + S)) {
                for (var B = g._root, O = g._level; B && O > 0; )
                  (B = B.array[(m >>> O) & I]), (O -= S);
                return B;
              }
            }
            function ir(g, m, B) {
              m !== void 0 && (m = m | 0), B !== void 0 && (B = B | 0);
              var O = g.__ownerID || new L(),
                A = g._origin,
                k = g._capacity,
                w = A + m,
                H = B === void 0 ? k : B < 0 ? k + B : A + B;
              if (w === A && H === k) return g;
              if (w >= H) return g.clear();
              for (var K = g._level, Y = g._root, Z = 0; w + Z < 0; )
                (Y = new ar(Y && Y.array.length ? [void 0, Y] : [], O)), (K += S), (Z += 1 << K);
              Z && ((w += Z), (A += Z), (H += Z), (k += Z));
              for (var ne = pi(k), oe = pi(H); oe >= 1 << (K + S); )
                (Y = new ar(Y && Y.array.length ? [Y] : [], O)), (K += S);
              var he = g._tail,
                ge = oe < ne ? Sh(g, H - 1) : oe > ne ? new ar([], O) : he;
              if (he && oe > ne && w < k && he.array.length) {
                Y = yn(Y, O);
                for (var ke = Y, wt = K; wt > S; wt -= S) {
                  var Dt = (ne >>> wt) & I;
                  ke = ke.array[Dt] = yn(ke.array[Dt], O);
                }
                ke.array[(ne >>> S) & I] = he;
              }
              if ((H < k && (ge = ge && ge.removeAfter(O, 0, H)), w >= oe))
                (w -= oe), (H -= oe), (K = S), (Y = null), (ge = ge && ge.removeBefore(O, 0, w));
              else if (w > A || oe < ne) {
                for (Z = 0; Y; ) {
                  var is = (w >>> K) & I;
                  if ((is !== oe >>> K) & I) break;
                  is && (Z += (1 << K) * is), (K -= S), (Y = Y.array[is]);
                }
                Y && w > A && (Y = Y.removeBefore(O, K, w - Z)),
                  Y && oe < ne && (Y = Y.removeAfter(O, K, oe - Z)),
                  Z && ((w -= Z), (H -= Z));
              }
              return g.__ownerID
                ? ((g.size = H - w),
                  (g._origin = w),
                  (g._capacity = H),
                  (g._level = K),
                  (g._root = Y),
                  (g._tail = ge),
                  (g.__hash = void 0),
                  (g.__altered = !0),
                  g)
                : fi(w, H, K, Y, ge);
            }
            function Xi(g, m, B) {
              for (var O = [], A = 0, k = 0; k < B.length; k++) {
                var w = B[k],
                  H = s(w);
                H.size > A && (A = H.size),
                  u(w) ||
                    (H = H.map(function (K) {
                      return ai(K);
                    })),
                  O.push(H);
              }
              return A > g.size && (g = g.setSize(A)), dh(g, m, O);
            }
            function pi(g) {
              return g < P ? 0 : ((g - 1) >>> S) << S;
            }
            p(Ge, Pe);
            function Ge(g) {
              return g == null
                ? Zi()
                : Ph(g)
                  ? g
                  : Zi().withMutations(function (m) {
                      var B = h(g);
                      vt(B.size),
                        B.forEach(function (O, A) {
                          return m.set(A, O);
                        });
                    });
            }
            (Ge.of = function () {
              return this(arguments);
            }),
              (Ge.prototype.toString = function () {
                return this.__toString('OrderedMap {', '}');
              }),
              (Ge.prototype.get = function (g, m) {
                var B = this._map.get(g);
                return B !== void 0 ? this._list.get(B)[1] : m;
              }),
              (Ge.prototype.clear = function () {
                return this.size === 0
                  ? this
                  : this.__ownerID
                    ? ((this.size = 0), this._map.clear(), this._list.clear(), this)
                    : Zi();
              }),
              (Ge.prototype.set = function (g, m) {
                return mh(this, g, m);
              }),
              (Ge.prototype.remove = function (g) {
                return mh(this, g, b);
              }),
              (Ge.prototype.wasAltered = function () {
                return this._map.wasAltered() || this._list.wasAltered();
              }),
              (Ge.prototype.__iterate = function (g, m) {
                var B = this;
                return this._list.__iterate(function (O) {
                  return O && g(O[1], O[0], B);
                }, m);
              }),
              (Ge.prototype.__iterator = function (g, m) {
                return this._list.fromEntrySeq().__iterator(g, m);
              }),
              (Ge.prototype.__ensureOwner = function (g) {
                if (g === this.__ownerID) return this;
                var m = this._map.__ensureOwner(g),
                  B = this._list.__ensureOwner(g);
                return g
                  ? cu(m, B, g, this.__hash)
                  : ((this.__ownerID = g), (this._map = m), (this._list = B), this);
              });
            function Ph(g) {
              return ru(g) && n(g);
            }
            (Ge.isOrderedMap = Ph), (Ge.prototype[f] = !0), (Ge.prototype[_] = Ge.prototype.remove);
            function cu(g, m, B, O) {
              var A = Object.create(Ge.prototype);
              return (
                (A.size = g ? g.size : 0),
                (A._map = g),
                (A._list = m),
                (A.__ownerID = B),
                (A.__hash = O),
                A
              );
            }
            var Ih;
            function Zi() {
              return Ih || (Ih = cu(kt(), uu()));
            }
            function mh(g, m, B) {
              var O = g._map,
                A = g._list,
                k = O.get(m),
                w = k !== void 0,
                H,
                K;
              if (B === b) {
                if (!w) return g;
                A.size >= P && A.size >= O.size * 2
                  ? ((K = A.filter(function (Y, Z) {
                      return Y !== void 0 && k !== Z;
                    })),
                    (H = K.toKeyedSeq()
                      .map(function (Y) {
                        return Y[0];
                      })
                      .flip()
                      .toMap()),
                    g.__ownerID && (H.__ownerID = K.__ownerID = g.__ownerID))
                  : ((H = O.remove(m)), (K = k === A.size - 1 ? A.pop() : A.set(k, void 0)));
              } else if (w) {
                if (B === A.get(k)[1]) return g;
                (H = O), (K = A.set(k, [m, B]));
              } else (H = O.set(m, A.size)), (K = A.set(A.size, [m, B]));
              return g.__ownerID
                ? ((g.size = H.size), (g._map = H), (g._list = K), (g.__hash = void 0), g)
                : cu(H, K);
            }
            p(bt, X);
            function bt(g, m) {
              (this._iter = g), (this._useKeys = m), (this.size = g.size);
            }
            (bt.prototype.get = function (g, m) {
              return this._iter.get(g, m);
            }),
              (bt.prototype.has = function (g) {
                return this._iter.has(g);
              }),
              (bt.prototype.valueSeq = function () {
                return this._iter.valueSeq();
              }),
              (bt.prototype.reverse = function () {
                var g = this,
                  m = du(this, !0);
                return (
                  this._useKeys ||
                    (m.valueSeq = function () {
                      return g._iter.toSeq().reverse();
                    }),
                  m
                );
              }),
              (bt.prototype.map = function (g, m) {
                var B = this,
                  O = Eh(this, g, m);
                return (
                  this._useKeys ||
                    (O.valueSeq = function () {
                      return B._iter.toSeq().map(g, m);
                    }),
                  O
                );
              }),
              (bt.prototype.__iterate = function (g, m) {
                var B = this,
                  O;
                return this._iter.__iterate(
                  this._useKeys
                    ? function (A, k) {
                        return g(A, k, B);
                      }
                    : ((O = m ? Fh(this) : 0),
                      function (A) {
                        return g(A, m ? --O : O++, B);
                      }),
                  m
                );
              }),
              (bt.prototype.__iterator = function (g, m) {
                if (this._useKeys) return this._iter.__iterator(g, m);
                var B = this._iter.__iterator(U, m),
                  O = m ? Fh(this) : 0;
                return new ae(function () {
                  var A = B.next();
                  return A.done ? A : ue(g, m ? --O : O++, A.value, A);
                });
              }),
              (bt.prototype[f] = !0),
              p(vn, ie);
            function vn(g) {
              (this._iter = g), (this.size = g.size);
            }
            (vn.prototype.includes = function (g) {
              return this._iter.includes(g);
            }),
              (vn.prototype.__iterate = function (g, m) {
                var B = this,
                  O = 0;
                return this._iter.__iterate(function (A) {
                  return g(A, O++, B);
                }, m);
              }),
              (vn.prototype.__iterator = function (g, m) {
                var B = this._iter.__iterator(U, m),
                  O = 0;
                return new ae(function () {
                  var A = B.next();
                  return A.done ? A : ue(g, O++, A.value, A);
                });
              }),
              p(gn, ve);
            function gn(g) {
              (this._iter = g), (this.size = g.size);
            }
            (gn.prototype.has = function (g) {
              return this._iter.includes(g);
            }),
              (gn.prototype.__iterate = function (g, m) {
                var B = this;
                return this._iter.__iterate(function (O) {
                  return g(O, O, B);
                }, m);
              }),
              (gn.prototype.__iterator = function (g, m) {
                var B = this._iter.__iterator(U, m);
                return new ae(function () {
                  var O = B.next();
                  return O.done ? O : ue(g, O.value, O.value, O);
                });
              }),
              p(_n, X);
            function _n(g) {
              (this._iter = g), (this.size = g.size);
            }
            (_n.prototype.entrySeq = function () {
              return this._iter.toSeq();
            }),
              (_n.prototype.__iterate = function (g, m) {
                var B = this;
                return this._iter.__iterate(function (O) {
                  if (O) {
                    Rh(O);
                    var A = u(O);
                    return g(A ? O.get(1) : O[1], A ? O.get(0) : O[0], B);
                  }
                }, m);
              }),
              (_n.prototype.__iterator = function (g, m) {
                var B = this._iter.__iterator(U, m);
                return new ae(function () {
                  for (;;) {
                    var O = B.next();
                    if (O.done) return O;
                    var A = O.value;
                    if (A) {
                      Rh(A);
                      var k = u(A);
                      return ue(g, k ? A.get(0) : A[0], k ? A.get(1) : A[1], O);
                    }
                  }
                });
              }),
              (vn.prototype.cacheResult =
                bt.prototype.cacheResult =
                gn.prototype.cacheResult =
                _n.prototype.cacheResult =
                  hu);
            function bh(g) {
              var m = Mt(g);
              return (
                (m._iter = g),
                (m.size = g.size),
                (m.flip = function () {
                  return g;
                }),
                (m.reverse = function () {
                  var B = g.reverse.apply(this);
                  return (
                    (B.flip = function () {
                      return g.reverse();
                    }),
                    B
                  );
                }),
                (m.has = function (B) {
                  return g.includes(B);
                }),
                (m.includes = function (B) {
                  return g.has(B);
                }),
                (m.cacheResult = hu),
                (m.__iterateUncached = function (B, O) {
                  var A = this;
                  return g.__iterate(function (k, w) {
                    return B(w, k, A) !== !1;
                  }, O);
                }),
                (m.__iteratorUncached = function (B, O) {
                  if (B === j) {
                    var A = g.__iterator(B, O);
                    return new ae(function () {
                      var k = A.next();
                      if (!k.done) {
                        var w = k.value[0];
                        (k.value[0] = k.value[1]), (k.value[1] = w);
                      }
                      return k;
                    });
                  }
                  return g.__iterator(B === U ? V : U, O);
                }),
                m
              );
            }
            function Eh(g, m, B) {
              var O = Mt(g);
              return (
                (O.size = g.size),
                (O.has = function (A) {
                  return g.has(A);
                }),
                (O.get = function (A, k) {
                  var w = g.get(A, b);
                  return w === b ? k : m.call(B, w, A, g);
                }),
                (O.__iterateUncached = function (A, k) {
                  var w = this;
                  return g.__iterate(function (H, K, Y) {
                    return A(m.call(B, H, K, Y), K, w) !== !1;
                  }, k);
                }),
                (O.__iteratorUncached = function (A, k) {
                  var w = g.__iterator(j, k);
                  return new ae(function () {
                    var H = w.next();
                    if (H.done) return H;
                    var K = H.value,
                      Y = K[0];
                    return ue(A, Y, m.call(B, K[1], Y, g), H);
                  });
                }),
                O
              );
            }
            function du(g, m) {
              var B = Mt(g);
              return (
                (B._iter = g),
                (B.size = g.size),
                (B.reverse = function () {
                  return g;
                }),
                g.flip &&
                  (B.flip = function () {
                    var O = bh(g);
                    return (
                      (O.reverse = function () {
                        return g.flip();
                      }),
                      O
                    );
                  }),
                (B.get = function (O, A) {
                  return g.get(m ? O : -1 - O, A);
                }),
                (B.has = function (O) {
                  return g.has(m ? O : -1 - O);
                }),
                (B.includes = function (O) {
                  return g.includes(O);
                }),
                (B.cacheResult = hu),
                (B.__iterate = function (O, A) {
                  var k = this;
                  return g.__iterate(function (w, H) {
                    return O(w, H, k);
                  }, !A);
                }),
                (B.__iterator = function (O, A) {
                  return g.__iterator(O, !A);
                }),
                B
              );
            }
            function Bh(g, m, B, O) {
              var A = Mt(g);
              return (
                O &&
                  ((A.has = function (k) {
                    var w = g.get(k, b);
                    return w !== b && !!m.call(B, w, k, g);
                  }),
                  (A.get = function (k, w) {
                    var H = g.get(k, b);
                    return H !== b && m.call(B, H, k, g) ? H : w;
                  })),
                (A.__iterateUncached = function (k, w) {
                  var H = this,
                    K = 0;
                  return (
                    g.__iterate(function (Y, Z, ne) {
                      if (m.call(B, Y, Z, ne)) return K++, k(Y, O ? Z : K - 1, H);
                    }, w),
                    K
                  );
                }),
                (A.__iteratorUncached = function (k, w) {
                  var H = g.__iterator(j, w),
                    K = 0;
                  return new ae(function () {
                    for (;;) {
                      var Y = H.next();
                      if (Y.done) return Y;
                      var Z = Y.value,
                        ne = Z[0],
                        oe = Z[1];
                      if (m.call(B, oe, ne, g)) return ue(k, O ? ne : K++, oe, Y);
                    }
                  });
                }),
                A
              );
            }
            function P_(g, m, B) {
              var O = Pe().asMutable();
              return (
                g.__iterate(function (A, k) {
                  O.update(m.call(B, A, k, g), 0, function (w) {
                    return w + 1;
                  });
                }),
                O.asImmutable()
              );
            }
            function I_(g, m, B) {
              var O = y(g),
                A = (n(g) ? Ge() : Pe()).asMutable();
              g.__iterate(function (w, H) {
                A.update(m.call(B, w, H, g), function (K) {
                  return (K = K || []), K.push(O ? [H, w] : w), K;
                });
              });
              var k = kh(g);
              return A.map(function (w) {
                return Te(g, k(w));
              });
            }
            function fu(g, m, B, O) {
              var A = g.size;
              if (
                (m !== void 0 && (m = m | 0),
                B !== void 0 && (B === 1 / 0 ? (B = A) : (B = B | 0)),
                D(m, B, A))
              )
                return g;
              var k = $(m, A),
                w = z(B, A);
              if (k !== k || w !== w) return fu(g.toSeq().cacheResult(), m, B, O);
              var H = w - k,
                K;
              H === H && (K = H < 0 ? 0 : H);
              var Y = Mt(g);
              return (
                (Y.size = K === 0 ? K : (g.size && K) || void 0),
                !O &&
                  Rt(g) &&
                  K >= 0 &&
                  (Y.get = function (Z, ne) {
                    return (Z = M(this, Z)), Z >= 0 && Z < K ? g.get(Z + k, ne) : ne;
                  }),
                (Y.__iterateUncached = function (Z, ne) {
                  var oe = this;
                  if (K === 0) return 0;
                  if (ne) return this.cacheResult().__iterate(Z, ne);
                  var he = 0,
                    ge = !0,
                    ke = 0;
                  return (
                    g.__iterate(function (wt, Dt) {
                      if (!(ge && (ge = he++ < k)))
                        return ke++, Z(wt, O ? Dt : ke - 1, oe) !== !1 && ke !== K;
                    }),
                    ke
                  );
                }),
                (Y.__iteratorUncached = function (Z, ne) {
                  if (K !== 0 && ne) return this.cacheResult().__iterator(Z, ne);
                  var oe = K !== 0 && g.__iterator(Z, ne),
                    he = 0,
                    ge = 0;
                  return new ae(function () {
                    for (; he++ < k; ) oe.next();
                    if (++ge > K) return pe();
                    var ke = oe.next();
                    return O || Z === U
                      ? ke
                      : Z === V
                        ? ue(Z, ge - 1, void 0, ke)
                        : ue(Z, ge - 1, ke.value[1], ke);
                  });
                }),
                Y
              );
            }
            function m_(g, m, B) {
              var O = Mt(g);
              return (
                (O.__iterateUncached = function (A, k) {
                  var w = this;
                  if (k) return this.cacheResult().__iterate(A, k);
                  var H = 0;
                  return (
                    g.__iterate(function (K, Y, Z) {
                      return m.call(B, K, Y, Z) && ++H && A(K, Y, w);
                    }),
                    H
                  );
                }),
                (O.__iteratorUncached = function (A, k) {
                  var w = this;
                  if (k) return this.cacheResult().__iterator(A, k);
                  var H = g.__iterator(j, k),
                    K = !0;
                  return new ae(function () {
                    if (!K) return pe();
                    var Y = H.next();
                    if (Y.done) return Y;
                    var Z = Y.value,
                      ne = Z[0],
                      oe = Z[1];
                    return m.call(B, oe, ne, w)
                      ? A === j
                        ? Y
                        : ue(A, ne, oe, Y)
                      : ((K = !1), pe());
                  });
                }),
                O
              );
            }
            function Th(g, m, B, O) {
              var A = Mt(g);
              return (
                (A.__iterateUncached = function (k, w) {
                  var H = this;
                  if (w) return this.cacheResult().__iterate(k, w);
                  var K = !0,
                    Y = 0;
                  return (
                    g.__iterate(function (Z, ne, oe) {
                      if (!(K && (K = m.call(B, Z, ne, oe)))) return Y++, k(Z, O ? ne : Y - 1, H);
                    }),
                    Y
                  );
                }),
                (A.__iteratorUncached = function (k, w) {
                  var H = this;
                  if (w) return this.cacheResult().__iterator(k, w);
                  var K = g.__iterator(j, w),
                    Y = !0,
                    Z = 0;
                  return new ae(function () {
                    var ne, oe, he;
                    do {
                      if (((ne = K.next()), ne.done))
                        return O || k === U
                          ? ne
                          : k === V
                            ? ue(k, Z++, void 0, ne)
                            : ue(k, Z++, ne.value[1], ne);
                      var ge = ne.value;
                      (oe = ge[0]), (he = ge[1]), Y && (Y = m.call(B, he, oe, H));
                    } while (Y);
                    return k === j ? ne : ue(k, oe, he, ne);
                  });
                }),
                A
              );
            }
            function b_(g, m) {
              var B = y(g),
                O = [g]
                  .concat(m)
                  .map(function (w) {
                    return (
                      u(w) ? B && (w = h(w)) : (w = B ? cn(w) : dn(Array.isArray(w) ? w : [w])), w
                    );
                  })
                  .filter(function (w) {
                    return w.size !== 0;
                  });
              if (O.length === 0) return g;
              if (O.length === 1) {
                var A = O[0];
                if (A === g || (B && y(A)) || (o(g) && o(A))) return A;
              }
              var k = new Be(O);
              return (
                B ? (k = k.toKeyedSeq()) : o(g) || (k = k.toSetSeq()),
                (k = k.flatten(!0)),
                (k.size = O.reduce(function (w, H) {
                  if (w !== void 0) {
                    var K = H.size;
                    if (K !== void 0) return w + K;
                  }
                }, 0)),
                k
              );
            }
            function Oh(g, m, B) {
              var O = Mt(g);
              return (
                (O.__iterateUncached = function (A, k) {
                  var w = 0,
                    H = !1;
                  function K(Y, Z) {
                    var ne = this;
                    Y.__iterate(function (oe, he) {
                      return (
                        (!m || Z < m) && u(oe)
                          ? K(oe, Z + 1)
                          : A(oe, B ? he : w++, ne) === !1 && (H = !0),
                        !H
                      );
                    }, k);
                  }
                  return K(g, 0), w;
                }),
                (O.__iteratorUncached = function (A, k) {
                  var w = g.__iterator(A, k),
                    H = [],
                    K = 0;
                  return new ae(function () {
                    for (; w; ) {
                      var Y = w.next();
                      if (Y.done !== !1) {
                        w = H.pop();
                        continue;
                      }
                      var Z = Y.value;
                      if ((A === j && (Z = Z[1]), (!m || H.length < m) && u(Z)))
                        H.push(w), (w = Z.__iterator(A, k));
                      else return B ? Y : ue(A, K++, Z, Y);
                    }
                    return pe();
                  });
                }),
                O
              );
            }
            function E_(g, m, B) {
              var O = kh(g);
              return g
                .toSeq()
                .map(function (A, k) {
                  return O(m.call(B, A, k, g));
                })
                .flatten(!0);
            }
            function B_(g, m) {
              var B = Mt(g);
              return (
                (B.size = g.size && g.size * 2 - 1),
                (B.__iterateUncached = function (O, A) {
                  var k = this,
                    w = 0;
                  return (
                    g.__iterate(function (H, K) {
                      return (!w || O(m, w++, k) !== !1) && O(H, w++, k) !== !1;
                    }, A),
                    w
                  );
                }),
                (B.__iteratorUncached = function (O, A) {
                  var k = g.__iterator(U, A),
                    w = 0,
                    H;
                  return new ae(function () {
                    return (!H || w % 2) && ((H = k.next()), H.done)
                      ? H
                      : w % 2
                        ? ue(O, w++, m)
                        : ue(O, w++, H.value, H);
                  });
                }),
                B
              );
            }
            function Sn(g, m, B) {
              m || (m = wh);
              var O = y(g),
                A = 0,
                k = g
                  .toSeq()
                  .map(function (w, H) {
                    return [H, w, A++, B ? B(w, H, g) : w];
                  })
                  .toArray();
              return (
                k
                  .sort(function (w, H) {
                    return m(w[3], H[3]) || w[2] - H[2];
                  })
                  .forEach(
                    O
                      ? function (w, H) {
                          k[H].length = 2;
                        }
                      : function (w, H) {
                          k[H] = w[1];
                        }
                  ),
                O ? X(k) : o(g) ? ie(k) : ve(k)
              );
            }
            function es(g, m, B) {
              if ((m || (m = wh), B)) {
                var O = g
                  .toSeq()
                  .map(function (A, k) {
                    return [A, B(A, k, g)];
                  })
                  .reduce(function (A, k) {
                    return Ah(m, A[1], k[1]) ? k : A;
                  });
                return O && O[0];
              } else
                return g.reduce(function (A, k) {
                  return Ah(m, A, k) ? k : A;
                });
            }
            function Ah(g, m, B) {
              var O = g(B, m);
              return (O === 0 && B !== m && (B == null || B !== B)) || O > 0;
            }
            function pu(g, m, B) {
              var O = Mt(g);
              return (
                (O.size = new Be(B)
                  .map(function (A) {
                    return A.size;
                  })
                  .min()),
                (O.__iterate = function (A, k) {
                  for (
                    var w = this.__iterator(U, k), H, K = 0;
                    !(H = w.next()).done && A(H.value, K++, this) !== !1;

                  );
                  return K;
                }),
                (O.__iteratorUncached = function (A, k) {
                  var w = B.map(function (Y) {
                      return (Y = v(Y)), te(k ? Y.reverse() : Y);
                    }),
                    H = 0,
                    K = !1;
                  return new ae(function () {
                    var Y;
                    return (
                      K ||
                        ((Y = w.map(function (Z) {
                          return Z.next();
                        })),
                        (K = Y.some(function (Z) {
                          return Z.done;
                        }))),
                      K
                        ? pe()
                        : ue(
                            A,
                            H++,
                            m.apply(
                              null,
                              Y.map(function (Z) {
                                return Z.value;
                              })
                            )
                          )
                    );
                  });
                }),
                O
              );
            }
            function Te(g, m) {
              return Rt(g) ? m : g.constructor(m);
            }
            function Rh(g) {
              if (g !== Object(g)) throw new TypeError('Expected [K, V] tuple: ' + g);
            }
            function Fh(g) {
              return vt(g.size), N(g);
            }
            function kh(g) {
              return y(g) ? h : o(g) ? s : l;
            }
            function Mt(g) {
              return Object.create((y(g) ? X : o(g) ? ie : ve).prototype);
            }
            function hu() {
              return this._iter.cacheResult
                ? (this._iter.cacheResult(), (this.size = this._iter.size), this)
                : G.prototype.cacheResult.call(this);
            }
            function wh(g, m) {
              return g > m ? 1 : g < m ? -1 : 0;
            }
            function Ch(g) {
              var m = te(g);
              if (!m) {
                if (!C(g)) throw new TypeError('Expected iterable or array-like: ' + g);
                m = te(v(g));
              }
              return m;
            }
            p(gt, oi);
            function gt(g, m) {
              var B,
                O = function (w) {
                  if (w instanceof O) return w;
                  if (!(this instanceof O)) return new O(w);
                  if (!B) {
                    B = !0;
                    var H = Object.keys(g);
                    T_(A, H),
                      (A.size = H.length),
                      (A._name = m),
                      (A._keys = H),
                      (A._defaultValues = g);
                  }
                  this._map = Pe(w);
                },
                A = (O.prototype = Object.create(Ve));
              return (A.constructor = O), O;
            }
            (gt.prototype.toString = function () {
              return this.__toString(Mh(this) + ' {', '}');
            }),
              (gt.prototype.has = function (g) {
                return this._defaultValues.hasOwnProperty(g);
              }),
              (gt.prototype.get = function (g, m) {
                if (!this.has(g)) return m;
                var B = this._defaultValues[g];
                return this._map ? this._map.get(g, B) : B;
              }),
              (gt.prototype.clear = function () {
                if (this.__ownerID) return this._map && this._map.clear(), this;
                var g = this.constructor;
                return g._empty || (g._empty = ts(this, kt()));
              }),
              (gt.prototype.set = function (g, m) {
                if (!this.has(g))
                  throw new Error('Cannot set unknown key "' + g + '" on ' + Mh(this));
                if (this._map && !this._map.has(g)) {
                  var B = this._defaultValues[g];
                  if (m === B) return this;
                }
                var O = this._map && this._map.set(g, m);
                return this.__ownerID || O === this._map ? this : ts(this, O);
              }),
              (gt.prototype.remove = function (g) {
                if (!this.has(g)) return this;
                var m = this._map && this._map.remove(g);
                return this.__ownerID || m === this._map ? this : ts(this, m);
              }),
              (gt.prototype.wasAltered = function () {
                return this._map.wasAltered();
              }),
              (gt.prototype.__iterator = function (g, m) {
                var B = this;
                return h(this._defaultValues)
                  .map(function (O, A) {
                    return B.get(A);
                  })
                  .__iterator(g, m);
              }),
              (gt.prototype.__iterate = function (g, m) {
                var B = this;
                return h(this._defaultValues)
                  .map(function (O, A) {
                    return B.get(A);
                  })
                  .__iterate(g, m);
              }),
              (gt.prototype.__ensureOwner = function (g) {
                if (g === this.__ownerID) return this;
                var m = this._map && this._map.__ensureOwner(g);
                return g ? ts(this, m, g) : ((this.__ownerID = g), (this._map = m), this);
              });
            var Ve = gt.prototype;
            (Ve[_] = Ve.remove),
              (Ve.deleteIn = Ve.removeIn = _e.removeIn),
              (Ve.merge = _e.merge),
              (Ve.mergeWith = _e.mergeWith),
              (Ve.mergeIn = _e.mergeIn),
              (Ve.mergeDeep = _e.mergeDeep),
              (Ve.mergeDeepWith = _e.mergeDeepWith),
              (Ve.mergeDeepIn = _e.mergeDeepIn),
              (Ve.setIn = _e.setIn),
              (Ve.update = _e.update),
              (Ve.updateIn = _e.updateIn),
              (Ve.withMutations = _e.withMutations),
              (Ve.asMutable = _e.asMutable),
              (Ve.asImmutable = _e.asImmutable);
            function ts(g, m, B) {
              var O = Object.create(Object.getPrototypeOf(g));
              return (O._map = m), (O.__ownerID = B), O;
            }
            function Mh(g) {
              return g._name || g.constructor.name || 'Record';
            }
            function T_(g, m) {
              try {
                m.forEach(O_.bind(void 0, g));
              } catch {}
            }
            function O_(g, m) {
              Object.defineProperty(g, m, {
                get: function () {
                  return this.get(m);
                },
                set: function (B) {
                  Ji(this.__ownerID, 'Cannot set on an immutable record.'), this.set(m, B);
                },
              });
            }
            p(Fe, Yi);
            function Fe(g) {
              return g == null
                ? gu()
                : yu(g) && !n(g)
                  ? g
                  : gu().withMutations(function (m) {
                      var B = l(g);
                      vt(B.size),
                        B.forEach(function (O) {
                          return m.add(O);
                        });
                    });
            }
            (Fe.of = function () {
              return this(arguments);
            }),
              (Fe.fromKeys = function (g) {
                return this(h(g).keySeq());
              }),
              (Fe.prototype.toString = function () {
                return this.__toString('Set {', '}');
              }),
              (Fe.prototype.has = function (g) {
                return this._map.has(g);
              }),
              (Fe.prototype.add = function (g) {
                return vu(this, this._map.set(g, !0));
              }),
              (Fe.prototype.remove = function (g) {
                return vu(this, this._map.remove(g));
              }),
              (Fe.prototype.clear = function () {
                return vu(this, this._map.clear());
              }),
              (Fe.prototype.union = function () {
                var g = r.call(arguments, 0);
                return (
                  (g = g.filter(function (m) {
                    return m.size !== 0;
                  })),
                  g.length === 0
                    ? this
                    : this.size === 0 && !this.__ownerID && g.length === 1
                      ? this.constructor(g[0])
                      : this.withMutations(function (m) {
                          for (var B = 0; B < g.length; B++)
                            l(g[B]).forEach(function (O) {
                              return m.add(O);
                            });
                        })
                );
              }),
              (Fe.prototype.intersect = function () {
                var g = r.call(arguments, 0);
                if (g.length === 0) return this;
                g = g.map(function (B) {
                  return l(B);
                });
                var m = this;
                return this.withMutations(function (B) {
                  m.forEach(function (O) {
                    g.every(function (A) {
                      return A.includes(O);
                    }) || B.remove(O);
                  });
                });
              }),
              (Fe.prototype.subtract = function () {
                var g = r.call(arguments, 0);
                if (g.length === 0) return this;
                g = g.map(function (B) {
                  return l(B);
                });
                var m = this;
                return this.withMutations(function (B) {
                  m.forEach(function (O) {
                    g.some(function (A) {
                      return A.includes(O);
                    }) && B.remove(O);
                  });
                });
              }),
              (Fe.prototype.merge = function () {
                return this.union.apply(this, arguments);
              }),
              (Fe.prototype.mergeWith = function (g) {
                var m = r.call(arguments, 1);
                return this.union.apply(this, m);
              }),
              (Fe.prototype.sort = function (g) {
                return xt(Sn(this, g));
              }),
              (Fe.prototype.sortBy = function (g, m) {
                return xt(Sn(this, m, g));
              }),
              (Fe.prototype.wasAltered = function () {
                return this._map.wasAltered();
              }),
              (Fe.prototype.__iterate = function (g, m) {
                var B = this;
                return this._map.__iterate(function (O, A) {
                  return g(A, A, B);
                }, m);
              }),
              (Fe.prototype.__iterator = function (g, m) {
                return this._map
                  .map(function (B, O) {
                    return O;
                  })
                  .__iterator(g, m);
              }),
              (Fe.prototype.__ensureOwner = function (g) {
                if (g === this.__ownerID) return this;
                var m = this._map.__ensureOwner(g);
                return g ? this.__make(m, g) : ((this.__ownerID = g), (this._map = m), this);
              });
            function yu(g) {
              return !!(g && g[xh]);
            }
            Fe.isSet = yu;
            var xh = '@@__IMMUTABLE_SET__@@',
              _t = Fe.prototype;
            (_t[xh] = !0),
              (_t[_] = _t.remove),
              (_t.mergeDeep = _t.merge),
              (_t.mergeDeepWith = _t.mergeWith),
              (_t.withMutations = _e.withMutations),
              (_t.asMutable = _e.asMutable),
              (_t.asImmutable = _e.asImmutable),
              (_t.__empty = gu),
              (_t.__make = Lh);
            function vu(g, m) {
              return g.__ownerID
                ? ((g.size = m.size), (g._map = m), g)
                : m === g._map
                  ? g
                  : m.size === 0
                    ? g.__empty()
                    : g.__make(m);
            }
            function Lh(g, m) {
              var B = Object.create(_t);
              return (B.size = g ? g.size : 0), (B._map = g), (B.__ownerID = m), B;
            }
            var Dh;
            function gu() {
              return Dh || (Dh = Lh(kt()));
            }
            p(xt, Fe);
            function xt(g) {
              return g == null
                ? _u()
                : Gh(g)
                  ? g
                  : _u().withMutations(function (m) {
                      var B = l(g);
                      vt(B.size),
                        B.forEach(function (O) {
                          return m.add(O);
                        });
                    });
            }
            (xt.of = function () {
              return this(arguments);
            }),
              (xt.fromKeys = function (g) {
                return this(h(g).keySeq());
              }),
              (xt.prototype.toString = function () {
                return this.__toString('OrderedSet {', '}');
              });
            function Gh(g) {
              return yu(g) && n(g);
            }
            xt.isOrderedSet = Gh;
            var rs = xt.prototype;
            (rs[f] = !0), (rs.__empty = _u), (rs.__make = Hh);
            function Hh(g, m) {
              var B = Object.create(rs);
              return (B.size = g ? g.size : 0), (B._map = g), (B.__ownerID = m), B;
            }
            var Nh;
            function _u() {
              return Nh || (Nh = Hh(Zi()));
            }
            p(je, fn);
            function je(g) {
              return g == null ? Su() : jh(g) ? g : Su().unshiftAll(g);
            }
            (je.of = function () {
              return this(arguments);
            }),
              (je.prototype.toString = function () {
                return this.__toString('Stack [', ']');
              }),
              (je.prototype.get = function (g, m) {
                var B = this._head;
                for (g = M(this, g); B && g--; ) B = B.next;
                return B ? B.value : m;
              }),
              (je.prototype.peek = function () {
                return this._head && this._head.value;
              }),
              (je.prototype.push = function () {
                if (arguments.length === 0) return this;
                for (
                  var g = this.size + arguments.length, m = this._head, B = arguments.length - 1;
                  B >= 0;
                  B--
                )
                  m = { value: arguments[B], next: m };
                return this.__ownerID
                  ? ((this.size = g),
                    (this._head = m),
                    (this.__hash = void 0),
                    (this.__altered = !0),
                    this)
                  : hi(g, m);
              }),
              (je.prototype.pushAll = function (g) {
                if (((g = s(g)), g.size === 0)) return this;
                vt(g.size);
                var m = this.size,
                  B = this._head;
                return (
                  g.reverse().forEach(function (O) {
                    m++, (B = { value: O, next: B });
                  }),
                  this.__ownerID
                    ? ((this.size = m),
                      (this._head = B),
                      (this.__hash = void 0),
                      (this.__altered = !0),
                      this)
                    : hi(m, B)
                );
              }),
              (je.prototype.pop = function () {
                return this.slice(1);
              }),
              (je.prototype.unshift = function () {
                return this.push.apply(this, arguments);
              }),
              (je.prototype.unshiftAll = function (g) {
                return this.pushAll(g);
              }),
              (je.prototype.shift = function () {
                return this.pop.apply(this, arguments);
              }),
              (je.prototype.clear = function () {
                return this.size === 0
                  ? this
                  : this.__ownerID
                    ? ((this.size = 0),
                      (this._head = void 0),
                      (this.__hash = void 0),
                      (this.__altered = !0),
                      this)
                    : Su();
              }),
              (je.prototype.slice = function (g, m) {
                if (D(g, m, this.size)) return this;
                var B = $(g, this.size),
                  O = z(m, this.size);
                if (O !== this.size) return fn.prototype.slice.call(this, g, m);
                for (var A = this.size - B, k = this._head; B--; ) k = k.next;
                return this.__ownerID
                  ? ((this.size = A),
                    (this._head = k),
                    (this.__hash = void 0),
                    (this.__altered = !0),
                    this)
                  : hi(A, k);
              }),
              (je.prototype.__ensureOwner = function (g) {
                return g === this.__ownerID
                  ? this
                  : g
                    ? hi(this.size, this._head, g, this.__hash)
                    : ((this.__ownerID = g), (this.__altered = !1), this);
              }),
              (je.prototype.__iterate = function (g, m) {
                if (m) return this.reverse().__iterate(g);
                for (var B = 0, O = this._head; O && g(O.value, B++, this) !== !1; ) O = O.next;
                return B;
              }),
              (je.prototype.__iterator = function (g, m) {
                if (m) return this.reverse().__iterator(g);
                var B = 0,
                  O = this._head;
                return new ae(function () {
                  if (O) {
                    var A = O.value;
                    return (O = O.next), ue(g, B++, A);
                  }
                  return pe();
                });
              });
            function jh(g) {
              return !!(g && g[qh]);
            }
            je.isStack = jh;
            var qh = '@@__IMMUTABLE_STACK__@@',
              Pn = je.prototype;
            (Pn[qh] = !0),
              (Pn.withMutations = _e.withMutations),
              (Pn.asMutable = _e.asMutable),
              (Pn.asImmutable = _e.asImmutable),
              (Pn.wasAltered = _e.wasAltered);
            function hi(g, m, B, O) {
              var A = Object.create(Pn);
              return (
                (A.size = g),
                (A._head = m),
                (A.__ownerID = B),
                (A.__hash = O),
                (A.__altered = !1),
                A
              );
            }
            var Uh;
            function Su() {
              return Uh || (Uh = hi(0));
            }
            function Lt(g, m) {
              var B = function (O) {
                g.prototype[O] = m[O];
              };
              return (
                Object.keys(m).forEach(B),
                Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(m).forEach(B),
                g
              );
            }
            (v.Iterator = ae),
              Lt(v, {
                toArray: function () {
                  vt(this.size);
                  var g = new Array(this.size || 0);
                  return (
                    this.valueSeq().__iterate(function (m, B) {
                      g[B] = m;
                    }),
                    g
                  );
                },
                toIndexedSeq: function () {
                  return new vn(this);
                },
                toJS: function () {
                  return this.toSeq()
                    .map(function (g) {
                      return g && typeof g.toJS == 'function' ? g.toJS() : g;
                    })
                    .__toJS();
                },
                toJSON: function () {
                  return this.toSeq()
                    .map(function (g) {
                      return g && typeof g.toJSON == 'function' ? g.toJSON() : g;
                    })
                    .__toJS();
                },
                toKeyedSeq: function () {
                  return new bt(this, !0);
                },
                toMap: function () {
                  return Pe(this.toKeyedSeq());
                },
                toObject: function () {
                  vt(this.size);
                  var g = {};
                  return (
                    this.__iterate(function (m, B) {
                      g[B] = m;
                    }),
                    g
                  );
                },
                toOrderedMap: function () {
                  return Ge(this.toKeyedSeq());
                },
                toOrderedSet: function () {
                  return xt(y(this) ? this.valueSeq() : this);
                },
                toSet: function () {
                  return Fe(y(this) ? this.valueSeq() : this);
                },
                toSetSeq: function () {
                  return new gn(this);
                },
                toSeq: function () {
                  return o(this)
                    ? this.toIndexedSeq()
                    : y(this)
                      ? this.toKeyedSeq()
                      : this.toSetSeq();
                },
                toStack: function () {
                  return je(y(this) ? this.valueSeq() : this);
                },
                toList: function () {
                  return Ae(y(this) ? this.valueSeq() : this);
                },
                toString: function () {
                  return '[Iterable]';
                },
                __toString: function (g, m) {
                  return this.size === 0
                    ? g + m
                    : g + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + m;
                },
                concat: function () {
                  var g = r.call(arguments, 0);
                  return Te(this, b_(this, g));
                },
                includes: function (g) {
                  return this.some(function (m) {
                    return Ne(m, g);
                  });
                },
                entries: function () {
                  return this.__iterator(j);
                },
                every: function (g, m) {
                  vt(this.size);
                  var B = !0;
                  return (
                    this.__iterate(function (O, A, k) {
                      if (!g.call(m, O, A, k)) return (B = !1), !1;
                    }),
                    B
                  );
                },
                filter: function (g, m) {
                  return Te(this, Bh(this, g, m, !0));
                },
                find: function (g, m, B) {
                  var O = this.findEntry(g, m);
                  return O ? O[1] : B;
                },
                forEach: function (g, m) {
                  return vt(this.size), this.__iterate(m ? g.bind(m) : g);
                },
                join: function (g) {
                  vt(this.size), (g = g !== void 0 ? '' + g : ',');
                  var m = '',
                    B = !0;
                  return (
                    this.__iterate(function (O) {
                      B ? (B = !1) : (m += g), (m += O != null ? O.toString() : '');
                    }),
                    m
                  );
                },
                keys: function () {
                  return this.__iterator(V);
                },
                map: function (g, m) {
                  return Te(this, Eh(this, g, m));
                },
                reduce: function (g, m, B) {
                  vt(this.size);
                  var O, A;
                  return (
                    arguments.length < 2 ? (A = !0) : (O = m),
                    this.__iterate(function (k, w, H) {
                      A ? ((A = !1), (O = k)) : (O = g.call(B, O, k, w, H));
                    }),
                    O
                  );
                },
                reduceRight: function (g, m, B) {
                  var O = this.toKeyedSeq().reverse();
                  return O.reduce.apply(O, arguments);
                },
                reverse: function () {
                  return Te(this, du(this, !0));
                },
                slice: function (g, m) {
                  return Te(this, fu(this, g, m, !0));
                },
                some: function (g, m) {
                  return !this.every(as(g), m);
                },
                sort: function (g) {
                  return Te(this, Sn(this, g));
                },
                values: function () {
                  return this.__iterator(U);
                },
                butLast: function () {
                  return this.slice(0, -1);
                },
                isEmpty: function () {
                  return this.size !== void 0
                    ? this.size === 0
                    : !this.some(function () {
                        return !0;
                      });
                },
                count: function (g, m) {
                  return N(g ? this.toSeq().filter(g, m) : this);
                },
                countBy: function (g, m) {
                  return P_(this, g, m);
                },
                equals: function (g) {
                  return zo(this, g);
                },
                entrySeq: function () {
                  var g = this;
                  if (g._cache) return new Be(g._cache);
                  var m = g.toSeq().map(R_).toIndexedSeq();
                  return (
                    (m.fromEntrySeq = function () {
                      return g.toSeq();
                    }),
                    m
                  );
                },
                filterNot: function (g, m) {
                  return this.filter(as(g), m);
                },
                findEntry: function (g, m, B) {
                  var O = B;
                  return (
                    this.__iterate(function (A, k, w) {
                      if (g.call(m, A, k, w)) return (O = [k, A]), !1;
                    }),
                    O
                  );
                },
                findKey: function (g, m) {
                  var B = this.findEntry(g, m);
                  return B && B[0];
                },
                findLast: function (g, m, B) {
                  return this.toKeyedSeq().reverse().find(g, m, B);
                },
                findLastEntry: function (g, m, B) {
                  return this.toKeyedSeq().reverse().findEntry(g, m, B);
                },
                findLastKey: function (g, m) {
                  return this.toKeyedSeq().reverse().findKey(g, m);
                },
                first: function () {
                  return this.find(J);
                },
                flatMap: function (g, m) {
                  return Te(this, E_(this, g, m));
                },
                flatten: function (g) {
                  return Te(this, Oh(this, g, !0));
                },
                fromEntrySeq: function () {
                  return new _n(this);
                },
                get: function (g, m) {
                  return this.find(
                    function (B, O) {
                      return Ne(O, g);
                    },
                    void 0,
                    m
                  );
                },
                getIn: function (g, m) {
                  for (var B = this, O = Ch(g), A; !(A = O.next()).done; ) {
                    var k = A.value;
                    if (((B = B && B.get ? B.get(k, b) : b), B === b)) return m;
                  }
                  return B;
                },
                groupBy: function (g, m) {
                  return I_(this, g, m);
                },
                has: function (g) {
                  return this.get(g, b) !== b;
                },
                hasIn: function (g) {
                  return this.getIn(g, b) !== b;
                },
                isSubset: function (g) {
                  return (
                    (g = typeof g.includes == 'function' ? g : v(g)),
                    this.every(function (m) {
                      return g.includes(m);
                    })
                  );
                },
                isSuperset: function (g) {
                  return (g = typeof g.isSubset == 'function' ? g : v(g)), g.isSubset(this);
                },
                keyOf: function (g) {
                  return this.findKey(function (m) {
                    return Ne(m, g);
                  });
                },
                keySeq: function () {
                  return this.toSeq().map(A_).toIndexedSeq();
                },
                last: function () {
                  return this.toSeq().reverse().first();
                },
                lastKeyOf: function (g) {
                  return this.toKeyedSeq().reverse().keyOf(g);
                },
                max: function (g) {
                  return es(this, g);
                },
                maxBy: function (g, m) {
                  return es(this, m, g);
                },
                min: function (g) {
                  return es(this, g ? Wh(g) : zh);
                },
                minBy: function (g, m) {
                  return es(this, m ? Wh(m) : zh, g);
                },
                rest: function () {
                  return this.slice(1);
                },
                skip: function (g) {
                  return this.slice(Math.max(0, g));
                },
                skipLast: function (g) {
                  return Te(this, this.toSeq().reverse().skip(g).reverse());
                },
                skipWhile: function (g, m) {
                  return Te(this, Th(this, g, m, !0));
                },
                skipUntil: function (g, m) {
                  return this.skipWhile(as(g), m);
                },
                sortBy: function (g, m) {
                  return Te(this, Sn(this, m, g));
                },
                take: function (g) {
                  return this.slice(0, Math.max(0, g));
                },
                takeLast: function (g) {
                  return Te(this, this.toSeq().reverse().take(g).reverse());
                },
                takeWhile: function (g, m) {
                  return Te(this, m_(this, g, m));
                },
                takeUntil: function (g, m) {
                  return this.takeWhile(as(g), m);
                },
                valueSeq: function () {
                  return this.toIndexedSeq();
                },
                hashCode: function () {
                  return this.__hash || (this.__hash = k_(this));
                },
              });
            var ot = v.prototype;
            (ot[e] = !0),
              (ot[ce] = ot.values),
              (ot.__toJS = ot.toArray),
              (ot.__toStringMapper = $h),
              (ot.inspect = ot.toSource =
                function () {
                  return this.toString();
                }),
              (ot.chain = ot.flatMap),
              (ot.contains = ot.includes),
              Lt(h, {
                flip: function () {
                  return Te(this, bh(this));
                },
                mapEntries: function (g, m) {
                  var B = this,
                    O = 0;
                  return Te(
                    this,
                    this.toSeq()
                      .map(function (A, k) {
                        return g.call(m, [k, A], O++, B);
                      })
                      .fromEntrySeq()
                  );
                },
                mapKeys: function (g, m) {
                  var B = this;
                  return Te(
                    this,
                    this.toSeq()
                      .flip()
                      .map(function (O, A) {
                        return g.call(m, O, A, B);
                      })
                      .flip()
                  );
                },
              });
            var ns = h.prototype;
            (ns[t] = !0),
              (ns[ce] = ot.entries),
              (ns.__toJS = ot.toObject),
              (ns.__toStringMapper = function (g, m) {
                return JSON.stringify(m) + ': ' + $h(g);
              }),
              Lt(s, {
                toKeyedSeq: function () {
                  return new bt(this, !1);
                },
                filter: function (g, m) {
                  return Te(this, Bh(this, g, m, !1));
                },
                findIndex: function (g, m) {
                  var B = this.findEntry(g, m);
                  return B ? B[0] : -1;
                },
                indexOf: function (g) {
                  var m = this.keyOf(g);
                  return m === void 0 ? -1 : m;
                },
                lastIndexOf: function (g) {
                  var m = this.lastKeyOf(g);
                  return m === void 0 ? -1 : m;
                },
                reverse: function () {
                  return Te(this, du(this, !1));
                },
                slice: function (g, m) {
                  return Te(this, fu(this, g, m, !1));
                },
                splice: function (g, m) {
                  var B = arguments.length;
                  if (((m = Math.max(m | 0, 0)), B === 0 || (B === 2 && !m))) return this;
                  g = $(g, g < 0 ? this.count() : this.size);
                  var O = this.slice(0, g);
                  return Te(this, B === 1 ? O : O.concat(x(arguments, 2), this.slice(g + m)));
                },
                findLastIndex: function (g, m) {
                  var B = this.findLastEntry(g, m);
                  return B ? B[0] : -1;
                },
                first: function () {
                  return this.get(0);
                },
                flatten: function (g) {
                  return Te(this, Oh(this, g, !1));
                },
                get: function (g, m) {
                  return (
                    (g = M(this, g)),
                    g < 0 || this.size === 1 / 0 || (this.size !== void 0 && g > this.size)
                      ? m
                      : this.find(
                          function (B, O) {
                            return O === g;
                          },
                          void 0,
                          m
                        )
                  );
                },
                has: function (g) {
                  return (
                    (g = M(this, g)),
                    g >= 0 &&
                      (this.size !== void 0
                        ? this.size === 1 / 0 || g < this.size
                        : this.indexOf(g) !== -1)
                  );
                },
                interpose: function (g) {
                  return Te(this, B_(this, g));
                },
                interleave: function () {
                  var g = [this].concat(x(arguments)),
                    m = pu(this.toSeq(), ie.of, g),
                    B = m.flatten(!0);
                  return m.size && (B.size = m.size * g.length), Te(this, B);
                },
                keySeq: function () {
                  return ze(0, this.size);
                },
                last: function () {
                  return this.get(-1);
                },
                skipWhile: function (g, m) {
                  return Te(this, Th(this, g, m, !1));
                },
                zip: function () {
                  var g = [this].concat(x(arguments));
                  return Te(this, pu(this, F_, g));
                },
                zipWith: function (g) {
                  var m = x(arguments);
                  return (m[0] = this), Te(this, pu(this, g, m));
                },
              }),
              (s.prototype[d] = !0),
              (s.prototype[f] = !0),
              Lt(l, {
                get: function (g, m) {
                  return this.has(g) ? g : m;
                },
                includes: function (g) {
                  return this.has(g);
                },
                keySeq: function () {
                  return this.valueSeq();
                },
              }),
              (l.prototype.has = ot.includes),
              (l.prototype.contains = l.prototype.includes),
              Lt(X, h.prototype),
              Lt(ie, s.prototype),
              Lt(ve, l.prototype),
              Lt(oi, h.prototype),
              Lt(fn, s.prototype),
              Lt(Yi, l.prototype);
            function A_(g, m) {
              return m;
            }
            function R_(g, m) {
              return [m, g];
            }
            function as(g) {
              return function () {
                return !g.apply(this, arguments);
              };
            }
            function Wh(g) {
              return function () {
                return -g.apply(this, arguments);
              };
            }
            function $h(g) {
              return typeof g == 'string' ? JSON.stringify(g) : String(g);
            }
            function F_() {
              return x(arguments);
            }
            function zh(g, m) {
              return g < m ? 1 : g > m ? -1 : 0;
            }
            function k_(g) {
              if (g.size === 1 / 0) return 0;
              var m = n(g),
                B = y(g),
                O = m ? 1 : 0,
                A = g.__iterate(
                  B
                    ? m
                      ? function (k, w) {
                          O = (31 * O + Vh(yt(k), yt(w))) | 0;
                        }
                      : function (k, w) {
                          O = (O + Vh(yt(k), yt(w))) | 0;
                        }
                    : m
                      ? function (k) {
                          O = (31 * O + yt(k)) | 0;
                        }
                      : function (k) {
                          O = (O + yt(k)) | 0;
                        }
                );
              return w_(A, O);
            }
            function w_(g, m) {
              return (
                (m = ui(m, 3432918353)),
                (m = ui((m << 15) | (m >>> -15), 461845907)),
                (m = ui((m << 13) | (m >>> -13), 5)),
                (m = ((m + 3864292196) | 0) ^ g),
                (m = ui(m ^ (m >>> 16), 2246822507)),
                (m = ui(m ^ (m >>> 13), 3266489909)),
                (m = Jo(m ^ (m >>> 16))),
                m
              );
            }
            function Vh(g, m) {
              return (g ^ (m + 2654435769 + (g << 6) + (g >> 2))) | 0;
            }
            var C_ = {
              Iterable: v,
              Seq: G,
              Collection: nr,
              Map: Pe,
              OrderedMap: Ge,
              List: Ae,
              Stack: je,
              Set: Fe,
              OrderedSet: xt,
              Record: gt,
              Range: ze,
              Repeat: tt,
              is: Ne,
              fromJS: ai,
            };
            return C_;
          });
        })(to)),
      to.exports
    );
  }
  var wn = {},
    Hc;
  function be() {
    if (Hc) return wn;
    (Hc = 1), Object.defineProperty(wn, '__esModule', { value: !0 }), (wn.ImmutableState = void 0);
    var i = (function () {
      function c(r) {
        (this.state = r), (this._size = 0);
      }
      return (
        Object.defineProperty(c.prototype, 'nextEventOffset', {
          get: function () {
            return this.get('nextEventOffset');
          },
          enumerable: !1,
          configurable: !0,
        }),
        (c.prototype.newInstance = function (r) {
          var p = this.constructor;
          return new p(r);
        }),
        (c.prototype.increment = function (r, p) {
          return p === 0
            ? this
            : this.newInstance(
                this.state.updateIn([r], function (v) {
                  return (v || 0) + p;
                })
              );
        }),
        (c.prototype.incrementIn = function (r, p) {
          return this.newInstance(
            this.state.updateIn(r, function (v) {
              return (v || 0) + p;
            })
          );
        }),
        (c.prototype.deepSetSize = function (r, p, v) {
          return (
            v === void 0 && (v = void 0),
            this.updateIn(r, function (h) {
              var s = h.size;
              return s === p
                ? h
                : s > p || v === void 0
                  ? h.setSize(p)
                  : h.withMutations(function (l) {
                      for (var u = 0; u < p - s; u++) l.push(v);
                    });
            })
          );
        }),
        Object.defineProperty(c.prototype, 'size', {
          get: function () {
            return this._size;
          },
          enumerable: !1,
          configurable: !0,
        }),
        (c.prototype.set = function (r, p) {
          return this.newInstance(this.state.set(r, p));
        }),
        (c.prototype.delete = function (r) {
          return this.newInstance(this.state.delete(r));
        }),
        (c.prototype.remove = function (r) {
          return this.newInstance(this.state.remove(r));
        }),
        (c.prototype.clear = function () {
          return this.newInstance(this.state.clear());
        }),
        (c.prototype.withMutations = function (r) {
          return this.newInstance(this.state.withMutations(r));
        }),
        (c.prototype.asMutable = function () {
          return this.newInstance(this.state.asMutable());
        }),
        (c.prototype.asImmutable = function () {
          return this.newInstance(this.state.asImmutable());
        }),
        (c.prototype.equals = function (r) {
          return this.state.equals(r);
        }),
        (c.prototype.hashCode = function () {
          return this.state.hashCode();
        }),
        (c.prototype.get = function (r, p) {
          return this.state.get(r);
        }),
        (c.prototype.has = function (r) {
          return this.state.has(r);
        }),
        (c.prototype.includes = function (r) {
          return this.state.includes(r);
        }),
        (c.prototype.contains = function (r) {
          return this.state.contains(r);
        }),
        (c.prototype.first = function () {
          return this.state.first();
        }),
        (c.prototype.last = function () {
          return this.state.last();
        }),
        (c.prototype.toJS = function () {
          return this.state.toJS();
        }),
        (c.prototype.toArray = function () {
          return this.state.toArray();
        }),
        (c.prototype.toObject = function () {
          return this.state.toObject();
        }),
        (c.prototype.toMap = function () {
          return this.state.toMap();
        }),
        (c.prototype.toOrderedMap = function () {
          return this.state.toOrderedMap();
        }),
        (c.prototype.toSet = function () {
          return this.state.toSet();
        }),
        (c.prototype.toOrderedSet = function () {
          return this.state.toOrderedSet();
        }),
        (c.prototype.toList = function () {
          return this.state.toList();
        }),
        (c.prototype.toStack = function () {
          return this.state.toStack();
        }),
        (c.prototype.toSeq = function () {
          return this.state.toSeq();
        }),
        (c.prototype.toKeyedSeq = function () {
          return this.state.toKeyedSeq();
        }),
        (c.prototype.toIndexedSeq = function () {
          return this.state.toIndexedSeq();
        }),
        (c.prototype.toSetSeq = function () {
          return this.state.toSetSeq();
        }),
        (c.prototype.keys = function () {
          return this.state.keys();
        }),
        (c.prototype.values = function () {
          return this.state.values();
        }),
        (c.prototype.entries = function () {
          return this.state.entries();
        }),
        (c.prototype.keySeq = function () {
          return this.state.keySeq();
        }),
        (c.prototype.valueSeq = function () {
          return this.state.valueSeq();
        }),
        (c.prototype.entrySeq = function () {
          return this.state.entrySeq();
        }),
        (c.prototype.map = function (r, p) {
          return this.state.map(r, p);
        }),
        (c.prototype.filter = function (r, p) {
          return this.state.filter(r, p);
        }),
        (c.prototype.filterNot = function (r, p) {
          return this.state.filterNot(r, p);
        }),
        (c.prototype.reverse = function () {
          return this.state.reverse();
        }),
        (c.prototype.sort = function (r) {
          return this.state.sort(r);
        }),
        (c.prototype.sortBy = function (r, p) {
          return this.state.sortBy(r, p);
        }),
        (c.prototype.groupBy = function (r, p) {
          return this.state.groupBy(r, p);
        }),
        (c.prototype.forEach = function (r, p) {
          return this.state.forEach(r, p);
        }),
        (c.prototype.slice = function (r, p) {
          return this.state.slice(r, p);
        }),
        (c.prototype.rest = function () {
          return this.rest();
        }),
        (c.prototype.butLast = function () {
          return this.state.butLast();
        }),
        (c.prototype.skip = function (r) {
          return this.state.skip(r);
        }),
        (c.prototype.skipLast = function (r) {
          return this.state.skipLast(r);
        }),
        (c.prototype.skipWhile = function (r, p) {
          return this.state.skipWhile(r, p);
        }),
        (c.prototype.skipUntil = function (r, p) {
          return this.state.skipUntil(r, p);
        }),
        (c.prototype.take = function (r) {
          return this.state.take(r);
        }),
        (c.prototype.takeLast = function (r) {
          return this.state.takeLast(r);
        }),
        (c.prototype.takeWhile = function (r, p) {
          return this.state.takeWhile(r, p);
        }),
        (c.prototype.takeUntil = function (r, p) {
          return this.state.takeUntil(r, p);
        }),
        (c.prototype.concat = function () {
          for (var r = [], p = 0; p < arguments.length; p++) r[p] = arguments[p];
          return this.state.concat(r);
        }),
        (c.prototype.flatten = function (r, p) {
          return r ? this.state.flatten(r) : this.state.flatten(p);
        }),
        (c.prototype.flatMap = function (r, p) {
          return this.state.flatMap(r, p);
        }),
        (c.prototype.reduce = function (r, p, v) {
          return this.state.reduce(r, p, v);
        }),
        (c.prototype.reduceRight = function (r, p, v) {
          return this.state.reduceRight(r, p, v);
        }),
        (c.prototype.every = function (r, p) {
          return this.state.every(r, p);
        }),
        (c.prototype.some = function (r, p) {
          return this.state.some(r, p);
        }),
        (c.prototype.join = function (r) {
          return this.state.join(r);
        }),
        (c.prototype.isEmpty = function () {
          return this.state.isEmpty();
        }),
        (c.prototype.count = function (r, p) {
          return this.state.count(r, p);
        }),
        (c.prototype.countBy = function (r, p) {
          return this.state.countBy(r, p);
        }),
        (c.prototype.find = function (r, p, v) {
          return this.state.find(r, p, v);
        }),
        (c.prototype.findLast = function (r, p, v) {
          return this.state.findLast(r, p, v);
        }),
        (c.prototype.findEntry = function (r, p, v) {
          return this.state.findEntry(r, p, v);
        }),
        (c.prototype.findLastEntry = function (r, p, v) {
          return this.state.findLastEntry(r, p, v);
        }),
        (c.prototype.findKey = function (r, p) {
          return this.state.findKey(r, p);
        }),
        (c.prototype.findLastKey = function (r, p) {
          return this.state.findLastKey(r, p);
        }),
        (c.prototype.keyOf = function (r) {
          return this.state.keyOf(r);
        }),
        (c.prototype.lastKeyOf = function (r) {
          return this.state.lastKeyOf(r);
        }),
        (c.prototype.max = function (r) {
          return this.state.max(r);
        }),
        (c.prototype.maxBy = function (r, p) {
          return this.state.maxBy(r, p);
        }),
        (c.prototype.min = function (r) {
          return this.state.min(r);
        }),
        (c.prototype.minBy = function (r, p) {
          return this.state.minBy(r, p);
        }),
        (c.prototype.isSubset = function (r) {
          return this.state.isSubset(r);
        }),
        (c.prototype.isSuperset = function (r) {
          return this.isSuperset(r);
        }),
        (c.prototype.hasIn = function (r) {
          return this.state.hasIn(r);
        }),
        (c.prototype.getIn = function (r, p) {
          return this.state.getIn(r, p);
        }),
        (c.prototype.update = function (r, p, v) {
          return this.newInstance(this.state.update(r, p, v));
        }),
        (c.prototype.merge = function (r) {
          return this.newInstance(this.state.merge(r));
        }),
        (c.prototype.mergeWith = function (r) {
          return this.newInstance(this.state.mergeWith(r));
        }),
        (c.prototype.mergeDeep = function (r) {
          return this.newInstance(this.state.mergeDeep(r));
        }),
        (c.prototype.mergeIn = function (r, p) {
          return this.newInstance(this.state.mergeIn(r, p));
        }),
        (c.prototype.mergeDeepWith = function (r) {
          return this.newInstance(this.state.mergeDeepWith(r));
        }),
        (c.prototype.mergeDeepIn = function (r, p) {
          return this.newInstance(this.state.mergeDeepIn(r, p));
        }),
        (c.prototype.setIn = function (r, p) {
          return this.newInstance(this.state.setIn(r, p));
        }),
        (c.prototype.deleteIn = function (r) {
          return this.newInstance(this.state.deleteIn(r));
        }),
        (c.prototype.removeIn = function (r) {
          return this.newInstance(this.state.removeIn(r));
        }),
        (c.prototype.updateIn = function (r, p, v) {
          return this.newInstance(this.state.updateIn(r, p, v));
        }),
        (c.prototype.flip = function () {
          return this.state.flip();
        }),
        (c.prototype.mapKeys = function (r, p) {
          return this.state.mapKeys(r, p);
        }),
        (c.prototype.mapEntries = function (r, p) {
          return this.state.mapEntries(r, p);
        }),
        c
      );
    })();
    return (wn.ImmutableState = i), wn;
  }
  var ye = {},
    Nc;
  function at() {
    if (Nc) return ye;
    (Nc = 1),
      Object.defineProperty(ye, '__esModule', { value: !0 }),
      (ye.codeForEvent =
        ye.isGroundOutResult =
        ye.isGroundType =
        ye.isSacrificeResult =
        ye.isError =
        ye.isHitResult =
        ye.isHit =
        ye.isStrike =
        ye.isBaseRunningEvent =
        ye.isEndAtBatEvent =
        ye.isHomeRunEvent =
        ye.isBallInPlayEvent =
        ye.isPitchEvent =
        ye.isUniquePosition =
        ye.isMultiPosition =
        ye.manualInningAdvance =
        ye.changesInning =
        ye.eventRelatesToAtBatTeam =
        ye.baserunningUnrelatedToLastBIP =
        ye.baserunningRelatedToLastBIP =
          void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(Pt());
    function p(T) {
      return (
        t(T) &&
        c.contains(
          ['advanced_on_last_play', 'remained_on_last_play', 'out_on_last_play', 'did_not_score'],
          T.attributes.playType
        )
      );
    }
    ye.baserunningRelatedToLastBIP = p;
    function v(T) {
      return t(T) && !p(T);
    }
    ye.baserunningUnrelatedToLastBIP = v;
    function h(T) {
      return c.contains(['pitch', 'ball_in_play', 'base_running', 'end_at_bat'], T.code);
    }
    ye.eventRelatesToAtBatTeam = h;
    function s(T) {
      return T.attributes.inning !== void 0 || T.attributes.half !== void 0;
    }
    ye.changesInning = s;
    function l(T) {
      return T.code === 'end_half' || (T.code === 'override' && s(T));
    }
    ye.manualInningAdvance = l;
    function u(T) {
      return c.contains([void 0, 'EH', 'DH'], T);
    }
    ye.isMultiPosition = u;
    function y(T) {
      return !u(T);
    }
    ye.isUniquePosition = y;
    function o(T) {
      return T.code === 'pitch';
    }
    ye.isPitchEvent = o;
    function a(T) {
      return T.code === 'ball_in_play';
    }
    ye.isBallInPlayEvent = a;
    function n(T) {
      return T.code === 'ball_in_play' && T.attributes.playResult === 'home_run';
    }
    ye.isHomeRunEvent = n;
    function e(T) {
      return T.code === 'end_at_bat';
    }
    ye.isEndAtBatEvent = e;
    function t(T) {
      return T.code === 'base_running';
    }
    ye.isBaseRunningEvent = t;
    function d(T) {
      var F = [
        'strike_looking',
        'strike_swinging',
        'ball_in_play',
        'foul',
        'foul_tip',
        'foul_bunt',
      ];
      return o(T) && c.contains(F, T.attributes.result);
    }
    ye.isStrike = d;
    function f(T) {
      return T.code === 'ball_in_play' && _(T.attributes.playResult);
    }
    ye.isHit = f;
    function _(T) {
      return c.contains(['single', 'double', 'triple', 'home_run'], T);
    }
    ye.isHitResult = _;
    function S(T) {
      return (T.code === 'ball_in_play' &&
        r.ballInPlayResultConfigs[T.attributes.playResult].error) ||
        (t(T) && r.baseRunningPlayTypeConfigs[T.attributes.playType].error) ||
        T.code === 'foul_error'
        ? !0
        : !!(e(T) && T.attributes.reason === 'catcher_interference');
    }
    ye.isError = S;
    function P(T) {
      return c.contains(
        ['sacrifice_bunt', 'sacrifice_fly', 'sacrifice_bunt_error', 'sacrifice_fly_error'],
        T
      );
    }
    ye.isSacrificeResult = P;
    function I(T) {
      return c.contains(['ground_ball', 'hard_ground_ball'], T);
    }
    ye.isGroundType = I;
    function b(T, F) {
      return (
        (I(T) && c.contains(['batter_out', 'batter_out_advance_runners'], F)) ||
        (T === 'bunt' && F === 'sacrifice_bunt')
      );
    }
    ye.isGroundOutResult = b;
    function E(T) {
      if (T !== void 0)
        return a(T) ? T.attributes.playResult : t(T) ? T.attributes.playType : T.code;
    }
    return (ye.codeForEvent = E), ye;
  }
  var jc;
  function Cy() {
    if (jc) return fr;
    (jc = 1),
      Object.defineProperty(fr, '__esModule', { value: !0 }),
      (fr.SituationEngine = fr.SituationState = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(de()),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = i.__importStar(Pt()),
      s = i.__importStar(at()),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'balls', {
            get: function () {
              return this.get('balls');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'strikes', {
            get: function () {
              return this.get('strikes');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'outs', {
            get: function () {
              return this.get('outs');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'resultingBalls', {
            get: function () {
              var a = this.get('resultingBalls');
              return a !== void 0 ? a : this.balls;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'resultingStrikes', {
            get: function () {
              var a = this.get('resultingStrikes');
              return a !== void 0 ? a : this.strikes;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'resultingOuts', {
            get: function () {
              var a = this.get('resultingOuts');
              return a !== void 0 ? a : this.outs;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'inning', {
            get: function () {
              return this.get('inning');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'half', {
            get: function () {
              return this.get('half');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'homeId', {
            get: function () {
              return this.get('homeId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'awayId', {
            get: function () {
              return this.get('awayId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'atBatTeamId', {
            get: function () {
              return this.half === 'top' ? this.awayId : this.homeId;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'inFieldTeamId', {
            get: function () {
              return this.half === 'top' ? this.homeId : this.awayId;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'pitchesThisInning', {
            get: function () {
              return this.get('pitchesThisInning');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'pitchesThisAtBat', {
            get: function () {
              return this.get('pitchesThisAtBat');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'lastPitchDetail', {
            get: function () {
              return this.get('lastPitchDetail');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'atBatIndex', {
            get: function () {
              return this.get('atBatIndex');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (o.prototype.pitchesThrownThisGame = function (a) {
            return this.getIn(['pitchesThrownThisGame', a]) || 0;
          }),
          Object.defineProperty(o.prototype, 'lastEventWasOut', {
            get: function () {
              return this.getIn(['lastEvent', 'wasOut']);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'lastEventEndedInning', {
            get: function () {
              return this.getIn(['lastEvent', 'endedInning']);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'lastEventWasStrikeout', {
            get: function () {
              return this.getIn(['lastEvent', 'strikeout']);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'lastEventWasWalk', {
            get: function () {
              return this.getIn(['lastEvent', 'walk']);
            },
            enumerable: !1,
            configurable: !0,
          }),
          (o.prototype.resetLastEventFlags = function () {
            return this.mergeIn(['lastEvent'], {
              walk: !1,
              strikeout: !1,
              endedInning: !1,
              wasOut: !1,
            });
          }),
          (o.prototype.resetResultingCount = function () {
            return this.merge({
              resultingBalls: void 0,
              resultingStrikes: void 0,
              resultingOuts: void 0,
            });
          }),
          o
        );
      })(v.ImmutableState);
    fr.SituationState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a) {
        var n = y.call(this, a) || this;
        return (n.baseEvents = a), n;
      }
      return (
        (o.prototype.processOneEvent = function (a, n) {
          switch (((a = a.resetLastEventFlags().resetResultingCount()), n.code)) {
            case 'pitch':
              a = this.handlePitch(a, n);
              break;
            case 'ball_in_play':
              a = this.handleBallInPlay(a, n);
              break;
            case 'foul_error':
              a = this.handleFoulError(a, n);
              break;
            case 'base_running':
              a = this.handleBaseRunning(a, n);
              break;
            case 'end_half':
              a = this.handleEndHalf(a);
              break;
            case 'override':
              a = this.handleOverride(a, n);
              break;
            case 'set_teams':
              return this.handleSetTeams(a, n);
            case 'end_at_bat':
              a = this.handleEndAtBat(a, n);
              break;
            case 'illegal_pitch_advance':
              a = this.handleIllegalPitchAdvance(a, n);
              break;
          }
          return this.reconcileSituation(a);
        }),
        (o.prototype.initialState = function () {
          return new l(
            r.fromJS({
              balls: 0,
              strikes: 0,
              outs: 0,
              resultingBalls: void 0,
              resultingStrikes: void 0,
              resultingOuts: void 0,
              inning: 1,
              half: 'top',
              homeId: '',
              awayId: '',
              pitchesThisInning: 0,
              pitchesThisAtBat: 0,
              atBatIndex: 0,
              pitchesThrownThisGame: {},
              lastPitchDetail: {},
              lastEvent: { endedInning: !1, strikeout: !1, walk: !1 },
            })
          );
        }),
        (o.prototype.reconcileSituation = function (a) {
          var n = function (e) {
            return e + 1;
          };
          return a.withMutations(function (e) {
            e.get('balls') >= 4 &&
              e
                .set('strikes', 0)
                .set('balls', 0)
                .set('resultingBalls', 4)
                .set('pitchesThisAtBat', 0)
                .update('atBatIndex', n)
                .setIn(['lastEvent', 'walk'], !0),
              e.get('strikes') >= 3 &&
                e
                  .set('strikes', 0)
                  .set('resultingStrikes', 3)
                  .set('balls', 0)
                  .set('outs', e.get('outs') + 1)
                  .set('pitchesThisAtBat', 0)
                  .update('atBatIndex', n)
                  .setIn(['lastEvent', 'strikeout'], !0)
                  .setIn(['lastEvent', 'wasOut'], !0),
              e.get('outs') >= 3 &&
                (e
                  .set('outs', 0)
                  .set('resultingOuts', 3)
                  .set('strikes', 0)
                  .set('balls', 0)
                  .set('pitchesThisAtBat', 0)
                  .update('atBatIndex', n)
                  .set('pitchesThisInning', 0)
                  .setIn(['lastEvent', 'endedInning'], !0),
                e.get('half') === 'top'
                  ? e.set('half', 'bottom')
                  : (e.set('inning', e.get('inning') + 1), e.set('half', 'top')));
          });
        }),
        (o.prototype.handleSetTeams = function (a, n) {
          return (a = a.set('homeId', n.attributes.homeId)), a.set('awayId', n.attributes.awayId);
        }),
        (o.prototype.forceIncrementResultingStrikes = function (a) {
          return (
            a.strikes === 2 && (a = a.set('resultingOuts', a.outs + 1)),
            a.set('resultingStrikes', a.strikes + 1)
          );
        }),
        (o.prototype.handlePitch = function (a, n) {
          (a = a.increment('pitchesThisInning', 1).increment('pitchesThisAtBat', 1)),
            (a = a.incrementIn(['pitchesThrownThisGame', a.inFieldTeamId], 1)),
            (a = a.set('lastPitchDetail', {
              speed: n.attributes.speed,
              style: n.attributes.style,
              speedProvider: n.attributes.speedProvider,
            }));
          var e = n.attributes.advancesCount !== !1;
          switch (n.attributes.result) {
            case 'ball':
            case 'intentional_ball':
            case 'illegal_pitch':
              return e ? a.increment('balls', 1) : a.set('resultingBalls', a.balls + 1);
            case 'strike_swinging':
            case 'strike_looking':
            case 'foul_bunt':
            case 'foul_tip':
              return e ? a.increment('strikes', 1) : this.forceIncrementResultingStrikes(a);
            case 'foul':
              return a.strikes !== 2
                ? e
                  ? a.increment('strikes', 1)
                  : this.forceIncrementResultingStrikes(a)
                : a;
            case 'ball_in_play':
              return a.set('balls', 0).set('strikes', 0);
          }
          return a;
        }),
        (o.prototype.handleBallInPlay = function (a, n) {
          return (
            (a = a
              .set('pitchesThisAtBat', 0)
              .increment('atBatIndex', 1)
              .set('strikes', 0)
              .set('balls', 0)),
            h.ballInPlayResultConfigs[n.attributes.playResult].batterOut &&
              (a = a.increment('outs', 1).setIn(['lastEvent', 'wasOut'], !0)),
            c.contains(
              ['dropped_third_strike', 'dropped_third_strike_batter_out'],
              n.attributes.playResult
            ) && (a = a.setIn(['lastEvent', 'strikeout'], !0)),
            a
          );
        }),
        (o.prototype.handleBaseRunning = function (a, n) {
          return h.baseRunningPlayTypeConfigs[n.attributes.playType].runnerOut
            ? a.increment('outs', 1).setIn(['lastEvent', 'wasOut'], !0)
            : a;
        }),
        (o.prototype.handleEndHalf = function (a) {
          return (
            (a = a
              .set('pitchesThisInning', 0)
              .set('pitchesThisAtBat', 0)
              .increment('atBatIndex', 1)
              .setIn(['lastEvent', 'endedInning'], !0)
              .set('outs', 0)
              .set('strikes', 0)
              .set('balls', 0)),
            a.half === 'top' ? a.set('half', 'bottom') : a.increment('inning', 1).set('half', 'top')
          );
        }),
        (o.prototype.handleOverride = function (a, n) {
          var e = n.attributes,
            t = e.inning,
            d = e.half,
            f = e.outs,
            _ = e.balls,
            S = e.strikes;
          return (
            s.changesInning(n) &&
              (a = a
                .setIn(['lastEvent', 'endedInning'], !0)
                .set('pitchesThisInning', 0)
                .set('pitchesThisAtBat', 0)
                .increment('atBatIndex', 1)),
            a.withMutations(function (P) {
              t !== void 0 && P.set('inning', t),
                d !== void 0 && P.set('half', d),
                f !== void 0 && P.set('outs', f),
                _ !== void 0 && P.set('balls', _),
                S !== void 0 && P.set('strikes', S);
            })
          );
        }),
        (o.prototype.handleEndAtBat = function (a, n) {
          return (
            (a = a
              .set('pitchesThisAtBat', 0)
              .increment('atBatIndex', 1)
              .set('balls', 0)
              .set('strikes', 0)),
            n.attributes.reason === 'walk'
              ? (a = a.setIn(['lastEvent', 'walk'], !0))
              : n.attributes.reason === 'strikeout' &&
                (a = a
                  .increment('outs', 1)
                  .setIn(['lastEvent', 'strikeout'], !0)
                  .setIn(['lastEvent', 'wasOut'], !0)),
            a
          );
        }),
        (o.prototype.handleIllegalPitchAdvance = function (a, n) {
          return (
            n.attributes && n.attributes.advancesCount === !0 && (a = a.increment('balls', 1)), a
          );
        }),
        (o.prototype.handleFoulError = function (a, n) {
          return (
            n.attributes.advancesCount === !0 &&
              (a = a.update('strikes', function (e) {
                return Math.min(e + 1, 2);
              })),
            a
          );
        }),
        o
      );
    })(p.VersionedStateEngine);
    return (fr.SituationEngine = u), fr;
  }
  var pr = {},
    Cn = {},
    qc;
  function Me() {
    if (qc) return Cn;
    (qc = 1), Object.defineProperty(Cn, '__esModule', { value: !0 }), (Cn.uuid4 = void 0);
    var i = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    function c() {
      return i.replace(/[xy]/g, function (r) {
        var p = (Math.random() * 16) | 0,
          v = r === 'x' ? p : (p & 3) | 8;
        return v.toString(16);
      });
    }
    return (Cn.uuid4 = c), Cn;
  }
  var Uc;
  function My() {
    if (Uc) return pr;
    (Uc = 1),
      Object.defineProperty(pr, '__esModule', { value: !0 }),
      (pr.LineupEngine = pr.LineupState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = at(),
      h = Me(),
      s = c.Record({ temporaryBatterId: '', advanceLineupIndexAfterAtBat: !0 }),
      l = (function (o) {
        i.__extends(a, o);
        function a() {
          return (o !== null && o.apply(this, arguments)) || this;
        }
        return a;
      })(s),
      u = (function (o) {
        i.__extends(a, o);
        function a() {
          return (o !== null && o.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(a.prototype, 'globalAtBatId', {
            get: function () {
              return this.get('globalAtBatId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (a.prototype.refreshAtBatGlobalId = function () {
            return this.set('globalAtBatId', (0, h.uuid4)());
          }),
          (a.prototype.getPlayerAtIndex = function (n, e) {
            return this.getIn([n, 'batters', e]);
          }),
          (a.prototype.numberOfBatters = function (n) {
            return this.getIn([n, 'batters']).size;
          }),
          (a.prototype.battersImmutable = function (n) {
            return this.getIn([n, 'batters']);
          }),
          (a.prototype.batters = function (n) {
            var e = this.battersImmutable(n);
            return e !== void 0 ? e.toJS() : [];
          }),
          (a.prototype.designatedHitterForPlayer = function (n, e) {
            var t = this.getIn([n, 'dhs']);
            return t.findKey(function (d) {
              return d === e;
            });
          }),
          (a.prototype.designatedHitteeForPlayer = function (n, e) {
            return this.getIn([n, 'dhs', e]);
          }),
          (a.prototype.dpFlexAssignmentsForTeam = function (n) {
            return { dp: this.getIn([n, 'dp']), flex: this.getIn([n, 'flex']) };
          }),
          (a.prototype.lineupIndex = function (n) {
            return this.getIn([n, 'currentIndex']);
          }),
          (a.prototype.currentBatter = function (n) {
            var e = this.temporaryBatter(n);
            return e || this.getPlayerAtIndex(n, this.lineupIndex(n));
          }),
          (a.prototype.temporaryBatter = function (n) {
            return this.getIn([n, 'temporaryBatterState', 'temporaryBatterId']);
          }),
          (a.prototype.indexOfPlayer = function (n, e) {
            var t = this.getIn([n, 'batters']).findIndex(function (d) {
              return d === e;
            });
            return t === -1 ? void 0 : t;
          }),
          (a.prototype.ensureTeamLineup = function (n) {
            return this.get(n) !== void 0
              ? this
              : this.set(
                  n,
                  c.fromJS({
                    batters: [],
                    dhs: {},
                    dp: void 0,
                    flex: void 0,
                    currentIndex: 0,
                    confirmedEndOfLineup: !1,
                  })
                );
          }),
          (a.prototype.ensureLineupLengthAtLeast = function (n, e) {
            return this.updateIn([n, 'batters'], function (t) {
              return t.setSize(Math.max(t.size, e));
            });
          }),
          (a.prototype.fillIndex = function (n, e, t) {
            var d = this.ensureLineupLengthAtLeast(n, t);
            return d.setIn([n, 'batters', t], e);
          }),
          (a.prototype.swapDesignatedHitterReferences = function (n, e, t) {
            return this.updateIn([n, 'dhs'], function (d) {
              return c.Map().withMutations(function (f) {
                for (var _ = 0, S = d.keySeq().toArray(); _ < S.length; _++) {
                  var P = S[_],
                    I = d.get(P),
                    b = void 0,
                    E = void 0;
                  P === e ? (b = t) : P === t ? (b = e) : (b = P),
                    I === e ? (E = t) : I === t ? (E = e) : (E = I),
                    f.set(b, E);
                }
              });
            });
          }),
          (a.prototype.swapDPFlexReferences = function (n, e, t) {
            var d = this.dpFlexAssignmentsForTeam(n),
              f = [d.dp, d.flex],
              _ = f[0],
              S = f[1],
              P = [_, S],
              I = P[0],
              b = P[1];
            return (
              e === _ && (I = t),
              e === S && (b = t),
              t === _ && (I = e),
              t === S && (b = e),
              this.setIn([n, 'dp'], I).setIn([n, 'flex'], b)
            );
          }),
          (a.prototype.teamIds = function () {
            for (var n = [], e = 0, t = this.keySeq().toArray(); e < t.length; e++) {
              var d = t[e];
              this.getIn([d, 'batters']) !== void 0 && n.push(d);
            }
            return n;
          }),
          Object.defineProperty(a.prototype, 'fullLineups', {
            get: function () {
              for (var n = {}, e = 0, t = this.teamIds(); e < t.length; e++) {
                var d = t[e];
                n[d] = { batters: this.batters(d), currentIndex: this.lineupIndex(d) };
              }
              return n;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(a.prototype, 'dhsMap', {
            get: function () {
              for (var n = {}, e = 0, t = this.teamIds(); e < t.length; e++) {
                var d = t[e],
                  f = this.getIn([d, 'dhs']);
                f !== void 0 && (n[d] = f.toJS());
              }
              return n;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(a.prototype, 'dpFlexMap', {
            get: function () {
              for (var n = {}, e = 0, t = this.teamIds(); e < t.length; e++) {
                var d = t[e];
                n[d] = this.dpFlexAssignmentsForTeam(d);
              }
              return n;
            },
            enumerable: !1,
            configurable: !0,
          }),
          a
        );
      })(p.ImmutableState);
    pr.LineupState = u;
    var y = (function (o) {
      i.__extends(a, o);
      function a(n, e) {
        var t = o.call(this, n) || this;
        return (t.baseEvents = n), (t.situation = e), t;
      }
      return (
        (a.prototype.initialState = function () {
          return new u(c.Map({ globalAtBatId: (0, h.uuid4)() }));
        }),
        (a.prototype.processOneEvent = function (n, e) {
          switch (e.code) {
            case 'set_teams':
              return this.setTeams(n, e);
            case 'fill_lineup':
              return this.fill(n, e);
            case 'fill_lineup_index':
              return this.fillIndex(n, e);
            case 'reorder_lineup':
              return this.reorderLineup(n, e);
            case 'goto_lineup_index':
              return this.gotoIndex(n, e);
            case 'clear_lineup_index':
              return this.clearIndex(n, e);
            case 'clear_entire_lineup':
              return this.clearEntire(n, e);
            case 'squash_lineup_index':
              return this.squashIndex(n, e);
            case 'swap_players':
              return this.swapPlayers(n, e);
            case 'sub_players':
              return this.subPlayers(n, e);
            case 'assign_dh':
              return this.assignDH(n, e);
            case 'remove_dh':
              return this.removeDH(n, e);
            case 'fill_position':
              return this.fillPosition(n, e);
            case 'clear_position_by_id':
              return this.clearPositionById(n, e);
            case 'clear_all_positions':
              return this.clearAllPositions(n, e);
            case 'assign_flex':
              return this.assignFlex(n, e);
            case 'clear_flex':
              return this.clearFlex(n, e);
            case 'assign_dp':
              return this.assignDP(n, e);
            case 'clear_dp':
              return this.clearDP(n, e);
            case 'swap_dp_flex':
              return this.swapDPFlex(n, e);
            case 'illegal_pitch_advance':
              return this.illegalPitchAdvance(n);
            case 'end_at_bat':
            case 'ball_in_play':
            case 'place_batter':
              return this.incrementLineupIndex(n);
            case 'pitch':
              return this.handlePitch(n);
            case 'confirm_end_of_lineup':
              return this.confirmEndOfLineup(n, e);
            case 'courtesy_batter':
              return this.courtesyBatter(n, e);
            case 'replace_batter':
              return this.replaceBatter(n, e);
            case 'base_running':
            case 'end_half':
            case 'override':
            default:
              return this.situationAfterEvent.lastEventEndedInning
                ? this.clearTemporaryBatterState(n)
                : n;
          }
        }),
        Object.defineProperty(a.prototype, 'situationBeforeEvent', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'situationAfterEvent', {
          get: function () {
            return this.situation.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        (a.prototype.setTeams = function (n, e) {
          var t = e.attributes,
            d = t.homeId,
            f = t.awayId;
          return n.ensureTeamLineup(d).ensureTeamLineup(f);
        }),
        (a.prototype.fill = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId;
          return n.updateIn([d, 'batters'], function (_) {
            for (var S = 0; S < _.size; S++) if (_.get(S) === void 0) return _.set(S, f);
            return _.push(f);
          });
        }),
        (a.prototype.fillIndex = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId,
            _ = t.index;
          return n.fillIndex(d, f, _);
        }),
        (a.prototype.reorderLineup = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.fromIndex,
            _ = t.toIndex;
          return (
            (n = n.ensureLineupLengthAtLeast(d, _)),
            n.updateIn([d, 'batters'], function (S) {
              return S.withMutations(function (P) {
                var I = P.get(f);
                if (f > _)
                  for (var b = f; b >= _; b--) b === _ ? P.set(b, I) : P.set(b, P.get(b - 1));
                else for (var b = f; b <= _; b++) b === _ ? P.set(b, I) : P.set(b, P.get(b + 1));
                return P;
              });
            })
          );
        }),
        (a.prototype.gotoIndex = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.index;
          return (n = n.ensureLineupLengthAtLeast(d, f)), n.setIn([d, 'currentIndex'], f);
        }),
        (a.prototype.clearIndex = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.index;
          return n.batters(d).length > f && (n = n.setIn([d, 'batters', f], void 0)), n;
        }),
        (a.prototype.clearEntire = function (n, e) {
          var t = e.attributes.teamId;
          return n.setIn([t, 'batters'], c.List([])).setIn([t, 'currentIndex'], 0);
        }),
        (a.prototype.squashIndex = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.index;
          if (n.batters(d).length > f) {
            var _ = n.getIn([d, 'batters']),
              S = n.getIn([d, 'currentIndex']),
              P = void 0,
              I = n.batters(d).length - 1;
            I !== 0 ? (P = (S - (f < S ? 1 : 0)) % I) : (P = 0),
              (n = n.setIn([d, 'currentIndex'], P)),
              (n = n.setIn([d, 'batters'], _.splice(f, 1)));
          }
          return n;
        }),
        (a.prototype.swapPlayers = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.firstPlayerId,
            _ = t.secondPlayerId;
          (n = n.swapDesignatedHitterReferences(d, f, _)), (n = n.swapDPFlexReferences(d, f, _));
          var S = n.indexOfPlayer(d, f),
            P = n.indexOfPlayer(d, _);
          return (
            S !== void 0 && (n = n.fillIndex(d, _, S)),
            P !== void 0 && (n = n.fillIndex(d, f, P)),
            n
          );
        }),
        (a.prototype.subPlayers = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.incomingPlayerId,
            _ = t.outgoingPlayerId;
          (n = n.swapDesignatedHitterReferences(d, f, _)), (n = n.swapDPFlexReferences(d, f, _));
          var S = n.indexOfPlayer(d, f),
            P = n.indexOfPlayer(d, _);
          return P === void 0
            ? n
            : (S !== void 0 && (n = n.fillIndex(d, void 0, S)), n.fillIndex(d, f, P));
        }),
        (a.prototype.assignDH = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.dhId,
            _ = t.fielderId;
          n = n.setIn([d, 'dhs', f], _);
          var S = n.indexOfPlayer(d, _);
          return S !== void 0 && (n = n.fillIndex(d, f, S)), n;
        }),
        (a.prototype.removeDH = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.dhId,
            _ = n.getIn([d, 'dhs', f]);
          n = n.setIn([d, 'dhs', f], void 0);
          var S = n.indexOfPlayer(d, f);
          return S !== void 0 && (n = n.fillIndex(d, _, S)), n;
        }),
        (a.prototype.fillPosition = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId,
            _ = t.position,
            S = n.designatedHitterForPlayer(d, f);
          return (
            _ !== 'DH' && (n = n.removeIn([d, 'dhs', f])),
            S !== void 0 && (0, v.isMultiPosition)(_) && (n = n.setIn([d, 'dhs', S], void 0)),
            _ === 'DH' && (n = n.setIn([d, 'dhs', f], void 0)),
            n
          );
        }),
        (a.prototype.clearPositionById = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId;
          n.hasIn([d, 'dhs', f]) && (n = n.removeIn([d, 'dhs', f]));
          var _ = n.designatedHitterForPlayer(d, f);
          return _ !== void 0 && (n = n.setIn([d, 'dhs', _], void 0)), n;
        }),
        (a.prototype.clearAllPositions = function (n, e) {
          var t = e.attributes.teamId;
          return n.setIn([t, 'dhs'], c.fromJS({}));
        }),
        (a.prototype.assignFlex = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId;
          return n.setIn([d, 'flex'], f);
        }),
        (a.prototype.clearFlex = function (n, e) {
          return n.setIn([e.attributes.teamId, 'flex'], void 0);
        }),
        (a.prototype.assignDP = function (n, e) {
          var t = e.attributes,
            d = t.teamId,
            f = t.playerId;
          return n.setIn([d, 'dp'], f);
        }),
        (a.prototype.clearDP = function (n, e) {
          return n.setIn([e.attributes.teamId, 'dp'], void 0);
        }),
        (a.prototype.swapDPFlex = function (n, e) {
          var t = e.attributes.teamId,
            d = n.dpFlexAssignmentsForTeam(t),
            f = [d.dp, d.flex],
            _ = f[0],
            S = f[1];
          if (_ === void 0 || S === void 0) return n;
          var P = [n.indexOfPlayer(t, _), n.indexOfPlayer(t, S)],
            I = P[0],
            b = P[1];
          return (
            (I === void 0 && b === void 0) ||
              (I !== void 0 && (n = n.setIn([t, 'batters', I], S)),
              b !== void 0 && (n = n.setIn([t, 'batters', b], _))),
            n
          );
        }),
        (a.prototype.illegalPitchAdvance = function (n) {
          return this.situationAfterEvent.lastEventWasWalk ? this.incrementLineupIndex(n) : n;
        }),
        (a.prototype.clearTemporaryBatterState = function (n) {
          var e = this.situationBeforeEvent.atBatTeamId;
          return n.deleteIn([e, 'temporaryBatterState']);
        }),
        (a.prototype.incrementLineupIndex = function (n) {
          var e = this.situationBeforeEvent.atBatTeamId,
            t = n.getIn([e, 'confirmedEndOfLineup']),
            d = n.getIn([e, 'temporaryBatterState']);
          return (
            (n = n.deleteIn([e, 'temporaryBatterState'])),
            (!d || d.advanceLineupIndexAfterAtBat) &&
              ((n = n.ensureLineupLengthAtLeast(e, 1)),
              (n = n.updateIn([e, 'currentIndex'], function (f) {
                var _ = n.numberOfBatters(e);
                if (!(!t && f + 1 === _)) return (f + 1) % _;
              }))),
            n.refreshAtBatGlobalId()
          );
        }),
        (a.prototype.handlePitch = function (n) {
          return this.situationAfterEvent.lastEventWasStrikeout ||
            this.situationAfterEvent.lastEventWasWalk
            ? this.incrementLineupIndex(n)
            : n;
        }),
        (a.prototype.confirmEndOfLineup = function (n, e) {
          return n.setIn([e.attributes.teamId, 'confirmedEndOfLineup'], !0);
        }),
        (a.prototype.courtesyBatter = function (n, e) {
          return this.setTemporaryBatter(n, e.attributes.teamId, e.attributes.incomingPlayerId, !1);
        }),
        (a.prototype.replaceBatter = function (n, e) {
          return this.setTemporaryBatter(n, e.attributes.teamId, e.attributes.incomingPlayerId, !0);
        }),
        (a.prototype.setTemporaryBatter = function (n, e, t, d) {
          var f = new l({ temporaryBatterId: t, advanceLineupIndexAfterAtBat: d });
          return n.setIn([e, 'temporaryBatterState'], f);
        }),
        a
      );
    })(r.VersionedStateEngine);
    return (pr.LineupEngine = y), pr;
  }
  var hr = {},
    Wc;
  function xy() {
    if (Wc) return hr;
    (Wc = 1),
      Object.defineProperty(hr, '__esModule', { value: !0 }),
      (hr.SprayChartEngine = hr.SprayChartState = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(de()),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          (u.prototype.fullSprayChartData = function () {
            return this.get('teams').toJS();
          }),
          (u.prototype.sprayChartDataForTeam = function (y) {
            var o = this.getIn(['teams', y]);
            return o !== void 0 ? o.toJS() : {};
          }),
          (u.prototype.sprayChartDataForPlayer = function (y, o, a) {
            var n = this.getIn(['teams', y, a, o]);
            return n !== void 0 ? n.toJS() : [];
          }),
          (u.prototype.initializeForTeam = function (y) {
            return this.setIn(
              ['teams', y],
              r.Map({}).setIn(['offense'], r.Map({})).setIn(['defense'], r.Map({}))
            );
          }),
          (u.prototype.addBallInPlay = function (y, o, a, n) {
            return this.updateIn(['teams', a, o, n], function (e) {
              return e === void 0 && (e = r.List()), e.push(y);
            });
          }),
          u
        );
      })(v.ImmutableState);
    hr.SprayChartState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y, o, a, n) {
        var e = l.call(this, y) || this;
        return (e.baseEvents = y), (e.situation = o), (e.lineup = a), (e.fielders = n), e;
      }
      return (
        Object.defineProperty(u.prototype, 'lastSituationState', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(u.prototype, 'lastLineupState', {
          get: function () {
            return this.lineup.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(u.prototype, 'lastFielderState', {
          get: function () {
            return this.fielders.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        (u.prototype.initialState = function () {
          return new h(r.fromJS({ teams: {} }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          switch (o.code) {
            case 'set_teams':
              return this.setTeams(y, o);
            case 'ball_in_play':
              return this.ballInPlay(y, o);
          }
          return y;
        }),
        (u.prototype.setTeams = function (y, o) {
          return y.initializeForTeam(o.attributes.homeId).initializeForTeam(o.attributes.awayId);
        }),
        (u.prototype.ballInPlay = function (y, o) {
          if (
            c.contains(
              ['foul_tip_out', 'dropped_third_strike', 'dropped_third_strike_batter_out'],
              o.attributes.playResult
            )
          )
            return y;
          var a = this.lastSituationState.atBatTeamId,
            n = this.lastLineupState.currentBatter(a),
            e = this.lastSituationState.inFieldTeamId,
            t = this.lastFielderState.playerForPosition(e, 'P');
          return (
            (y = y.addBallInPlay(o, 'offense', a, n)),
            t !== void 0 ? y.addBallInPlay(o, 'defense', e, t) : y
          );
        }),
        u
      );
    })(p.VersionedStateEngine);
    return (hr.SprayChartEngine = s), hr;
  }
  var yr = {},
    $c;
  function Ly() {
    if ($c) return yr;
    ($c = 1),
      Object.defineProperty(yr, '__esModule', { value: !0 }),
      (yr.PitchDataEngine = yr.PitchDataState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = (function (s) {
        i.__extends(l, s);
        function l() {
          return (s !== null && s.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(l.prototype, 'pitchData', {
            get: function () {
              return this.get('teams').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (l.prototype.pitchDataForPlayer = function (u, y) {
            var o = this.getIn(['teams', u, y]);
            return o !== void 0 ? o.toJS() : void 0;
          }),
          (l.prototype.initializeForTeam = function (u) {
            return this.setIn(['teams', u], c.Map({}));
          }),
          (l.prototype.addPitchDataItem = function (u, y, o, a) {
            return a === void 0
              ? this
              : this.updateIn(['teams', o, a], function (n) {
                  return (
                    n === void 0 && (n = c.List()),
                    n.push({
                      inning: u,
                      result: y.attributes.result,
                      style: y.attributes.style,
                      speed: y.attributes.speed,
                    })
                  );
                });
          }),
          l
        );
      })(p.ImmutableState);
    yr.PitchDataState = v;
    var h = (function (s) {
      i.__extends(l, s);
      function l(u, y, o) {
        var a = s.call(this, u) || this;
        return (a.baseEvents = u), (a.situation = y), (a.fielders = o), a;
      }
      return (
        Object.defineProperty(l.prototype, 'lastSituationState', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(l.prototype, 'lastFielderState', {
          get: function () {
            return this.fielders.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        (l.prototype.initialState = function () {
          return new v(c.fromJS({ teams: {} }));
        }),
        (l.prototype.processOneEvent = function (u, y) {
          switch (y.code) {
            case 'set_teams':
              return this.setTeams(u, y);
            case 'pitch':
              return this.pitch(u, y);
          }
          return u;
        }),
        (l.prototype.setTeams = function (u, y) {
          return u.initializeForTeam(y.attributes.homeId).initializeForTeam(y.attributes.awayId);
        }),
        (l.prototype.pitch = function (u, y) {
          var o = this.lastSituationState.inFieldTeamId;
          return u.addPitchDataItem(
            this.lastSituationState.inning,
            y,
            o,
            this.lastFielderState.playerForPosition(o, 'P')
          );
        }),
        l
      );
    })(r.VersionedStateEngine);
    return (yr.PitchDataEngine = h), yr;
  }
  var vr = {},
    zc;
  function Dy() {
    if (zc) return vr;
    (zc = 1),
      Object.defineProperty(vr, '__esModule', { value: !0 }),
      (vr.FieldersEngine = vr.FielderState = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(de()),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = at(),
      s = 'EH',
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          (o.prototype.playerForPosition = function (a, n) {
            if ((0, h.isMultiPosition)(n))
              throw 'Programming error: playerForPosition is undefined for multi-player positions like '.concat(
                n
              );
            return this.getIn([a, 'positions', n]);
          }),
          (o.prototype.positionForPlayer = function (a, n) {
            var e = void 0;
            if (n !== void 0) e = this.getIn([n, 'players', a]);
            else
              for (var t = 0, d = this.keySeq().toArray(); t < d.length; t++) {
                var f = d[t];
                if (((e = this.getIn([f, 'players', a])), e !== void 0)) break;
              }
            return e || s;
          }),
          (o.prototype.setPositionForPlayer = function (a, n, e) {
            return this.setIn([a, 'players', n], e);
          }),
          (o.prototype.ensurePositionForPlayer = function (a, n) {
            return this.getIn([a, 'players', n]) !== void 0
              ? this
              : this.setPositionForPlayer(a, n, s);
          }),
          (o.prototype.setPlayerForPosition = function (a, n, e) {
            if ((0, h.isMultiPosition)(n))
              throw 'Programming error: setPlayerForPosition is undefined for multi-player positions like '.concat(
                n
              );
            return this.setIn([a, 'positions', n], e);
          }),
          (o.prototype.positionsMapForTeam = function (a) {
            var n = this.getIn([a, 'positions']);
            return n === void 0 ? {} : n.toJS();
          }),
          (o.prototype.playersMapForTeam = function (a) {
            var n = this.getIn([a, 'players']);
            return n === void 0 ? {} : n.toJS();
          }),
          Object.defineProperty(o.prototype, 'positionsMap', {
            get: function () {
              for (var a = {}, n = 0, e = this.keySeq().toArray(); n < e.length; n++) {
                var t = e[n];
                this.getIn([t, 'positions']) !== void 0 && (a[t] = this.positionsMapForTeam(t));
              }
              return a;
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(v.ImmutableState);
    vr.FielderState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n) {
        var e = y.call(this, a) || this;
        return (e.baseEvents = a), (e.situation = n), e;
      }
      return (
        (o.prototype.initialState = function () {
          return new l(r.Map({}));
        }),
        Object.defineProperty(o.prototype, 'situationBeforeEvent', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        (o.prototype.processOneEvent = function (a, n) {
          switch (n.code) {
            case 'set_teams':
              return this.setTeams(a, n);
            case 'fill_position':
              return this.handleFillPosition(a, n);
            case 'clear_position_by_id':
              return this.handleClearPositionById(a, n);
            case 'swap_players':
              return this.handleSwapPlayers(a, n);
            case 'sub_players':
              return this.handleSubPlayers(a, n);
            case 'clear_all_positions':
              return this.handleClearAllPositions(a, n);
            case 'fill_lineup_index':
              return this.fillLineupIndex(a, n);
            case 'fill_lineup':
              return this.fillLineup(a, n);
            case 'replace_runner':
              return this.replaceRunner(a, n);
            case 'place_runner':
              return this.placeRunner(a, n);
            default:
              return a;
          }
        }),
        (o.prototype.setTeams = function (a, n) {
          for (var e = 0, t = [n.attributes.homeId, n.attributes.awayId]; e < t.length; e++) {
            var d = t[e];
            a = a.set(d, r.Map({ positions: r.Map({}), players: r.Map({}) }));
          }
          return a;
        }),
        (o.prototype.handleFillUniquePosition = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.playerId,
            f = n.attributes.position,
            _ = a.positionForPlayer(d, t);
          (0, h.isUniquePosition)(_) && (a = a.setPlayerForPosition(t, _, void 0));
          var S = a.playerForPosition(t, f);
          return (
            S !== void 0 && (a = a.setPositionForPlayer(t, S, s)),
            (a = a.setPositionForPlayer(t, d, f)),
            f !== void 0 && (a = a.setPlayerForPosition(t, f, d)),
            a
          );
        }),
        (o.prototype.handleFillMultiPosition = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.playerId,
            f = n.attributes.position,
            _ = a.positionForPlayer(d, t);
          return (
            (0, h.isUniquePosition)(_) && (a = a.setPlayerForPosition(t, _, void 0)),
            a.setPositionForPlayer(t, d, f || s)
          );
        }),
        (o.prototype.handleFillPosition = function (a, n) {
          return (0, h.isUniquePosition)(n.attributes.position)
            ? this.handleFillUniquePosition(a, n)
            : this.handleFillMultiPosition(a, n);
        }),
        (o.prototype.clearPlayerForTeam = function (a, n, e) {
          var t = a.positionForPlayer(e, n);
          return (
            (a = a.setPositionForPlayer(n, e, s)),
            (0, h.isUniquePosition)(t) && (a = a.setPlayerForPosition(n, t, void 0)),
            a
          );
        }),
        (o.prototype.handleClearPositionById = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.playerId;
          return this.clearPlayerForTeam(a, t, d);
        }),
        (o.prototype.handleSwapPlayers = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.firstPlayerId,
            f = e.secondPlayerId;
          (a = a.ensurePositionForPlayer(t, d)), (a = a.ensurePositionForPlayer(t, f));
          var _ = a.positionForPlayer(d, t),
            S = a.positionForPlayer(f, t);
          return (
            (a = a.setPositionForPlayer(t, d, S).setPositionForPlayer(t, f, _)),
            (0, h.isUniquePosition)(_) && (a = a.setPlayerForPosition(t, _, f)),
            (0, h.isUniquePosition)(S) && (a = a.setPlayerForPosition(t, S, d)),
            a
          );
        }),
        (o.prototype.handleSubPlayers = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.incomingPlayerId,
            f = e.outgoingPlayerId;
          a = a.ensurePositionForPlayer(t, d);
          var _ = a.positionForPlayer(d, t),
            S = a.positionForPlayer(f, t);
          return (
            (0, h.isUniquePosition)(_) && (a = a.setPlayerForPosition(t, _, void 0)),
            (0, h.isUniquePosition)(S) && (a = a.setPlayerForPosition(t, S, d)),
            a.setPositionForPlayer(t, d, S).setPositionForPlayer(t, f, s)
          );
        }),
        (o.prototype.handleClearAllPositions = function (a, n) {
          var e = n.attributes.teamId;
          a = a.setIn([e, 'positions'], r.Map());
          for (var t = {}, d = 0, f = c.keys(a.playersMapForTeam(e)); d < f.length; d++) {
            var _ = f[d];
            t[_] = s;
          }
          return a.mergeIn([e, 'players'], t);
        }),
        (o.prototype.fillLineupIndex = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.playerId;
          return a.ensurePositionForPlayer(t, d);
        }),
        (o.prototype.fillLineup = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.playerId;
          return a.ensurePositionForPlayer(t, d);
        }),
        (o.prototype.replaceRunner = function (a, n) {
          var e = n.attributes,
            t = e.teamId,
            d = e.incomingPlayerId;
          return a.ensurePositionForPlayer(t, d);
        }),
        (o.prototype.placeRunner = function (a, n) {
          var e = this.situationBeforeEvent.atBatTeamId;
          return a.ensurePositionForPlayer(e, n.attributes.runnerId);
        }),
        o
      );
    })(p.VersionedStateEngine);
    return (vr.FieldersEngine = u), vr;
  }
  var gr = {},
    ft = {},
    Vc;
  function _r() {
    if (Vc) return ft;
    (Vc = 1),
      Object.defineProperty(ft, '__esModule', { value: !0 }),
      (ft.inRange = ft.getRandomInt = ft.xor = ft.bin = ft.safeSum = void 0);
    var i = Q,
      c = i.__importStar(Se);
    function r() {
      for (var l = [], u = 0; u < arguments.length; u++) l[u] = arguments[u];
      return c.reduce(
        l,
        function (y, o) {
          return y + (o || 0);
        },
        0
      );
    }
    ft.safeSum = r;
    function p(l) {
      return l ? 1 : 0;
    }
    ft.bin = p;
    var v = function (l, u) {
      return (!l && u) || (l && !u);
    };
    ft.xor = v;
    function h(l) {
      return Math.floor(Math.random() * l);
    }
    ft.getRandomInt = h;
    function s(l, u, y) {
      return (l - u) * (l - y) <= 0;
    }
    return (ft.inRange = s), ft;
  }
  var Kc;
  function Gy() {
    if (Kc) return gr;
    (Kc = 1),
      Object.defineProperty(gr, '__esModule', { value: !0 }),
      (gr.BaserunnerEngine = gr.BaserunnerState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Pt()),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = _r(),
      s = Me(),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          (o.prototype.playerAtBase = function (a) {
            return this.getIn(['bases', a]);
          }),
          (o.prototype.baseForPlayer = function (a) {
            for (var n = 0, e = [1, 2, 3, -3, -2]; n < e.length; n++) {
              var t = e[n];
              if (this.playerAtBase(t) === a) return t;
            }
          }),
          (o.prototype.globalAtBatIdForPlayer = function (a) {
            return this.getIn(['globalAtBatIds', a]);
          }),
          (o.prototype.setGlobalAtBatIdForPlayer = function (a, n) {
            return this.setIn(['globalAtBatIds', a], n);
          }),
          (o.prototype.deleteGlobalAtBatIdForPlayer = function (a) {
            return this.deleteIn(['globalAtBatIds', a]);
          }),
          Object.defineProperty(o.prototype, 'scoresImmutable', {
            get: function () {
              return this.get('scores').mergeDeep(this.get('scoreEdits'));
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'scores', {
            get: function () {
              return this.scoresImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (o.prototype.scoreForTeam = function (a) {
            return this.scoresImmutable.get(a);
          }),
          Object.defineProperty(o.prototype, 'baserunnersImmutable', {
            get: function () {
              return this.get('bases');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'baserunners', {
            get: function () {
              return this.get('bases').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'runnersScoredOnLastEvent', {
            get: function () {
              return this.get('scoredOnLastEvent').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'runnersUnscoredOnLastEvent', {
            get: function () {
              return this.get('unscoredOnLastEvent').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'runnersOnBase', {
            get: function () {
              var a = this.baserunners,
                n = 0;
              return (
                (n += (0, h.bin)(a[1] !== void 0)),
                (n += (0, h.bin)(a[2] !== void 0)),
                (n += (0, h.bin)(a[3] !== void 0)),
                n
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'leftOnBaserunners', {
            get: function () {
              return this.get('left_bases').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'runnersLeftOnBase', {
            get: function () {
              var a = this.leftOnBaserunners,
                n = 0;
              return (
                (n += (0, h.bin)(a[1] !== void 0)),
                (n += (0, h.bin)(a[2] !== void 0)),
                (n += (0, h.bin)(a[3] !== void 0)),
                n
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (o.prototype.copyBasesToLeft = function () {
            return this.withMutations(function (a) {
              a.set('left_bases', c.Map()),
                a.setIn(['left_bases', 1], a.getIn(['bases', 1])),
                a.setIn(['left_bases', 2], a.getIn(['bases', 2])),
                a.setIn(['left_bases', 3], a.getIn(['bases', 3]));
            });
          }),
          (o.prototype.addAnimationOperationsToRemoveAllRunners = function () {
            for (var a = this, n = 1; n < 4; n += 1)
              a = a.addAnimationOperation(this.playerAtBase(n), 'removed', n, n);
            return (
              (a = a
                .addAnimationOperation(this.playerAtBase(-3), 'removed', 3, 3)
                .addAnimationOperation(this.playerAtBase(-2), 'removed', 2, 2)),
              a
            );
          }),
          (o.prototype.resetBases = function () {
            return this.set('bases', c.Map())
              .setIn(['bases', 1], void 0)
              .setIn(['bases', 2], void 0)
              .setIn(['bases', 3], void 0)
              .setIn(['bases', -3], void 0)
              .setIn(['bases', -2], void 0);
          }),
          (o.prototype.clearGlobalAtBatIds = function () {
            return this.set('globalAtBatIds', this.get('globalAtBatIds').clear());
          }),
          (o.prototype.removePlayerFromBases = function (a) {
            var n = this.baseForPlayer(a);
            return n === void 0 ? this : this.setIn(['bases', n], void 0);
          }),
          (o.prototype.incrementScore = function (a, n) {
            return this.incrementIn(['scores', n], a);
          }),
          (o.prototype.setScore = function (a, n) {
            return this.setIn(['scores', n], a);
          }),
          (o.prototype.scoreRunner = function (a, n) {
            return this.incrementScore(1, a).update('scoredOnLastEvent', function (e) {
              return e.push(n);
            });
          }),
          (o.prototype.unscoreRunner = function (a, n) {
            return this.incrementScore(-1, a).update('unscoredOnLastEvent', function (e) {
              return e.push(n);
            });
          }),
          (o.prototype.clearRunnerLists = function () {
            return this.update('scoredOnLastEvent', function (a) {
              return a.clear();
            }).update('unscoredOnLastEvent', function (a) {
              return a.clear();
            });
          }),
          (o.prototype.addRunnerToBase = function (a, n, e) {
            return a >= 4 ? this.scoreRunner(e, n) : this.setIn(['bases', a], n);
          }),
          (o.prototype.reconcileSentBackRunner = function (a, n) {
            var e = this.playerAtBase(a);
            if (!e) return this;
            var t = this.playerAtBase(-a);
            return t ? this : this.removePlayerFromBases(e).addRunnerToBase(-a, e, n);
          }),
          (o.prototype.resetAnimationOperations = function () {
            return this.set('animationOperations', c.List());
          }),
          (o.prototype.addAnimationOperation = function (a, n, e, t, d) {
            return a === void 0
              ? this
              : this.update('animationOperations', function (f) {
                  return d
                    ? f.push({
                        playerId: a,
                        result: t >= 4 && n === 'safe' ? 'scored' : n,
                        fromBase: e,
                        toBase: t >= 4 ? 4 : t,
                        inverseResult: d,
                      })
                    : f.push({
                        playerId: a,
                        result: t >= 4 && n === 'safe' ? 'scored' : n,
                        fromBase: e,
                        toBase: t >= 4 ? 4 : t,
                      });
                });
          }),
          (o.prototype.animationOperations = function () {
            return this.get('animationOperations').toJS();
          }),
          o
        );
      })(v.ImmutableState);
    gr.BaserunnerState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n, e) {
        var t = y.call(this, a) || this;
        return (t.baseEvents = a), (t.situation = n), (t.lineup = e), t;
      }
      return (
        (o.prototype.initialState = function () {
          var a = new l(
            c.fromJS({
              bases: {},
              scores: {},
              scoreEdits: {},
              left_bases: {},
              scoredOnLastEvent: [],
              unscoredOnLastEvent: [],
              globalAtBatIds: {},
              animationOperations: [],
            })
          );
          return a.resetBases();
        }),
        (o.prototype.processOneEvent = function (a, n) {
          switch (((a = a.clearRunnerLists().resetAnimationOperations()), n.code)) {
            case 'set_teams':
              a = this.setTeams(a, n);
              break;
            case 'end_half':
              a = this.endHalf(a);
              break;
            case 'replace_runner':
              a = this.replaceRunner(a, n);
              break;
            case 'swap_players':
              a = this.swapPlayers(a, n);
              break;
            case 'sub_players':
              a = this.subPlayers(a, n);
              break;
            case 'end_at_bat':
              a = this.endAtBat(a, n);
              break;
            case 'balk':
              a = this.balk(a);
              break;
            case 'illegal_pitch_advance':
              a = this.illegalPitchAdvance(a);
              break;
            case 'ball_in_play':
              a = this.ballInPlay(a, n);
              break;
            case 'base_running':
              a = this.baseRunning(a, n);
              break;
            case 'place_batter':
              a = this.placeBatter(a, n);
              break;
            case 'place_runner':
              a = this.placeRunner(a, n);
              break;
            case 'override':
              a = this.override(a, n);
              break;
            case 'pitch':
              a = this.pitch(a, n);
              break;
            case 'team_stat_edit':
              a = this.teamStatEdit(a, n);
              break;
            case 'clear_all_edits':
              a = this.clearAllEdits(a);
              break;
          }
          return (
            (a = a.copyBasesToLeft()), (a = this.reconcileOuts(a)), this.reconcileSentBackRunners(a)
          );
        }),
        (o.prototype.teamStatEdit = function (a, n) {
          return (
            n.statName === 'R' &&
              n.category === 'offense' &&
              (a = a.setIn(['scoreEdits', n.teamId], n.statValue)),
            a
          );
        }),
        (o.prototype.clearAllEdits = function (a) {
          return a.update('scoreEdits', function (n) {
            return n.clear();
          });
        }),
        Object.defineProperty(o.prototype, 'lastLineupState', {
          get: function () {
            return this.lineup.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(o.prototype, 'lastSituationState', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(o.prototype, 'nextSituationState', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset + 1);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(o.prototype, 'currentBatter', {
          get: function () {
            return this.lastLineupState.currentBatter(this.lastSituationState.atBatTeamId);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(o.prototype, 'battingTeam', {
          get: function () {
            return this.lastSituationState.atBatTeamId;
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(o.prototype, 'outsBeforePlay', {
          get: function () {
            return this.lastSituationState.outs;
          },
          enumerable: !1,
          configurable: !0,
        }),
        (o.prototype.reconcileOuts = function (a) {
          return this.nextSituationState.lastEventEndedInning
            ? a.addAnimationOperationsToRemoveAllRunners().resetBases().clearGlobalAtBatIds()
            : a;
        }),
        (o.prototype.reconcileSentBackRunners = function (a) {
          return this.nextSituationState.lastEventEndedInning
            ? a
            : a
                .reconcileSentBackRunner(-3, this.battingTeam)
                .reconcileSentBackRunner(-2, this.battingTeam);
        }),
        (o.prototype.walk = function (a) {
          var n;
          for (n = 1; n <= 4 && a.playerAtBase(n) !== void 0; n += 1);
          for (var e = n; e > 1; e -= 1) {
            var t = a.playerAtBase(e - 1);
            a = a
              .addAnimationOperation(t, 'safe', e - 1, e)
              .addRunnerToBase(e, a.playerAtBase(e - 1), this.battingTeam);
          }
          var d = this.lastLineupState.currentBatter(this.lastSituationState.atBatTeamId);
          return (
            (a = a.addAnimationOperation(d, 'safe', 0, 1).addRunnerToBase(1, d, this.battingTeam)),
            a.setGlobalAtBatIdForPlayer(d, this.lastLineupState.globalAtBatId)
          );
        }),
        (o.prototype.strikeout = function (a) {
          return a.addAnimationOperation(this.currentBatter, 'out', 0, 0);
        }),
        (o.prototype.advanceRunners = function (a, n) {
          if (n === 0) return a;
          for (var e = 3; e >= 1; e -= 1) {
            var t = a.playerAtBase(e);
            t !== void 0 &&
              ((a = a
                .addAnimationOperation(t, 'safe', e, e + n)
                .addRunnerToBase(e + n, t, this.battingTeam)),
              (a = a.addRunnerToBase(e, void 0, this.battingTeam)));
          }
          return a;
        }),
        (o.prototype.setTeams = function (a, n) {
          return a
            .setIn(['scores', n.attributes.homeId], 0)
            .setIn(['scores', n.attributes.awayId], 0);
        }),
        (o.prototype.endHalf = function (a) {
          return a.addAnimationOperationsToRemoveAllRunners().resetBases();
        }),
        (o.prototype.replaceRunner = function (a, n) {
          var e = n.attributes,
            t = e.incomingPlayerId,
            d = e.outgoingPlayerId,
            f = a.baseForPlayer(d);
          return f === void 0
            ? a
            : a
                .addAnimationOperation(d, 'subbedOut', f, f)
                .addAnimationOperation(t, 'subbedIn', f, f)
                .removePlayerFromBases(d)
                .addRunnerToBase(f, t, this.battingTeam)
                .setGlobalAtBatIdForPlayer(t, a.globalAtBatIdForPlayer(d))
                .deleteGlobalAtBatIdForPlayer(d);
        }),
        (o.prototype.swapPlayers = function (a, n) {
          var e = n.attributes,
            t = e.firstPlayerId,
            d = e.secondPlayerId,
            f = a.baseForPlayer(t),
            _ = a.baseForPlayer(d),
            S = a.globalAtBatIdForPlayer(t),
            P = a.globalAtBatIdForPlayer(d);
          return (
            (a = a
              .removePlayerFromBases(t)
              .removePlayerFromBases(d)
              .deleteGlobalAtBatIdForPlayer(t)
              .deleteGlobalAtBatIdForPlayer(d)),
            f !== void 0 &&
              (a = a
                .addAnimationOperation(t, 'subbedOut', f, f)
                .addAnimationOperation(d, 'subbedIn', f, f)
                .addRunnerToBase(f, d, this.battingTeam)
                .setGlobalAtBatIdForPlayer(d, S)),
            _ !== void 0 &&
              (a = a
                .addAnimationOperation(d, 'subbedOut', _, _)
                .addAnimationOperation(t, 'subbedIn', _, _)
                .addRunnerToBase(_, t, this.battingTeam)
                .setGlobalAtBatIdForPlayer(t, P)),
            a
          );
        }),
        (o.prototype.subPlayers = function (a, n) {
          var e = n.attributes,
            t = e.incomingPlayerId,
            d = e.outgoingPlayerId,
            f = e.applyToBaserunners;
          if (f !== !0) return a;
          var _ = a.baseForPlayer(d),
            S = a.baseForPlayer(t);
          return (
            (a = a.removePlayerFromBases(t).removePlayerFromBases(d)),
            _ === void 0
              ? a
              : ((a = a.addAnimationOperation(d, 'subbedOut', _, _)),
                S !== void 0 && (a = a.addAnimationOperation(t, 'subbedOut', S, S)),
                a
                  .addAnimationOperation(t, 'subbedIn', _, _)
                  .addRunnerToBase(_, t, this.battingTeam)
                  .setGlobalAtBatIdForPlayer(t, a.globalAtBatIdForPlayer(d))
                  .deleteGlobalAtBatIdForPlayer(d))
          );
        }),
        (o.prototype.endAtBat = function (a, n) {
          switch (n.attributes.reason) {
            case 'walk':
            case 'hit_by_pitch':
            case 'catcher_interference':
              return this.walk(a);
            case 'strikeout':
              return this.strikeout(a);
          }
          return a;
        }),
        (o.prototype.balk = function (a) {
          return this.advanceRunners(a, 1);
        }),
        (o.prototype.illegalPitchAdvance = function (a) {
          return (
            (a = this.advanceRunners(a, 1)),
            this.nextSituationState.lastEventWasWalk
              ? a
                  .addAnimationOperation(this.currentBatter, 'safe', 0, 1)
                  .addRunnerToBase(1, this.currentBatter, this.battingTeam)
                  .setGlobalAtBatIdForPlayer(this.currentBatter, this.lastLineupState.globalAtBatId)
              : a
          );
        }),
        (o.prototype.ballInPlay = function (a, n) {
          var e = n.attributes.playResult,
            t = r.ballInPlayResultConfigs[e],
            d =
              t.batterOut &&
              (this.outsBeforePlay === 2 ||
                n.attributes.playResult === 'dropped_third_strike_batter_out');
          return (
            d || (a = this.advanceRunners(a, t.bases)),
            t.batterOut
              ? a.addAnimationOperation(this.currentBatter, 'out', 0, t.bases)
              : a
                  .addAnimationOperation(this.currentBatter, 'safe', 0, t.bases)
                  .addRunnerToBase(t.bases, this.currentBatter, this.battingTeam)
                  .setGlobalAtBatIdForPlayer(this.currentBatter, this.lastLineupState.globalAtBatId)
          );
        }),
        (o.prototype.baseRunning = function (a, n) {
          var e,
            t = n.attributes,
            d = t.playType,
            f = t.runnerId,
            _ = t.base,
            S = t.playFlavor,
            P = r.baseRunningPlayTypeConfigs[d],
            I = (e = a.baseForPlayer(f)) !== null && e !== void 0 ? e : 4;
          return (
            I === 4 ? (a = a.unscoreRunner(this.battingTeam, f)) : (a = a.removePlayerFromBases(f)),
            P.runnerOut
              ? (a = a.addAnimationOperation(f, 'out', I, _))
              : !P.runnerOut && d !== 'did_not_score'
                ? I === 4 && _ === 3
                  ? (a = a
                      .addAnimationOperation(f, 'safe', I, _)
                      .addRunnerToBase(-3, f, this.battingTeam))
                  : I === 3 && _ === 2
                    ? (a = a
                        .addAnimationOperation(f, 'safe', I, _)
                        .addRunnerToBase(-2, f, this.battingTeam))
                    : (a = a
                        .addAnimationOperation(f, 'safe', I, _)
                        .addRunnerToBase(_, f, this.battingTeam))
                : d === 'did_not_score' &&
                  (S === 'inning_ended'
                    ? (a = a.addAnimationOperation(f, 'removed', _, _))
                    : (a = a.addAnimationOperation(f, 'poof', _, _))),
            a
          );
        }),
        (o.prototype.placeBatter = function (a, n) {
          return a
            .addAnimationOperation(this.currentBatter, 'safe', 0, n.attributes.base)
            .addRunnerToBase(n.attributes.base, this.currentBatter, this.battingTeam)
            .setGlobalAtBatIdForPlayer(this.currentBatter, this.lastLineupState.globalAtBatId);
        }),
        (o.prototype.placeRunner = function (a, n) {
          return a
            .addAnimationOperation(
              n.attributes.runnerId,
              'safe',
              n.attributes.base,
              n.attributes.base,
              'removed'
            )
            .addRunnerToBase(n.attributes.base, n.attributes.runnerId, this.battingTeam)
            .setGlobalAtBatIdForPlayer(n.attributes.runnerId, (0, s.uuid4)());
        }),
        (o.prototype.override = function (a, n) {
          if (
            ((n.attributes.inning !== void 0 || n.attributes.half !== void 0) &&
              (a = a.addAnimationOperationsToRemoveAllRunners().resetBases()),
            n.attributes.scores !== void 0)
          )
            for (var e = 0, t = n.attributes.scores; e < t.length; e++) {
              var d = t[e],
                f = d.teamId,
                _ = d.score;
              a = a.setScore(_, f);
            }
          return a;
        }),
        (o.prototype.pitch = function (a, n) {
          return (
            n.attributes.advancesRunners && (a = this.advanceRunners(a, 1)),
            this.nextSituationState.lastEventWasWalk
              ? this.walk(a)
              : this.nextSituationState.lastEventWasStrikeout
                ? this.strikeout(a)
                : a
          );
        }),
        o
      );
    })(p.VersionedStateEngine);
    return (gr.BaserunnerEngine = u), gr;
  }
  var ro = {},
    Jc;
  function Hy() {
    return (
      Jc ||
        ((Jc = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.ActionContextEngine = i.ActionContextState = i.IllegalPitchState = void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = c.__importStar(de()),
            v = c.__importStar(Ie()),
            h = c.__importStar(be()),
            s = c.__importStar(at()),
            l;
          (function (o) {
            (o.None = 'none'),
              (o.Ball = 'ball'),
              (o.BalkOne = 'balk_one'),
              (o.BalkMany = 'balk_many');
          })((l = i.IllegalPitchState || (i.IllegalPitchState = {})));
          var u = (function (o) {
            c.__extends(a, o);
            function a() {
              return (o !== null && o.apply(this, arguments)) || this;
            }
            return (
              (a.prototype.pitchActionContext = function (n, e, t) {
                var d = e.stateAfterEvent(this.nextEventOffset),
                  f = t.stateAfterEvent(this.nextEventOffset).baserunners,
                  _ = t.stateAfterEvent(this.nextEventOffset).runnersOnBase,
                  S;
                return (
                  n.enableIllegalPitch
                    ? _ > 1
                      ? (S = l.BalkMany)
                      : _ === 1
                        ? (S = l.BalkOne)
                        : (S = l.Ball)
                    : (S = l.None),
                  {
                    fieldersChoice: _ > 0,
                    droppedThirdStrike: d.strikes === 2 && (d.outs === 2 || f[1] === void 0),
                    doublePlay: d.outs < 2 && _ > 0,
                    fieldersChoiceDoublePlay: _ >= 2 && d.outs < 2,
                    triplePlay: _ >= 2 && d.outs === 0,
                    fieldersChoiceTriplePlay: _ === 3 && d.outs === 0,
                    infieldFly: d.outs < 2 && f[1] !== void 0 && f[2] !== void 0,
                    sacrificeFly: d.outs < 2 && f[3] !== void 0,
                    sacrificeBunt: d.outs < 2 && _ > 0,
                    foulTip: d.strikes === 2,
                    balk: _ > 0 && n.sport === 'baseball',
                    placeBatter: d.strikes === 0 && d.balls === 0 && d.outs === 0 && _ === 0,
                    foulBuntBatterOut: d.strikes === 2,
                    illegalPitch: S,
                  }
                );
              }),
              (a.prototype.eventWasErrorType = function (n) {
                return !!(
                  (s.isBallInPlayEvent(n) &&
                    r.contains(
                      ['sacrifice_bunt_error', 'sacrifice_fly_error', 'error'],
                      n.attributes.playResult
                    )) ||
                  (s.isEndAtBatEvent(n) && n.attributes.reason === 'catcher_interference') ||
                  (s.isBaseRunningEvent(n) && n.attributes.playType === 'advanced_on_error') ||
                  n.code === 'foul_error'
                );
              }),
              (a.prototype.falseBIPFlags = function () {
                return {
                  hit: !1,
                  batterOut: !1,
                  fieldersChoice: !1,
                  sacrificeFly: !1,
                  sacrificeBunt: !1,
                  sacrificeBuntInclError: !1,
                  sacrificeInclError: !1,
                  sacrifice: !1,
                  groundOut: !1,
                  error: !1,
                  droppedThirdStrike: !1,
                  catchableOut: !1,
                };
              }),
              (a.prototype.bipFlags = function (n, e) {
                return {
                  hit: s.isHitResult(n),
                  batterOut: r.contains(['batter_out', 'batter_out_advance_runners'], n),
                  fieldersChoice: n === 'fielders_choice',
                  sacrificeFly: n === 'sacrifice_fly',
                  sacrificeBunt: n === 'sacrifice_bunt',
                  sacrificeBuntInclError: r.contains(['sacrifice_bunt', 'sacrifice_bunt_error'], n),
                  sacrificeInclError: s.isSacrificeResult(n),
                  sacrifice: r.contains(['sacrifice_bunt', 'sacrifice_fly'], n),
                  groundOut: s.isGroundOutResult(e, n),
                  error: n === 'error',
                  droppedThirdStrike: r.contains(
                    ['dropped_third_strike', 'dropped_third_strike_batter_out'],
                    n
                  ),
                  catchableOut:
                    r.contains(['batter_out', 'batter_out_advance_runners'], n) &&
                    r.contains(['fly_ball', 'pop_fly', 'line_drive'], e),
                };
              }),
              (a.prototype.runnerSafeActionContext = function (n, e, t, d, f) {
                var _ = t.stateAfterEvent(this.nextEventOffset).baseForPlayer(d);
                if (_ !== void 0) {
                  var S = e.stateAfterEvent(this.get('lastPrimaryEventIndex')),
                    P = this.get('playInProgress'),
                    I = n[this.get('lastBaseballEventIndex')],
                    b = n[this.get('lastPrimaryEventIndex')],
                    E = this.eventWasErrorType(b),
                    T = this.get('lastBatterId'),
                    F = this.falseBIPFlags();
                  if (s.isBallInPlayEvent(b)) {
                    var R = [b.attributes.playResult, b.attributes.playType],
                      L = R[0],
                      x = R[1];
                    F = this.bipFlags(L, x);
                  }
                  var N = [!1, !1, !1],
                    M = N[0],
                    J = N[1],
                    D = N[2];
                  s.isPitchEvent(b) &&
                    (M = r.contains(
                      ['strike_swinging', 'strike_looking', 'ball', 'intentional_ball'],
                      b.attributes.result
                    )),
                    (J = S.lastEventWasStrikeout || S.lastEventWasWalk),
                    (D =
                      P &&
                      s.isBaseRunningEvent(b) &&
                      b.attributes.playType === 'advanced_on_error' &&
                      f > _),
                    (D = D || (E && d === T && f > _));
                  var $ = D;
                  return (
                    ($ = $ || (E && d !== T && f > _)),
                    ($ =
                      $ ||
                      (P &&
                        s.isBaseRunningEvent(I) &&
                        I.attributes.playType === 'advanced_on_error' &&
                        d !== T &&
                        f > _)),
                    {
                      attemptedPickoff: f === _,
                      stoleBase: f > _,
                      defensiveIndifference: f > _ && f !== 4,
                      onThrow: !E && f > _ && (P || F.hit || F.fieldersChoice || F.sacrificeFly),
                      throwingError: !P && d === T && f > _,
                      onLastPlay:
                        d !== T &&
                        f > _ &&
                        (F.hit ||
                          F.fieldersChoice ||
                          F.sacrifice ||
                          F.droppedThirdStrike ||
                          F.error ||
                          F.groundOut),
                      taggedUp: d !== T && f > _ && F.catchableOut,
                      onSamePitch: d !== T && P && f > _ && (M || J),
                      wildPitch: d !== T && !P && f > _ && (M || J),
                      passedBall: d !== T && !P && f > _ && (M || J),
                      onSameError: D,
                      onDifferentError: $,
                      fieldingError:
                        !E &&
                        !(
                          s.isBaseRunningEvent(I) && I.attributes.playType === 'advanced_on_error'
                        ) &&
                        f > _,
                      didNotAdvance:
                        f < _ &&
                        (E ||
                          F.hit ||
                          F.fieldersChoice ||
                          F.sacrificeFly ||
                          F.sacrificeBuntInclError ||
                          F.error ||
                          F.groundOut ||
                          S.lastEventWasStrikeout),
                      fieldersChoice:
                        F.fieldersChoice ||
                        F.sacrificeBuntInclError ||
                        F.droppedThirdStrike ||
                        F.error ||
                        F.groundOut,
                    }
                  );
                }
              }),
              (a.prototype.runnerOutActionContext = function (n, e, t, d) {
                var f = e.stateAfterEvent(this.nextEventOffset).baseForPlayer(t);
                if (f !== void 0) {
                  var _ = n[this.get('lastPrimaryEventIndex')],
                    S = this.falseBIPFlags();
                  if (s.isBallInPlayEvent(_)) {
                    var P = [_.attributes.playResult, _.attributes.playType],
                      I = P[0],
                      b = P[1];
                    S = this.bipFlags(I, b);
                  }
                  return {
                    caughtStealing: d > f,
                    caughtTaggingUp: d > f && (S.batterOut || S.sacrifice),
                    didNotTag: d === f && (S.batterOut || S.fieldersChoice || S.sacrifice),
                    pickedOff: d === f,
                    doubledOff:
                      (d === f && (S.batterOut || S.fieldersChoice || S.sacrifice)) ||
                      (d < f &&
                        (S.error ||
                          S.fieldersChoice ||
                          S.sacrificeBuntInclError ||
                          S.droppedThirdStrike ||
                          S.groundOut)),
                    outOnLastPlay:
                      S.hit ||
                      S.fieldersChoice ||
                      S.error ||
                      S.sacrificeInclError ||
                      (d !== f &&
                        (S.fieldersChoice ||
                          S.sacrificeBuntInclError ||
                          S.droppedThirdStrike ||
                          S.error ||
                          S.groundOut)) ||
                      (s.isBaseRunningEvent(_) && _.attributes.playType === 'advanced_on_error') ||
                      _.code === 'foul_error',
                  };
                }
              }),
              a
            );
          })(h.ImmutableState);
          i.ActionContextState = u;
          var y = (function (o) {
            c.__extends(a, o);
            function a(n, e, t, d) {
              var f = o.call(this, n) || this;
              return (
                (f.baseEvents = n),
                (f.situation = e),
                (f.lineup = t),
                (f.baserunners = d),
                f.stateHistory.pop(),
                f.stateHistory.push(f.initialState()),
                f
              );
            }
            return (
              (a.prototype.getBaseEvents = function () {
                return this.baseEvents;
              }),
              (a.prototype.initialState = function () {
                return new u(
                  p.fromJS({
                    playInProgress: !1,
                    lastBatterId: void 0,
                    lastPrimaryEventIndex: void 0,
                    lastBaseballEventIndex: void 0,
                  })
                );
              }),
              (a.prototype.endPlayInProgressWithLastBatterId = function (n) {
                var e = this.situation.stateBeforeEvent(this.nextEventOffset),
                  t = this.lineup.stateBeforeEvent(this.nextEventOffset);
                return n
                  .set('playInProgress', !1)
                  .set('lastPrimaryEventIndex', this.nextEventOffset)
                  .set('lastBatterId', t.currentBatter(e.atBatTeamId));
              }),
              (a.prototype.processOneEvent = function (n, e) {
                switch (e.code) {
                  case 'ball_in_play':
                  case 'end_at_bat':
                  case 'pitch':
                  case 'end_half':
                  case 'balk':
                  case 'illegal_pitch_advance':
                  case 'foul_error':
                  case 'place_batter':
                  case 'place_runner':
                  case 'replace_runner':
                  case 'swap_players':
                    n = this.endPlayInProgressWithLastBatterId(n);
                    break;
                  case 'sub_players':
                    var t = e.attributes.applyToBaserunners;
                    if (t) n = this.endPlayInProgressWithLastBatterId(n);
                    else return n;
                    break;
                  case 'base_running':
                    var d = e.attributes.playType;
                    s.baserunningRelatedToLastBIP(e) ||
                    r.contains(['passed_ball', 'wild_pitch', 'on_same_pitch', 'on_same_error'], d)
                      ? (n = n.set('playInProgress', !0))
                      : d === 'advanced_on_error'
                        ? (n = n
                            .set('playInProgress', !0)
                            .set('lastPrimaryEventIndex', this.nextEventOffset))
                        : (n = this.endPlayInProgressWithLastBatterId(n));
                    break;
                  case 'override':
                    s.changesInning(e) &&
                      (n = n
                        .set('playInProgress', !1)
                        .set('lastPrimaryEventIndex', this.nextEventOffset));
                    break;
                  default:
                    return n;
                }
                return n.set('lastBaseballEventIndex', this.nextEventOffset);
              }),
              a
            );
          })(v.VersionedStateEngine);
          i.ActionContextEngine = y;
        })(ro)),
      ro
    );
  }
  var no = {},
    pt = {},
    Yc;
  function Qc() {
    if (Yc) return pt;
    (Yc = 1),
      Object.defineProperty(pt, '__esModule', { value: !0 }),
      (pt.valueFromMaybe = pt.maybeIsSet = pt.unsetMaybe = pt.maybeWithValue = pt.Nothing = void 0);
    var i = (function () {
      function h() {}
      return h;
    })();
    pt.Nothing = i;
    function c(h) {
      return { value: h, isSet: !0 };
    }
    pt.maybeWithValue = c;
    function r() {
      return { value: void 0, isSet: !1 };
    }
    pt.unsetMaybe = r;
    function p(h) {
      return h.isSet;
    }
    pt.maybeIsSet = p;
    function v(h) {
      return h.isSet ? h.value : new i();
    }
    return (pt.valueFromMaybe = v), pt;
  }
  var Xc;
  function Ny() {
    return (
      Xc ||
        ((Xc = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.EarnedRunEngine = i.EarnedRunState = i.Runner = i.runnerRecord = void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = c.__importStar(de()),
            v = c.__importStar(Ie()),
            h = c.__importStar(be()),
            s = c.__importStar(Pt()),
            l = c.__importStar(Qc());
          i.runnerRecord = p.Record({
            runnerId: void 0,
            pitcherId: void 0,
            qualified: !1,
            earnedBase: void 0,
            leadoff: !1,
            walked: !1,
            reachedOnCatcherInterference: !1,
            out: !1,
            didNotScore: !1,
            scoredOnEventIndex: void 0,
            unscoredOnEventIndex: void 0,
            effectivelyOutOnEventIndex: void 0,
          });
          var u = (function (a) {
            c.__extends(n, a);
            function n() {
              return (a !== null && a.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(n.prototype, 'isEffectivelyOut', {
                get: function () {
                  return this.reachedOnCatcherInterference
                    ? this.out
                    : (this.qualified === !1 && this.pitcherId !== void 0) ||
                        this.earnedBase === void 0;
                },
                enumerable: !1,
                configurable: !0,
              }),
              n
            );
          })(i.runnerRecord);
          i.Runner = u;
          var y = (function (a) {
            c.__extends(n, a);
            function n() {
              return (a !== null && a.apply(this, arguments)) || this;
            }
            return (
              (n.prototype.clear = function () {
                var e = this.update('runners', function (t) {
                  return t.clear();
                });
                return e
                  .set('lastBallInPlay', {})
                  .set('currentPlayIsError', !1)
                  .set('nextBatterIsLeadoff', !0);
              }),
              Object.defineProperty(n.prototype, 'runners', {
                get: function () {
                  return this.get('runners').toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'walkOwnerId', {
                get: function () {
                  return this.get('walkOwnerId');
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'lastBallInPlay', {
                get: function () {
                  return this.get('lastBallInPlay');
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'currentPlayIsError', {
                get: function () {
                  return this.get('currentPlayIsError');
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'effectiveOutsForTeam', {
                get: function () {
                  return Math.min(
                    3,
                    this.get('runners').reduce(function (e, t) {
                      return t.isEffectivelyOut && e++, e;
                    }, 0)
                  );
                },
                enumerable: !1,
                configurable: !0,
              }),
              (n.prototype.effectiveOutsForPitcher = function (e) {
                var t = !1,
                  d = !0;
                return Math.min(
                  3,
                  this.get('runners').reduce(function (f, _) {
                    return (
                      _.out === !0
                        ? f++
                        : _.pitcherId === e
                          ? ((t = !0), d && _.isEffectivelyOut && f++)
                          : t && (d = !1),
                      f
                    );
                  }, 0)
                );
              }),
              (n.prototype.currentRunner = function (e) {
                return this.get('runners').find(function (t) {
                  return t.runnerId === e && !t.out;
                });
              }),
              (n.prototype.currentRunnerIndex = function (e) {
                return this.get('runners').findIndex(function (t) {
                  return t.runnerId === e && !t.out;
                });
              }),
              (n.prototype.mostRecentRunner = function (e) {
                return this.get('runners').find(function (t) {
                  return t.runnerId === e;
                });
              }),
              (n.prototype.runnersScoredOnEventIndex = function (e) {
                return this.get('runners')
                  .filter(function (t) {
                    return t.scoredOnEventIndex === e;
                  })
                  .toJS();
              }),
              (n.prototype.runnersUnscoredOnEventIndex = function (e) {
                return this.get('runners')
                  .filter(function (t) {
                    return t.unscoredOnEventIndex === e;
                  })
                  .toJS();
              }),
              (n.prototype.runnersEffectivelyOutOnEventIndex = function (e) {
                return this.get('runners')
                  .filter(function (t) {
                    return t.effectivelyOutOnEventIndex === e;
                  })
                  .toJS();
              }),
              (n.prototype.reconcileRunners = function (e) {
                var t = 1;
                return this.update('runners', function (d) {
                  return d
                    .map(function (f) {
                      var _ = f;
                      return (
                        _.isEffectivelyOut ||
                          (t > _.earnedBase &&
                            (_.earnedBase < 4 && t === 4 && (_ = _.set('scoredOnEventIndex', e)),
                            (_ = _.set('earnedBase', t))),
                          (t = Math.min(4, _.earnedBase + 1))),
                        _
                      );
                    })
                    .toList();
                });
              }),
              (n.prototype.addRunner = function (e, t) {
                var d = this.update('runners', function (f) {
                  return f.unshift(e);
                });
                return d.reconcileRunners(t);
              }),
              (n.prototype.placeRunnerManually = function (e, t) {
                return this.addRunner(e, t);
              }),
              (n.prototype.addRunnerFromBatting = function (e, t) {
                var d = this;
                return (
                  this.get('nextBatterIsUnqualified') === !0 &&
                    ((e = e.set('qualified', !1).set('earnedBase', void 0)),
                    (d = d.set('nextBatterIsUnqualified', !1))),
                  this.get('nextBatterIsLeadoff') === !0 &&
                    ((e = e.set('leadoff', !0)), (d = d.set('nextBatterIsLeadoff', !1))),
                  e.isEffectivelyOut && (e = e.set('effectivelyOutOnEventIndex', t)),
                  d.addRunner(e, t)
                );
              }),
              (n.prototype.advanceRunner = function (e, t, d) {
                return this.update('runners', function (f) {
                  return f
                    .map(function (_) {
                      var S = _;
                      if (S.runnerId === e) {
                        var P = Math.min(S.earnedBase + t, 4);
                        P === 4 && S.earnedBase < 4
                          ? (S = S.set('scoredOnEventIndex', d))
                          : P < 4 && S.earnedBase === 4 && (S = S.set('unscoredOnEventIndex', d)),
                          (S = S.set('earnedBase', P));
                      }
                      return S;
                    })
                    .toList();
                }).reconcileRunners(d);
              }),
              (n.prototype.advanceAllRunners = function (e, t) {
                return this.update('runners', function (d) {
                  return d
                    .map(function (f) {
                      var _ = f;
                      if (!_.isEffectivelyOut) {
                        var S = Math.min(4, _.earnedBase + e);
                        S === 4 && _.earnedBase < 4 && (_ = _.set('scoredOnEventIndex', t)),
                          (_ = _.set('earnedBase', S));
                      }
                      return _;
                    })
                    .toList();
                });
              }),
              (n.prototype.swapRunners = function (e, t) {
                var d = this.currentRunnerIndex(e),
                  f = this.currentRunnerIndex(t);
                return d === -1 && f === -1
                  ? this
                  : d !== -1 && f !== -1
                    ? d > f
                      ? this.replaceRunner(e, t).replaceRunner(t, e)
                      : this.replaceRunner(t, e).replaceRunner(e, t)
                    : d !== -1
                      ? this.replaceRunner(e, t)
                      : this.replaceRunner(t, e);
              }),
              (n.prototype.replaceRunner = function (e, t) {
                var d = !1;
                return this.update('runners', function (f) {
                  return f
                    .map(function (_) {
                      var S = _;
                      return (
                        !d && S.runnerId === e && !S.out && ((S = S.set('runnerId', t)), (d = !0)),
                        S
                      );
                    })
                    .toList();
                });
              }),
              (n.prototype.setQualified = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'qualified', t);
              }),
              (n.prototype.setReachedOnCatcherInterference = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'reachedOnCatcherInterference', t);
              }),
              (n.prototype.setPitcher = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'pitcherId', t);
              }),
              (n.prototype.setEarnedBase = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'earnedBase', t);
              }),
              (n.prototype.setDidNotScore = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'didNotScore', t);
              }),
              (n.prototype.setScoredOnEventIndex = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'scoredOnEventIndex', t);
              }),
              (n.prototype.setUnscoredOnEventIndex = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'unscoredOnEventIndex', t);
              }),
              (n.prototype.setOut = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'out', t);
              }),
              (n.prototype.setEffectivelyOutOnEventIndexIfUnset = function (e, t) {
                return this.setNonOutRunnerProperty(e, 'effectivelyOutOnEventIndex', t, !0);
              }),
              (n.prototype.setNonOutRunnerProperty = function (e, t, d, f) {
                var _ = !1;
                return this.update('runners', function (S) {
                  return S.map(function (P) {
                    var I = P;
                    return (
                      !_ &&
                        I.runnerId === e &&
                        !I.out &&
                        (f !== !0 || I.get(t) === void 0) &&
                        ((I = I.set(t, d)), (_ = !0)),
                      I
                    );
                  }).toList();
                });
              }),
              n
            );
          })(h.ImmutableState);
          i.EarnedRunState = y;
          var o = (function (a) {
            c.__extends(n, a);
            function n(e, t, d, f, _) {
              var S = a.call(this, e) || this;
              return (
                (S.baseEvents = e),
                (S.situation = t),
                (S.lineup = d),
                (S.fielders = f),
                (S.baserunners = _),
                S
              );
            }
            return (
              (n.prototype.processOneEvent = function (e, t) {
                switch (((e = this.reconcileInning(e)), (e = this.updateWalkOwner(e)), t.code)) {
                  case 'pitch':
                    e = this.pitch(e, t);
                    break;
                  case 'end_at_bat':
                    e = this.endAtBat(e, t);
                    break;
                  case 'ball_in_play':
                    r.contains(
                      ['dropped_third_strike', 'dropped_third_strike_batter_out'],
                      t.attributes.playResult
                    )
                      ? (e = this.droppedThirdStrike(e, t))
                      : (e = this.ballInPlay(e, t));
                    break;
                  case 'base_running':
                    e = this.baseRunning(e, t);
                    break;
                  case 'place_batter':
                    e = this.placeBatter(e, t);
                    break;
                  case 'place_runner':
                    e = this.placeRunner(e, t);
                    break;
                  case 'balk':
                    e = this.balk(e);
                    break;
                  case 'illegal_pitch_advance':
                    e = this.illegalPitchAdvance(e);
                    break;
                  case 'end_half':
                    e = e.clear();
                    break;
                  case 'replace_runner':
                    e = this.replaceRunner(e, t);
                    break;
                  case 'swap_players':
                    e = this.swapPlayers(e, t);
                    break;
                  case 'sub_players':
                    e = this.subPlayers(e, t);
                    break;
                  case 'foul_error':
                    e = this.foulError(e);
                    break;
                }
                return e;
              }),
              (n.prototype.initialState = function () {
                var e = new y(
                  p.fromJS({
                    runners: [],
                    lastBallInPlay: {},
                    currentPlayIsError: !1,
                    nextBatterIsUnqualified: !1,
                    nextBatterIsLeadoff: !0,
                    walkOwnerId: l.unsetMaybe(),
                  })
                );
                return e;
              }),
              Object.defineProperty(n.prototype, 'situationBeforeEvent', {
                get: function () {
                  return this.situation.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'situationAfterEvent', {
                get: function () {
                  return this.situation.stateAfterEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'lineupBeforeEvent', {
                get: function () {
                  return this.lineup.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'fieldersBeforeEvent', {
                get: function () {
                  return this.fielders.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(n.prototype, 'baserunnersBeforeEvent', {
                get: function () {
                  return this.baserunners.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              (n.prototype.updateWalkOwner = function (e) {
                return (
                  this.situationBeforeEvent.pitchesThisAtBat === 0
                    ? (e = e.set('walkOwnerId', l.unsetMaybe()))
                    : !l.maybeIsSet(e.walkOwnerId) &&
                      this.situationAfterEvent.balls >= 2 &&
                      this.situationAfterEvent.balls > this.situationAfterEvent.strikes &&
                      (e = e.set(
                        'walkOwnerId',
                        l.maybeWithValue(
                          this.fieldersBeforeEvent.playerForPosition(
                            this.situationBeforeEvent.inFieldTeamId,
                            'P'
                          )
                        )
                      )),
                  e
                );
              }),
              (n.prototype.reconcileInning = function (e) {
                return this.situationBeforeEvent.lastEventEndedInning ? e.clear() : e;
              }),
              (n.prototype.pitcherIdForWalk = function (e) {
                return l.maybeIsSet(e.walkOwnerId)
                  ? l.valueFromMaybe(e.walkOwnerId)
                  : this.fieldersBeforeEvent.playerForPosition(
                      this.situationBeforeEvent.inFieldTeamId,
                      'P'
                    );
              }),
              (n.prototype.pitch = function (e, t) {
                return (
                  t.attributes.advancesRunners &&
                    (e = e.advanceAllRunners(1, this.nextEventOffset)),
                  this.situationAfterEvent.lastEventWasWalk
                    ? e.addRunnerFromBatting(
                        new u({
                          runnerId: this.lineupBeforeEvent.currentBatter(
                            this.situationBeforeEvent.atBatTeamId
                          ),
                          pitcherId: this.pitcherIdForWalk(e),
                          qualified: !0,
                          earnedBase: 1,
                          walked: !0,
                        }),
                        this.nextEventOffset
                      )
                    : this.situationAfterEvent.lastEventWasStrikeout
                      ? e.addRunnerFromBatting(
                          new u({
                            runnerId: this.lineupBeforeEvent.currentBatter(
                              this.situationBeforeEvent.atBatTeamId
                            ),
                            pitcherId: this.fieldersBeforeEvent.playerForPosition(
                              this.situationBeforeEvent.inFieldTeamId,
                              'P'
                            ),
                            qualified: !0,
                            earnedBase: void 0,
                            walked: !1,
                            out: !0,
                            effectivelyOutOnEventIndex: this.nextEventOffset,
                          }),
                          this.nextEventOffset
                        )
                      : e
                );
              }),
              (n.prototype.endAtBat = function (e, t) {
                var d = t.attributes.reason === 'strikeout',
                  f = t.attributes.reason !== 'catcher_interference',
                  _ =
                    d || (!f && t.attributes.reason !== 'catcher_interference')
                      ? this.nextEventOffset
                      : void 0,
                  S;
                return (
                  t.attributes.reason !== 'walk'
                    ? (S = this.fieldersBeforeEvent.playerForPosition(
                        this.situationBeforeEvent.inFieldTeamId,
                        'P'
                      ))
                    : (S = this.pitcherIdForWalk(e)),
                  e.addRunnerFromBatting(
                    new u({
                      runnerId: this.lineupBeforeEvent.currentBatter(
                        this.situationBeforeEvent.atBatTeamId
                      ),
                      pitcherId: S,
                      qualified: f,
                      earnedBase: d || !f ? void 0 : 1,
                      walked: t.attributes.reason === 'walk',
                      reachedOnCatcherInterference: t.attributes.reason === 'catcher_interference',
                      out: d,
                      effectivelyOutOnEventIndex: _,
                    }),
                    this.nextEventOffset
                  )
                );
              }),
              (n.prototype.updateStateForBallInPlay = function (e, t) {
                var d = s.ballInPlayResultConfigs[t.attributes.playResult];
                return e
                  .set('lastBallInPlay', {
                    batterId: this.lineupBeforeEvent.currentBatter(
                      this.situationBeforeEvent.atBatTeamId
                    ),
                    ownerId: this.fieldersBeforeEvent.playerForPosition(
                      this.situationBeforeEvent.inFieldTeamId,
                      'P'
                    ),
                    playResult: t.attributes.playResult,
                  })
                  .set('currentPlayIsError', d.error);
              }),
              (n.prototype.advanceRunnersForBallInPlay = function (e, t, d) {
                if (d && e.get('nextBatterIsUnqualified') !== !0) {
                  var f = s.ballInPlayResultConfigs[t.attributes.playResult];
                  return e.advanceAllRunners(f.bases, this.nextEventOffset);
                }
                return e;
              }),
              (n.prototype.droppedThirdStrike = function (e, t) {
                var d = !1;
                if (t.attributes.cause === 'wild_pitch') {
                  for (var f = void 0, _ = 0, S = [1, 2, 3]; _ < S.length; _++) {
                    var P = S[_];
                    if (((f = this.baserunnersBeforeEvent.playerAtBase(P)), f !== void 0)) break;
                  }
                  if (f === void 0) d = !0;
                  else {
                    var I = e.currentRunner(f);
                    I.qualified ? I.qualified && I.earnedBase > 1 && (d = !0) : (d = !0);
                  }
                }
                return (
                  (e = this.advanceRunnersForBallInPlay(e, t, t.attributes.cause === 'wild_pitch')),
                  (e = e.addRunnerFromBatting(
                    new u({
                      runnerId: this.lineupBeforeEvent.currentBatter(
                        this.situationBeforeEvent.atBatTeamId
                      ),
                      pitcherId: this.fieldersBeforeEvent.playerForPosition(
                        this.situationBeforeEvent.inFieldTeamId,
                        'P'
                      ),
                      qualified: d,
                      earnedBase:
                        !d || t.attributes.playResult === 'dropped_third_strike_batter_out'
                          ? void 0
                          : 1,
                      walked: !1,
                      out: t.attributes.playResult === 'dropped_third_strike_batter_out',
                      effectivelyOutOnEventIndex:
                        !d || t.attributes.playResult === 'dropped_third_strike_batter_out'
                          ? this.nextEventOffset
                          : void 0,
                    }),
                    this.nextEventOffset
                  )),
                  this.updateStateForBallInPlay(e, t)
                );
              }),
              (n.prototype.ballInPlay = function (e, t) {
                var d = s.ballInPlayResultConfigs[t.attributes.playResult],
                  f = !d.error;
                return (
                  (e = this.advanceRunnersForBallInPlay(e, t, f)),
                  (e = e.addRunnerFromBatting(
                    new u({
                      runnerId: this.lineupBeforeEvent.currentBatter(
                        this.situationBeforeEvent.atBatTeamId
                      ),
                      pitcherId: this.fieldersBeforeEvent.playerForPosition(
                        this.situationBeforeEvent.inFieldTeamId,
                        'P'
                      ),
                      qualified: f,
                      earnedBase: !f || d.batterOut ? void 0 : d.bases,
                      walked: !1,
                      out: d.batterOut,
                      scoredOnEventIndex: f && d.bases === 4 ? this.nextEventOffset : void 0,
                      effectivelyOutOnEventIndex: !f || d.batterOut ? this.nextEventOffset : void 0,
                    }),
                    this.nextEventOffset
                  )),
                  this.updateStateForBallInPlay(e, t)
                );
              }),
              (n.prototype.baseRunning = function (e, t) {
                if (
                  e.currentPlayIsError &&
                  r.contains(
                    ['advanced_on_last_play', 'remained_on_last_play', 'on_same_pitch'],
                    t.attributes.playType
                  )
                )
                  return e;
                if (t.attributes.playType === 'did_not_score')
                  return (
                    (e = e.setDidNotScore(t.attributes.runnerId, !0)),
                    e.currentRunner(t.attributes.runnerId).scoredOnEventIndex !== void 0 &&
                      (e = e.setUnscoredOnEventIndex(t.attributes.runnerId, this.nextEventOffset)),
                    e
                  );
                var d = s.baseRunningPlayTypeConfigs[t.attributes.playType];
                if (
                  ((d.error || t.attributes.playType === 'passed_ball') &&
                    (e = e.set('currentPlayIsError', !0)),
                  d.runnerOut)
                ) {
                  if (
                    t.attributes.playType === 'out_on_last_play' &&
                    e.lastBallInPlay.playResult === 'fielders_choice' &&
                    e.lastBallInPlay.batterId !== t.attributes.runnerId
                  ) {
                    var f = e.currentRunner(t.attributes.runnerId);
                    f.qualified
                      ? (e = e.setPitcher(
                          e.lastBallInPlay.batterId,
                          e.currentRunner(t.attributes.runnerId).pitcherId
                        ))
                      : (e = e
                          .setQualified(e.lastBallInPlay.batterId, !1)
                          .setEarnedBase(e.lastBallInPlay.batterId, void 0)
                          .setEffectivelyOutOnEventIndexIfUnset(
                            e.lastBallInPlay.batterId,
                            this.nextEventOffset
                          ));
                  }
                  e.currentRunner(t.attributes.runnerId).earnedBase === 4 &&
                    (e = e.setUnscoredOnEventIndex(t.attributes.runnerId, this.nextEventOffset)),
                    (e = e
                      .setEarnedBase(t.attributes.runnerId, void 0)
                      .setEffectivelyOutOnEventIndexIfUnset(
                        t.attributes.runnerId,
                        this.nextEventOffset
                      )
                      .setOut(t.attributes.runnerId, !0));
                } else {
                  var _ = this.baserunnersBeforeEvent.baseForPlayer(t.attributes.runnerId),
                    S = t.attributes.base - (_ === void 0 ? 4 : _);
                  S !== 0 &&
                    !r.contains(
                      ['advanced_on_error', 'on_same_error', 'passed_ball'],
                      t.attributes.playType
                    ) &&
                    (e = e.advanceRunner(t.attributes.runnerId, S, this.nextEventOffset));
                }
                return e;
              }),
              (n.prototype.placeBatter = function (e, t) {
                return e.placeRunnerManually(
                  new u({
                    runnerId: this.lineupBeforeEvent.currentBatter(
                      this.situationBeforeEvent.atBatTeamId
                    ),
                    pitcherId: void 0,
                    qualified: !1,
                    earnedBase: t.attributes.base,
                    walked: !1,
                    out: !1,
                  }),
                  this.nextEventOffset
                );
              }),
              (n.prototype.placeRunner = function (e, t) {
                return e.placeRunnerManually(
                  new u({
                    runnerId: t.attributes.runnerId,
                    pitcherId: void 0,
                    qualified: !1,
                    earnedBase: t.attributes.base,
                    walked: !1,
                    out: !1,
                  }),
                  this.nextEventOffset
                );
              }),
              (n.prototype.balk = function (e) {
                return e.advanceAllRunners(1, this.nextEventOffset);
              }),
              (n.prototype.illegalPitchAdvance = function (e) {
                return (
                  (e = e.advanceAllRunners(1, this.nextEventOffset)),
                  this.situationAfterEvent.lastEventWasWalk &&
                    (e = e.addRunnerFromBatting(
                      new u({
                        runnerId: this.lineupBeforeEvent.currentBatter(
                          this.situationBeforeEvent.atBatTeamId
                        ),
                        pitcherId: this.pitcherIdForWalk(e),
                        qualified: !0,
                        earnedBase: 1,
                        walked: !0,
                      }),
                      this.nextEventOffset
                    )),
                  e
                );
              }),
              (n.prototype.replaceRunner = function (e, t) {
                return e.replaceRunner(
                  t.attributes.outgoingPlayerId,
                  t.attributes.incomingPlayerId
                );
              }),
              (n.prototype.swapPlayers = function (e, t) {
                return e.swapRunners(t.attributes.firstPlayerId, t.attributes.secondPlayerId);
              }),
              (n.prototype.subPlayers = function (e, t) {
                return (
                  t.attributes.applyToBaserunners &&
                    (e = e.replaceRunner(
                      t.attributes.outgoingPlayerId,
                      t.attributes.incomingPlayerId
                    )),
                  e
                );
              }),
              (n.prototype.foulError = function (e) {
                return e.set('nextBatterIsUnqualified', !0);
              }),
              n
            );
          })(v.VersionedStateEngine);
          i.EarnedRunEngine = o;
        })(no)),
      no
    );
  }
  var Sr = {},
    Zc;
  function jy() {
    if (Zc) return Sr;
    (Zc = 1),
      Object.defineProperty(Sr, '__esModule', { value: !0 }),
      (Sr.PlaysEngine = Sr.PlaysEngineState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = at(),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(u.prototype, 'eventIndexInPlay', {
            get: function () {
              return this.get('eventIndexInPlay');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'eventStartsNewPlay', {
            get: function () {
              return this.get('eventStartsNewPlay');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'isPartOfPlay', {
            get: function () {
              return this.get('isPartOfPlay');
            },
            enumerable: !1,
            configurable: !0,
          }),
          u
        );
      })(v.ImmutableState);
    Sr.PlaysEngineState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y, o) {
        var a = l.call(this, y) || this;
        return (a.situation = o), a;
      }
      return (
        (u.prototype.initialState = function () {
          return new h(c.fromJS({ eventIndexInPlay: 0, eventStartsNewPlay: !1, isPartOfPlay: !1 }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          if (!(0, r.eventRelatesToAtBatTeam)(o)) y = y.set('isPartOfPlay', !1);
          else if ((0, r.baserunningRelatedToLastBIP)(o))
            (y = y.set('eventIndexInPlay', y.eventIndexInPlay + 1)),
              (y = y.set('eventStartsNewPlay', !1)),
              (y = y.set('isPartOfPlay', !0));
          else if ((0, r.isPitchEvent)(o)) {
            var a = this.situation.stateAfterEvent(this.nextEventOffset).lastEventWasStrikeout;
            (y = y.set('isPartOfPlay', a)), (y = y.set('eventStartsNewPlay', a));
          } else
            ((0, r.isBallInPlayEvent)(o) ||
              (0, r.isEndAtBatEvent)(o) ||
              (0, r.baserunningUnrelatedToLastBIP)(o)) &&
              ((y = y.set('eventIndexInPlay', 0)),
              (y = y.set('eventStartsNewPlay', !0)),
              (y = y.set('isPartOfPlay', !0)));
          return y;
        }),
        u
      );
    })(p.VersionedStateEngine);
    return (Sr.PlaysEngine = s), Sr;
  }
  var ao = {},
    ed;
  function qy() {
    return (
      ed ||
        ((ed = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.HistoryEngine =
              i.HistoryState =
              i.CourtesyRunnerHistoryRecord =
              i.courtesyRunnerHistoryRecord =
              i.PositionHistoryRecord =
              i.positionHistoryRecord =
              i.FielderHistoryRecord =
              i.fielderHistoryRecord =
              i.PitcherHistoryRecord =
              i.pitcherHistoryRecord =
              i.BattingHistoryRecord =
              i.battingHistoryRecord =
                void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = c.__importStar(de()),
            v = c.__importStar(Ie()),
            h = c.__importStar(be());
          i.battingHistoryRecord = p.Record({
            batterId: void 0,
            inning: void 0,
            firstAppearance: !1,
            position: void 0,
          });
          var s = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return t;
          })(i.battingHistoryRecord);
          (i.BattingHistoryRecord = s),
            (i.pitcherHistoryRecord = p.Record({
              pitcherId: void 0,
              inning: void 0,
              firstAppearance: !1,
            }));
          var l = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return t;
          })(i.pitcherHistoryRecord);
          (i.PitcherHistoryRecord = l),
            (i.fielderHistoryRecord = p.Record({
              position: void 0,
              inning: void 0,
              eventId: void 0,
            }));
          var u = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return t;
          })(i.fielderHistoryRecord);
          (i.FielderHistoryRecord = u),
            (i.positionHistoryRecord = p.Record({
              fielderId: void 0,
              inning: void 0,
              eventId: void 0,
            }));
          var y = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return t;
          })(i.positionHistoryRecord);
          (i.PositionHistoryRecord = y),
            (i.courtesyRunnerHistoryRecord = p.Record({ incomingId: void 0, outgoingId: void 0 }));
          var o = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return t;
          })(i.courtesyRunnerHistoryRecord);
          i.CourtesyRunnerHistoryRecord = o;
          var a = (function (e) {
            c.__extends(t, e);
            function t() {
              return (e !== null && e.apply(this, arguments)) || this;
            }
            return (
              (t.prototype.pitcherHistory = function (d) {
                return this.getIn([d, 'pitcherHistory']).toJS();
              }),
              (t.prototype.fielderHistory = function (d) {
                return this.getIn([d, 'fielderHistory']).toJS();
              }),
              (t.prototype.positionHistory = function (d) {
                return this.getIn([d, 'positionHistory']).toJS();
              }),
              (t.prototype.battingHistory = function (d) {
                return this.getIn([d, 'battingHistory']).toJS();
              }),
              (t.prototype.courtesyRunnerHistory = function (d) {
                return this.getIn([d, 'courtesyRunnerHistory']).toJS();
              }),
              (t.prototype.orderedPlayersNotInHistory = function (d, f) {
                var _ = this.getIn([f, 'battersInHistory']),
                  S = d.stateAfterEvent(this.nextEventOffset).battersImmutable(f);
                return S.filter(function (P) {
                  return P !== void 0 && !_.includes(P);
                }).toJS();
              }),
              (t.prototype.addedBatters = function (d) {
                return this.getIn([d, 'addedBatter']).toJS();
              }),
              (t.prototype.removedBatters = function (d) {
                return this.getIn([d, 'removedBatter']);
              }),
              (t.prototype.addedPitchers = function (d) {
                return this.getIn([d, 'addedPitcher']).toJS();
              }),
              (t.prototype.playerOrderForBoxscore = function (d, f) {
                for (
                  var _ = [],
                    S = d.stateAfterEvent(this.nextEventOffset).batters(f),
                    P = this.battingHistory(f),
                    I = this.removedBatters(f),
                    b = new Set(),
                    E = 0;
                  E < Math.max(P.length, S.length);
                  E++
                ) {
                  _.push([]);
                  var T = P[E];
                  if (T !== void 0)
                    for (var F = 0, R = T; F < R.length; F++) {
                      var L = R[F];
                      L.firstAppearance &&
                        !I.contains(L.batterId) &&
                        (_[E].push(L.batterId), b.add(L.batterId));
                    }
                }
                for (var x = 0, N = this.orderedPlayersNotInHistory(d, f); x < N.length; x++) {
                  var M = N[x];
                  if (!I.contains(M)) {
                    var J = S.indexOf(M);
                    _[J].push(M), b.add(M);
                  }
                }
                return (
                  this.addedBatters(f).forEach(function (D) {
                    b.has(D) || _.push([D]);
                  }),
                  _
                );
              }),
              (t.prototype.orderedPitchersForBoxscore = function (d) {
                var f = this.getIn([d, 'removedPitcher']),
                  _ = [],
                  S = new Set();
                return (
                  this.pitcherHistory(d).forEach(function (P) {
                    f.contains(P.pitcherId) || (_.push(P), S.add(P.pitcherId));
                  }),
                  this.addedPitchers(d).forEach(function (P) {
                    S.has(P) || _.push({ pitcherId: P, inning: 1, firstAppearance: !0 });
                  }),
                  _
                );
              }),
              (t.prototype.courtesyRunnerOrderForBoxscore = function (d, f) {
                return this.courtesyRunnerHistory(f).reduce(function (_, S) {
                  var P = _.indexOf(S.incomingId);
                  return (
                    P >= 0 && _.splice(P, 1), r.contains(d, S.incomingId) || _.push(S.incomingId), _
                  );
                }, []);
              }),
              (t.prototype.initializeForTeam = function (d) {
                var f = this.set(
                  d,
                  p.Map({
                    pitcherHistory: p.List(),
                    fielderHistory: p.Map({}),
                    positionHistory: p.Map({}),
                    battingHistory: p.List(),
                    courtesyRunnerHistory: p.List(),
                    addedBatter: p.List(),
                    removedBatter: p.Set(),
                    addedPitcher: p.List(),
                    removedPitcher: p.Set(),
                  })
                );
                return f.setIn([d, 'battersInHistory'], p.Set());
              }),
              (t.prototype.batterIsInHistory = function (d, f) {
                return this.getIn([d, 'battersInHistory']).includes(f);
              }),
              (t.prototype.addBatterToHistory = function (d, f, _, S, P) {
                var I = this;
                this.getIn([d, 'battingHistory']).size < P + 1 &&
                  (I = I.deepSetSize([d, 'battingHistory'], P + 1, p.List()));
                var b = I.get(d);
                return (
                  (b = b.update('battingHistory', function (E) {
                    var T = E.get(P);
                    T === void 0 && (T = p.List());
                    var F = T.last();
                    return (
                      (F === void 0 || F.batterId !== f || F.position !== _) &&
                        (T = T.push(
                          new s({
                            batterId: f,
                            inning: S,
                            firstAppearance: !b.get('battersInHistory').includes(f),
                            position: _,
                          })
                        )),
                      E.set(P, T)
                    );
                  })),
                  (b = b.update('battersInHistory', function (E) {
                    return E.add(f);
                  })),
                  I.set(d, b)
                );
              }),
              (t.prototype.addCourtesyRunnerToHistory = function (d, f, _) {
                var S = this,
                  P = S.get(d);
                return (
                  (P = P.update('courtesyRunnerHistory', function (I) {
                    return I.push(new o({ outgoingId: f, incomingId: _ }));
                  })),
                  S.set(d, P)
                );
              }),
              (t.prototype.replaceLastPositionForBatterInHistory = function (d, f, _, S) {
                var P = this,
                  I = P.get(d);
                return (
                  (I = I.update('battingHistory', function (b) {
                    if (S === void 0) return b;
                    var E = b.get(S);
                    if (E === void 0) return b;
                    var T = E.last();
                    return T === void 0 || T.batterId !== f
                      ? b
                      : ((E = E.update(E.size - 1, function (F) {
                          return F.set('position', _);
                        })),
                        b.set(S, E));
                  })),
                  P.set(d, I)
                );
              }),
              (t.prototype.addStatEditPlayer = function (d, f, _) {
                var S = this,
                  P = S.getIn([d, 'added'.concat(_)]),
                  I = S.getIn([d, 'removed'.concat(_)]);
                return (
                  P.includes(f) || ((P = P.push(f)), (S = S.setIn([d, 'added'.concat(_)], P))),
                  I.includes(f) && ((I = I.delete(f)), (S = S.setIn([d, 'removed'.concat(_)], I))),
                  S
                );
              }),
              (t.prototype.removeStatEditPlayer = function (d, f, _) {
                var S = this,
                  P = S.getIn([d, 'removed'.concat(_)]),
                  I = S.getIn([d, 'added'.concat(_)]);
                P.includes(f) || ((P = P.add(f)), (S = S.setIn([d, 'removed'.concat(_)], P)));
                var b = I.indexOf(f);
                return b !== -1 && (S = S.deleteIn([d, 'added'.concat(_), b])), S;
              }),
              t
            );
          })(h.ImmutableState);
          i.HistoryState = a;
          var n = (function (e) {
            c.__extends(t, e);
            function t(d, f, _, S) {
              var P = e.call(this, d) || this;
              return (P.baseEvents = d), (P.situation = f), (P.lineup = _), (P.fielders = S), P;
            }
            return (
              (t.prototype.processOneEvent = function (d, f) {
                switch (f.code) {
                  case 'set_teams':
                    d = this.setTeams(d, f);
                    break;
                  case 'pitch':
                    d = this.pitch(d, f);
                    break;
                  case 'sub_players':
                    d = this.subPlayers(d, f);
                    break;
                  case 'fill_position':
                    d = this.fillPosition(d, f);
                    break;
                  case 'replace_runner':
                    d = this.addCourtesyRunnerToHistory(d, f);
                    break;
                  case 'end_at_bat':
                  case 'ball_in_play':
                  case 'place_batter':
                    d = this.addLastBatterToHistory(d);
                    break;
                  case 'player_stat_edit':
                    d = this.handlePlayerStatEdit(d, f);
                    break;
                }
                return d;
              }),
              (t.prototype.initialState = function () {
                return new a(p.Map({}));
              }),
              Object.defineProperty(t.prototype, 'situationBeforeEvent', {
                get: function () {
                  return this.situation.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(t.prototype, 'lineupBeforeEvent', {
                get: function () {
                  return this.lineup.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(t.prototype, 'fieldersBeforeEvent', {
                get: function () {
                  return this.fielders.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              (t.prototype.setTeams = function (d, f) {
                return d
                  .initializeForTeam(f.attributes.awayId)
                  .initializeForTeam(f.attributes.homeId);
              }),
              (t.prototype.addCourtesyRunnerToHistory = function (d, f) {
                var _ = this.situationBeforeEvent.atBatTeamId;
                return d.addCourtesyRunnerToHistory(
                  _,
                  f.attributes.outgoingPlayerId,
                  f.attributes.incomingPlayerId
                );
              }),
              (t.prototype.addLastBatterToHistory = function (d) {
                var f = this.situationBeforeEvent.atBatTeamId,
                  _ = this.lineupBeforeEvent.currentBatter(f);
                return d.addBatterToHistory(
                  f,
                  _,
                  this.fieldersBeforeEvent.positionForPlayer(_, f),
                  this.situationBeforeEvent.inning,
                  this.lineupBeforeEvent.lineupIndex(f)
                );
              }),
              (t.prototype.pushFielderHistories = function (d, f) {
                var _ = this.situationBeforeEvent.inFieldTeamId,
                  S = this.fieldersBeforeEvent.playersMapForTeam(_);
                for (var P in S)
                  if (S.hasOwnProperty(P)) {
                    var I = S[P];
                    if (!r.contains([void 0, 'EH'], I)) {
                      var b = d.getIn([_, 'fielderHistory', P]);
                      b === void 0 && (b = p.List()),
                        !(b.last() !== void 0 && b.last().position === I) &&
                          ((b = b.push(
                            new u({
                              inning: this.situationBeforeEvent.inning,
                              position: I,
                              eventId: f,
                            })
                          )),
                          (d = d.setIn([_, 'fielderHistory', P], b)));
                    }
                  }
                return d;
              }),
              (t.prototype.pushPitcherHistory = function (d) {
                var f = this.situationBeforeEvent.inFieldTeamId,
                  _ = this.situationBeforeEvent.inning,
                  S = this.fieldersBeforeEvent.playerForPosition(f, 'P'),
                  P = d.getIn([f, 'pitcherHistory']);
                if (S === void 0) return d;
                var I = P.last();
                if (I !== void 0 && I.pitcherId === S) return d;
                var b =
                  P.find(function (E) {
                    return (E == null ? void 0 : E.pitcherId) === S;
                  }) === void 0;
                return d.updateIn([f, 'pitcherHistory'], function (E) {
                  return E.push(new l({ pitcherId: S, inning: _, firstAppearance: b }));
                });
              }),
              (t.prototype.pitch = function (d, f) {
                return (
                  (d = this.pushFielderHistories(d, f.id)),
                  (d = this.pushPitcherHistory(d)),
                  this.addLastBatterToHistory(d)
                );
              }),
              (t.prototype.subPlayers = function (d, f) {
                var _ = f.attributes,
                  S = _.teamId,
                  P = _.incomingPlayerId,
                  I = _.outgoingPlayerId,
                  b = this.lineupBeforeEvent.indexOfPlayer(S, I);
                if (b === void 0) return d;
                var E = this.fieldersBeforeEvent.positionForPlayer(I, S);
                return (
                  E !== void 0 && (d = this.pushPositionHistory(d, S, P, E, f.id)),
                  d.addBatterToHistory(S, P, E, this.situationBeforeEvent.inning, b)
                );
              }),
              (t.prototype.pushPositionHistory = function (d, f, _, S, P) {
                var I = this.situationBeforeEvent.inning,
                  b = d.getIn([f, 'positionHistory', S]);
                b === void 0 && (b = p.List());
                var E = b.last();
                return (
                  (E === void 0 || E.fielderId !== _) &&
                    (b = b.push(new y({ fielderId: _, inning: I, eventId: P }))),
                  d.setIn([f, 'positionHistory', S], b)
                );
              }),
              (t.prototype.fillPosition = function (d, f) {
                var _ = f.attributes,
                  S = _.teamId,
                  P = _.playerId,
                  I = _.position;
                return I === 'EH' ||
                  ((d = this.pushPositionHistory(d, S, P, I, f.id)),
                  !r.contains([void 0, 'EH'], this.fieldersBeforeEvent.positionForPlayer(P, S)))
                  ? d
                  : d.replaceLastPositionForBatterInHistory(
                      S,
                      P,
                      I,
                      this.lineupBeforeEvent.indexOfPlayer(S, P)
                    );
              }),
              (t.prototype.updateStatEditPlayer = function (d, f, _, S, P) {
                return P === 0 ? d.removeStatEditPlayer(f, _, S) : d.addStatEditPlayer(f, _, S);
              }),
              (t.prototype.handlePlayerStatEdit = function (d, f) {
                switch (f.category) {
                  case 'offense':
                    if (f.statName === 'GP')
                      return this.updateStatEditPlayer(
                        d,
                        f.teamId,
                        f.playerId,
                        'Batter',
                        f.statValue
                      );
                    break;
                  case 'defense':
                    switch (f.statName) {
                      case 'GP:P':
                        return this.updateStatEditPlayer(
                          d,
                          f.teamId,
                          f.playerId,
                          'Pitcher',
                          f.statValue
                        );
                    }
                    break;
                }
                return d;
              }),
              t
            );
          })(v.VersionedStateEngine);
          i.HistoryEngine = n;
        })(ao)),
      ao
    );
  }
  var io = {},
    td;
  function Uy() {
    return (
      td ||
        ((td = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.PerInningEngine =
              i.PerInningStats =
              i.PerInningDefenseRecord =
              i.PerInningOffenseRecord =
              i.perInningDefenseRecord =
              i.perInningOffenseRecord =
              i.PitchingRecord =
              i.pitchingRecord =
              i.InningTeamStats =
              i.PerInningTeamStats =
                void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Ie()),
            v = c.__importStar(be()),
            h = at(),
            s = r.Record({
              offense: r.List(),
              defense: r.List(),
              total1BEdit: void 0,
              total2BEdit: void 0,
              total3BEdit: void 0,
              totalHREdit: void 0,
              totalRunsEdit: void 0,
              totalErrorsEdit: void 0,
            }),
            l = (function (f) {
              c.__extends(_, f);
              function _() {
                return (f !== null && f.apply(this, arguments)) || this;
              }
              return _;
            })(s),
            u = (function () {
              function f() {}
              return f;
            })();
          i.PerInningTeamStats = u;
          var y = (function () {
            function f() {}
            return f;
          })();
          (i.InningTeamStats = y),
            (i.pitchingRecord = r.Record({ pitches: 0, strikes: 0, strikePercentage: 0 }));
          var o = (function (f) {
            c.__extends(_, f);
            function _() {
              return (f !== null && f.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(_.prototype, 'strikePercentage', {
                get: function () {
                  return this.pitches > 0 ? this.strikes / this.pitches : 0;
                },
                enumerable: !1,
                configurable: !0,
              }),
              (_.prototype.toJS = function () {
                return {
                  pitches: this.pitches,
                  strikes: this.strikes,
                  strikePercentage: this.strikePercentage,
                };
              }),
              _
            );
          })(i.pitchingRecord);
          i.PitchingRecord = o;
          var a = r.Map();
          (i.perInningOffenseRecord = r.Record({
            hits1B: 0,
            hits2B: 0,
            hits3B: 0,
            hitsHR: 0,
            hits: 0,
            runs: 0,
            lob: 0,
          })),
            (i.perInningDefenseRecord = r.Record({ errors: 0, pitches: 0, pitchers: a }));
          var n = (function (f) {
            c.__extends(_, f);
            function _() {
              return (f !== null && f.apply(this, arguments)) || this;
            }
            return _;
          })(i.perInningOffenseRecord);
          i.PerInningOffenseRecord = n;
          var e = (function (f) {
            c.__extends(_, f);
            function _() {
              return (f !== null && f.apply(this, arguments)) || this;
            }
            return _;
          })(i.perInningDefenseRecord);
          i.PerInningDefenseRecord = e;
          var t = (function (f) {
            c.__extends(_, f);
            function _() {
              return (f !== null && f.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(_.prototype, 'linescore', {
                get: function () {
                  return this.get('stats')
                    .toSeq()
                    .map(function (S) {
                      return S.offense;
                    })
                    .map(function (S) {
                      return S == null
                        ? void 0
                        : S.map(function (P) {
                            return P.runs;
                          });
                    })
                    .toMap()
                    .toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'fullPerInningStats', {
                get: function () {
                  return this.getIn(['stats']).toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'summedPerInningStats', {
                get: function () {
                  var S = {};
                  return (
                    this.get('stats').forEach(function (P, I) {
                      var b, E, T, F, R, L;
                      (S[I] = {
                        totalRuns: 0,
                        totalHits: 0,
                        total1B: 0,
                        total2B: 0,
                        total3B: 0,
                        totalHR: 0,
                        totalErrors: 0,
                      }),
                        P.get('offense').forEach(function (x) {
                          (S[I].totalRuns += x.runs),
                            (S[I].total1B += x.hits1B),
                            (S[I].total2B += x.hits2B),
                            (S[I].total3B += x.hits3B),
                            (S[I].totalHR += x.hitsHR);
                        }),
                        P.get('defense').forEach(function (x) {
                          S[I].totalErrors += x.errors;
                        }),
                        (S[I].totalRuns =
                          (b = P.get('totalRunsEdit')) !== null && b !== void 0
                            ? b
                            : S[I].totalRuns),
                        (S[I].total1B =
                          (E = P.get('total1BEdit')) !== null && E !== void 0 ? E : S[I].total1B),
                        (S[I].total2B =
                          (T = P.get('total2BEdit')) !== null && T !== void 0 ? T : S[I].total2B),
                        (S[I].total3B =
                          (F = P.get('total3BEdit')) !== null && F !== void 0 ? F : S[I].total3B),
                        (S[I].totalHR =
                          (R = P.get('totalHREdit')) !== null && R !== void 0 ? R : S[I].totalHR),
                        (S[I].totalHits =
                          S[I].total1B + S[I].total2B + S[I].total3B + S[I].totalHR),
                        (S[I].totalErrors =
                          (L = P.get('totalErrorsEdit')) !== null && L !== void 0
                            ? L
                            : S[I].totalErrors);
                    }),
                    S
                  );
                },
                enumerable: !1,
                configurable: !0,
              }),
              (_.prototype.statsForInning = function (S) {
                return this.get('stats')
                  .toSeq()
                  .map(function (P) {
                    var I = S > P.offense.size ? void 0 : P.offense.get(S - 1).toJS(),
                      b = S > P.defense.size ? void 0 : P.defense.get(S - 1).toJS();
                    return { offense: I, defense: b };
                  })
                  .toMap()
                  .toJS();
              }),
              (_.prototype.incrementRunsForInning = function (S, P, I) {
                return this.incrementIn(['stats', S, 'offense', P - 1, 'runs'], I);
              }),
              (_.prototype.incrementHitsForInning = function (S, P, I, b) {
                return this.incrementIn(
                  ['stats', S, 'offense', P - 1, 'hits'.concat(I)],
                  b
                ).incrementIn(['stats', S, 'offense', P - 1, 'hits'], b);
              }),
              (_.prototype.incrementErrorsForInning = function (S, P, I) {
                return this.incrementIn(['stats', S, 'defense', P - 1, 'errors'], I);
              }),
              (_.prototype.incrementTotalPitchesForInning = function (S, P, I) {
                return this.incrementIn(['stats', S, 'defense', P - 1, 'pitches'], I);
              }),
              (_.prototype.incrementPitchingStatForInning = function (S, P, I, b, E) {
                var T = ['stats', P, 'defense', b - 1, 'pitchers', I],
                  F = this.hasIn(T) ? this : this.setIn(T, new o());
                return F.incrementIn(T.concat([S]), E);
              }),
              (_.prototype.setLeftOnBaseForInning = function (S, P, I) {
                return this.setIn(['stats', S, 'offense', P - 1, 'lob'], I);
              }),
              (_.prototype.setTotalRunsEdit = function (S, P) {
                return this.setIn(['stats', S, 'totalRunsEdit'], P);
              }),
              (_.prototype.setTotalHitsEdit = function (S, P, I) {
                return this.setIn(['stats', S, 'total'.concat(P, 'Edit')], I);
              }),
              (_.prototype.setTotalErrorsEdit = function (S, P) {
                return this.setIn(['stats', S, 'totalErrorsEdit'], P);
              }),
              (_.prototype.initialize = function (S, P) {
                return this.setIn(['stats', S], new l())
                  .setIn(['stats', P], new l())
                  .initializeToInningHalf(1, 'top', S);
              }),
              (_.prototype.initializeToInningHalf = function (S, P, I) {
                for (
                  var b = this,
                    E = this.get('stats').keySeq().toArray(),
                    T = function (x) {
                      (b = b.updateIn(['stats', x, 'offense'], function (N) {
                        return N.withMutations(function (M) {
                          var J = S;
                          P === 'top' && x === I && J--;
                          for (var D = M.size; D < J; D++) M.push(new n({}));
                        });
                      })),
                        (b = b.updateIn(['stats', x, 'defense'], function (N) {
                          return N.withMutations(function (M) {
                            var J = S;
                            P === 'top' && x !== I && J--;
                            for (var D = M.size; D < J; D++) M.push(new e({}));
                          });
                        }));
                    },
                    F = 0,
                    R = E;
                  F < R.length;
                  F++
                ) {
                  var L = R[F];
                  T(L);
                }
                return b;
              }),
              _
            );
          })(v.ImmutableState);
          i.PerInningStats = t;
          var d = (function (f) {
            c.__extends(_, f);
            function _(S, P, I, b) {
              var E = f.call(this, S) || this;
              return (
                (E.baseEvents = S), (E.situation = P), (E.baserunners = I), (E.fielders = b), E
              );
            }
            return (
              Object.defineProperty(_.prototype, 'lastSituationState', {
                get: function () {
                  return this.situation.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'nextSituationState', {
                get: function () {
                  return this.situation.stateBeforeEvent(this.nextEventOffset + 1);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'lastBaserunnerState', {
                get: function () {
                  return this.baserunners.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'nextBaserunnerState', {
                get: function () {
                  return this.baserunners.stateBeforeEvent(this.nextEventOffset + 1);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(_.prototype, 'lastFieldersState', {
                get: function () {
                  return this.fielders.stateBeforeEvent(this.nextEventOffset);
                },
                enumerable: !1,
                configurable: !0,
              }),
              (_.prototype.processOneEvent = function (S, P) {
                switch (
                  (P.code !== 'pitcher_decision' &&
                    (S = S.initializeToInningHalf(
                      this.lastSituationState.inning,
                      this.lastSituationState.half,
                      this.lastSituationState.homeId
                    )),
                  P.code)
                ) {
                  case 'set_teams':
                    var I = P;
                    S = S.initialize(I.attributes.homeId, I.attributes.awayId);
                    break;
                  case 'override':
                    S = this.overrideForLinescore(S, P);
                    break;
                  case 'team_stat_edit':
                    S = this.handleTeamStatEdit(S, P);
                    break;
                }
                return (S = this.reconcileStats(S, P)), S;
              }),
              (_.prototype.initialState = function () {
                return new t(r.fromJS({ stats: {} }));
              }),
              (_.prototype.handleTeamStatEdit = function (S, P) {
                switch (P.category) {
                  case 'offense':
                    switch (P.statName) {
                      case 'R':
                        return S.setTotalRunsEdit(P.teamId, P.statValue);
                      case '1B':
                        return S.setTotalHitsEdit(P.teamId, '1B', P.statValue);
                      case '2B':
                        return S.setTotalHitsEdit(P.teamId, '2B', P.statValue);
                      case '3B':
                        return S.setTotalHitsEdit(P.teamId, '3B', P.statValue);
                      case 'HR':
                        return S.setTotalHitsEdit(P.teamId, 'HR', P.statValue);
                    }
                    break;
                  case 'defense':
                    switch (P.statName) {
                      case 'E':
                        return S.setTotalErrorsEdit(P.teamId, P.statValue);
                    }
                    break;
                }
                return S;
              }),
              (_.prototype.reconcileStats = function (S, P) {
                var I = this.lastSituationState.inning,
                  b = this.lastSituationState.atBatTeamId,
                  E = this.lastSituationState.inFieldTeamId,
                  T =
                    this.nextBaserunnerState.runnersScoredOnLastEvent.length -
                    this.nextBaserunnerState.runnersUnscoredOnLastEvent.length;
                if ((T !== 0 && (S = S.incrementRunsForInning(b, I, T)), (0, h.isHit)(P)))
                  switch (P.attributes.playResult) {
                    case 'single':
                      S = S.incrementHitsForInning(b, I, '1B', 1);
                      break;
                    case 'double':
                      S = S.incrementHitsForInning(b, I, '2B', 1);
                      break;
                    case 'triple':
                      S = S.incrementHitsForInning(b, I, '3B', 1);
                      break;
                    case 'home_run':
                      S = S.incrementHitsForInning(b, I, 'HR', 1);
                      break;
                  }
                if (
                  ((0, h.isError)(P) && (S = S.incrementErrorsForInning(E, I, 1)),
                  (0, h.isPitchEvent)(P))
                ) {
                  S = S.incrementTotalPitchesForInning(E, I, 1);
                  var F = this.lastFieldersState.playerForPosition(E, 'P');
                  F !== void 0 &&
                    ((S = S.incrementPitchingStatForInning('pitches', E, F, I, 1)),
                    (0, h.isStrike)(P) &&
                      (S = S.incrementPitchingStatForInning('strikes', E, F, I, 1)));
                }
                return (
                  this.nextSituationState.lastEventEndedInning &&
                    (S = S.setLeftOnBaseForInning(
                      b,
                      I,
                      this.nextBaserunnerState.runnersLeftOnBase
                    )),
                  S
                );
              }),
              (_.prototype.overrideForLinescore = function (S, P) {
                var I = this.nextSituationState.homeId,
                  b = this.nextSituationState.awayId;
                if (
                  ((this.lastSituationState.inning !== this.nextSituationState.inning ||
                    this.lastSituationState.half !== this.nextSituationState.half) &&
                    (S = S.initializeToInningHalf(
                      this.nextSituationState.inning,
                      this.nextSituationState.half,
                      I
                    )),
                  P.attributes.scores === void 0)
                )
                  return S;
                for (
                  var E = [0, 0], T = E[0], F = E[1], R = 0, L = P.attributes.scores;
                  R < L.length;
                  R++
                ) {
                  var x = L[R],
                    N = x.teamId,
                    M = x.score;
                  N === b
                    ? (T = M - this.lastBaserunnerState.scoreForTeam(N))
                    : (F = M - this.lastBaserunnerState.scoreForTeam(N));
                }
                var J = [this.lastSituationState.inning, this.lastSituationState.half],
                  D = J[0],
                  $ = J[1];
                if ((T !== 0 && (S = S.incrementRunsForInning(b, D, T)), F !== 0)) {
                  var z = $ === 'bottom' ? D : Math.max(1, D - 1);
                  z === 1 && (S = S.initializeToInningHalf(z, 'bottom', I)),
                    (S = S.incrementRunsForInning(I, z, F));
                }
                return S;
              }),
              _
            );
          })(p.VersionedStateEngine);
          i.PerInningEngine = d;
        })(io)),
      io
    );
  }
  var Pr = {},
    Mn = {},
    rd;
  function Wy() {
    if (rd) return Mn;
    (rd = 1), Object.defineProperty(Mn, '__esModule', { value: !0 }), (Mn.MetadataTracker = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = (function () {
        function p(v, h, s, l, u) {
          u === void 0 && (u = []),
            (this.situation = v),
            (this.lineup = h),
            (this.fielders = s),
            (this.baserunners = l),
            (this.trackMetadata = {});
          for (var y = 0, o = u; y < o.length; y++) {
            var a = o[y];
            this.trackMetadata[a] = !0;
          }
          this.metadataFunctions = {
            at_bat_batter_changed: this.currentAtBatBatterChanged.bind(this),
            at_bat_pitcher_changed: this.currentAtBatPitcherChanged.bind(this),
            baserunner_changed: this.baserunnerChanged.bind(this),
          };
        }
        return (
          (p.prototype.currentAtBatBatterChanged = function (v, h) {
            return c.contains(
              [
                'clear_entire_lineup',
                'fill_lineup',
                'fill_lineup_index',
                'reorder_lineup',
                'clear_lineup_index',
                'squash_lineup_index',
                'swap_players',
                'sub_players',
                'goto_lineup_index',
                'assign_dh',
                'remove_dh',
                'place_batter',
              ],
              v.code
            )
              ? this.lineup
                  .stateBeforeEvent(h)
                  .currentBatter(this.situation.stateBeforeEvent(h).atBatTeamId) !==
                  this.lineup
                    .stateAfterEvent(h)
                    .currentBatter(this.situation.stateAfterEvent(h).atBatTeamId)
              : !1;
          }),
          (p.prototype.currentAtBatPitcherChanged = function (v, h) {
            return c.contains(
              [
                'clear_all_positions',
                'fill_position',
                'clear_position_by_id',
                'swap_players',
                'sub_players',
              ],
              v.code
            )
              ? this.fielders
                  .stateBeforeEvent(h)
                  .playerForPosition(this.situation.stateBeforeEvent(h).inFieldTeamId, 'P') !==
                  this.fielders
                    .stateAfterEvent(h)
                    .playerForPosition(this.situation.stateAfterEvent(h).inFieldTeamId, 'P')
              : !1;
          }),
          (p.prototype.baserunnerChanged = function (v, h) {
            return c.contains(['sub_players', 'swap_players', 'replace_runner'], v.code)
              ? !c.isEqual(
                  this.baserunners.stateBeforeEvent(h).baserunners,
                  this.baserunners.stateAfterEvent(h).baserunners
                )
              : !1;
          }),
          (p.prototype.metadataForEvent = function (v, h) {
            var s = {};
            for (var l in this.trackMetadata)
              this.trackMetadata[l] === !0 && (s[l] = this.metadataFunctions[l](v, h));
            return s;
          }),
          p
        );
      })();
    return (Mn.MetadataTracker = r), Mn;
  }
  var Ir = {},
    so = {},
    nd;
  function er() {
    return (
      nd ||
        ((nd = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.AtBatRecord =
              i.atBatRecord =
              i.BaseRunningOnPlayRecord =
              i.baseRunningOnPlayRecord =
              i.ChildEventRecord =
              i.childEventRecord =
              i.PlayResultRecord =
              i.playResultRecord =
              i.ParticipantRecord =
              i.participantRecord =
              i.allWithRole =
              i.firstParticipantWithIdToJS =
              i.firstParticipantWithId =
              i.firstFielderByFieldingOrder =
              i.firstFielderWithError =
              i.firstFielderWithPositionToJS =
              i.firstFielderWithPosition =
              i.firstWithRoleToJS =
              i.firstWithRole =
              i.PlaySituationRecord =
              i.playSituationRecord =
              i.isCompoundPlayType =
                void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = c.__importStar(de());
          function v(I) {
            return r.contains(['double_play', 'triple_play', 'fielders_choice_double_play'], I);
          }
          (i.isCompoundPlayType = v),
            (i.playSituationRecord = p.Record({
              inning: void 0,
              half: void 0,
              balls: void 0,
              strikes: void 0,
              outs: void 0,
              bases: p.Map(),
              homeScore: 0,
              awayScore: 0,
            }));
          var h = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return b;
          })(i.playSituationRecord);
          i.PlaySituationRecord = h;
          function s(I, b) {
            return I.find(function (E) {
              return E.role === b;
            });
          }
          i.firstWithRole = s;
          function l(I, b) {
            return I.find(function (E) {
              return E.role === b;
            });
          }
          i.firstWithRoleToJS = l;
          function u(I, b) {
            return I.find(function (E) {
              return E.role === 'fielder' && E.position === b;
            });
          }
          i.firstFielderWithPosition = u;
          function y(I, b) {
            return I.find(function (E) {
              return E.role === 'fielder' && E.position === b;
            });
          }
          i.firstFielderWithPositionToJS = y;
          function o(I) {
            return I.find(function (b) {
              return b.role === 'fielder' && b.committedError === !0;
            });
          }
          i.firstFielderWithError = o;
          function a(I) {
            return I.find(function (b) {
              return b.role === 'fielder' && b.fieldingOrder.contains(0);
            });
          }
          i.firstFielderByFieldingOrder = a;
          function n(I, b) {
            return I.find(function (E) {
              return E.playerId === b;
            });
          }
          i.firstParticipantWithId = n;
          function e(I, b) {
            return I.find(function (E) {
              return E.playerId === b;
            });
          }
          i.firstParticipantWithIdToJS = e;
          function t(I, b) {
            return I.filter(function (E) {
              return E.role === b;
            }).toArray();
          }
          (i.allWithRole = t),
            (i.participantRecord = p.Record({
              playerId: void 0,
              globalAtBatId: void 0,
              role: void 0,
              position: void 0,
              fieldingOrder: p.List(),
              committedError: !1,
              base: void 0,
              out: !1,
              scored: !1,
              baseChanged: !0,
              slot: void 0,
              template: void 0,
              perspective: void 0,
            }));
          var d = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return b;
          })(i.participantRecord);
          (i.ParticipantRecord = d),
            (i.playResultRecord = p.Record({
              createdAt: void 0,
              playType: void 0,
              lastPitchResult: void 0,
              eventId: void 0,
              writeInDescription: void 0,
              situation: new h(),
            }));
          var f = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return b;
          })(i.playResultRecord);
          (i.PlayResultRecord = f),
            (i.childEventRecord = p.Record({
              createdAt: void 0,
              beforePitchIndex: void 0,
              eventId: void 0,
              code: void 0,
              participants: p.List(),
              headline: void 0,
              template: void 0,
              writeInDescription: void 0,
              situation: new h(),
              metadata: void 0,
              baseRunningPlayType: void 0,
            }));
          var _ = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return b;
          })(i.childEventRecord);
          (i.ChildEventRecord = _),
            (i.baseRunningOnPlayRecord = p.Record({
              createdAt: void 0,
              eventId: void 0,
              playType: void 0,
              participants: p.List(),
              headline: void 0,
              template: void 0,
              writeInDescription: void 0,
              situation: new h(),
            }));
          var S = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return b;
          })(i.baseRunningOnPlayRecord);
          (i.BaseRunningOnPlayRecord = S),
            (i.atBatRecord = p.Record({
              pitches: p.List(),
              result: new f(),
              participants: p.List(),
              headline: '',
              template: '',
              childEvents: p.List(),
              baseRunningOnPlayEvents: p.List(),
              initialSituation: new h({
                inning: 1,
                half: 'top',
                balls: 0,
                strikes: 0,
                outs: 0,
                bases: [],
                homeScore: 0,
                awayScore: 0,
              }),
              firstSignificantEventId: void 0,
            }));
          var P = (function (I) {
            c.__extends(b, I);
            function b() {
              return (I !== null && I.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(b.prototype, 'orderedEventIds', {
                get: function () {
                  var E = this,
                    T = [],
                    F = 0;
                  return (
                    this.pitches.forEach(function (R, L) {
                      E.childEvents.forEach(function (x) {
                        x.beforePitchIndex === L && (T.push(x.eventId), F++);
                      }),
                        T.push(R.eventId);
                    }),
                    this.childEvents.slice(F).forEach(function (R) {
                      T.push(R.eventId);
                    }),
                    this.result.eventId !== void 0 &&
                      !r.contains(T, this.result.eventId) &&
                      T.push(this.result.eventId),
                    this.baseRunningOnPlayEvents.forEach(function (R) {
                      T.push(R.eventId);
                    }),
                    r.uniq(T)
                  );
                },
                enumerable: !1,
                configurable: !0,
              }),
              b
            );
          })(i.atBatRecord);
          i.AtBatRecord = P;
        })(so)),
      so
    );
  }
  var xn = {},
    ad;
  function id() {
    if (ad) return xn;
    (ad = 1),
      Object.defineProperty(xn, '__esModule', { value: !0 }),
      (xn.findLocationData = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(at());
    function p(v) {
      var h, s;
      r.isBallInPlayEvent(v) &&
        ((s = v.attributes.playType),
        v.attributes.defenders !== void 0 &&
          v.attributes.defenders.length !== 0 &&
          (h = c.first(v.attributes.defenders).location));
      var l;
      return (
        r.isHomeRunEvent(v) && (l = v.attributes.hrLocation),
        { fieldedLocation: h, ballInPlayType: s, hrLocation: l }
      );
    }
    return (xn.findLocationData = p), xn;
  }
  var sd;
  function od() {
    if (sd) return Ir;
    (sd = 1),
      Object.defineProperty(Ir, '__esModule', { value: !0 }),
      (Ir.renderForScorebook = Ir.lookupMapForEvents = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(at()),
      p = i.__importStar(er()),
      v = id(),
      h,
      s = {
        single: '1B',
        double: '2B',
        triple: '3B',
        home_run: 'HR',
        dropped_third_strike: 'Kd3',
        dropped_third_strike_batter_out: 'K',
        fielders_choice: 'FC',
        error: 'E',
        sacrifice_bunt: 'SAC',
        sacrifice_fly: 'SF',
        sacrifice_bunt_error: 'E',
        sacrifice_fly_error: 'E',
        offensive_interference: 'OI',
        infield_fly: 'IF',
        other_out: 'Out',
        foul_tip_out: 'K',
        stole_base: 'SB',
        defensive_indifference: 'DI',
        passed_ball: 'PB',
        wild_pitch: 'WP',
        on_same_pitch: 'Pitch',
        advanced_on_error: 'E',
        on_same_error: 'E',
        out_on_appeal: 'OOA',
        caught_stealing: 'CS',
        other_advance: 'OA',
        picked_off: 'PO',
        did_not_score: 'X',
        tagged_up: 'TU',
        caught_tagging: 'CT',
        caught_backtracking: 'BT',
        did_not_tag: 'DT',
        doubled_off: 'DO',
        caught_running: 'CR',
        on_the_throw: 'THR',
        strikeout: 'K',
        strikeout_looking: 'KL',
        walk: 'BB',
        hit_by_pitch: 'HBP',
        catcher_interference: 'CI',
        double_play: 'DP',
        triple_play: 'TP',
        fielders_choice_double_play: 'FC',
        place_batter: 'PROB',
        baserunning_ended_inning: 'Out',
        next_half: 'over',
        inning_override: 'over',
        ground_out: 'G',
        fly_out: 'F',
        pop_out: 'F',
        line_out: 'L',
        place_runner: 'MAN',
        balk: 'BK',
        illegal_pitch_advance: 'IP',
      };
    function l(d) {
      for (var f = {}, _ = 0, S = d; _ < S.length; _++) {
        var P = S[_];
        f[P.id] = P;
      }
      return f;
    }
    Ir.lookupMapForEvents = l;
    function u(d) {
      var f = d.baseRunningOnPlayEvents.find(function (_) {
        return _.playType === 'advanced_on_error' || _.playType === 'on_same_error';
      });
      return f ? ' + '.concat(y(f.playType)) : '';
    }
    function y(d) {
      return s[d] || '?';
    }
    function o(d, f, _, S) {
      S.participants.forEach(function (P) {
        var I = P.globalAtBatId;
        if (
          I !== void 0 &&
          (d[I] === void 0 && (d[I] = []), !!c.some([P.scored, P.out, P.baseChanged]))
        ) {
          var b = f[S.eventId],
            E;
          r.isBaseRunningEvent(b)
            ? ((E = b.attributes.playFlavor || b.attributes.playType),
              E === 'on_same_pitch'
                ? (E = h || 'on_same_pitch')
                : c.contains(['wild_pitch', 'passed_ball'], E)
                  ? (h = E)
                  : (h = void 0))
            : r.isPitchEvent(b) && b.attributes.result === 'illegal_pitch'
              ? (E = 'illegal_pitch_advance')
              : (E = b.code);
          var T = _.initialSituation.half === 'top' ? S.situation.awayScore : S.situation.homeScore;
          d[I].push({
            reason: E,
            reasonCode: y(E),
            fieldedLocation: void 0,
            hrLocation: void 0,
            ballInPlayType: void 0,
            base: P == null ? void 0 : P.base,
            outNumber: P.out ? S.situation.outs || 3 : void 0,
            runNumber: P.scored ? T : void 0,
          });
        }
      });
    }
    function a(d) {
      var f = {},
        _ = [0, 0],
        S = _[0],
        P = _[1];
      if (d.childEvents.size !== 0) {
        var I = d.childEvents.last();
        (S = I.situation.outs),
          (P = d.initialSituation.half === 'top' ? I.situation.awayScore : I.situation.homeScore);
      } else
        (S = d.initialSituation.outs),
          (P =
            d.initialSituation.half === 'top'
              ? d.initialSituation.awayScore
              : d.initialSituation.homeScore);
      var b = p.allWithRole(d.participants, 'runner'),
        E = p.firstWithRole(d.participants, 'batter');
      E !== void 0 && b.push(E);
      for (var T = 0, F = b; T < F.length; T++) {
        var R = F[T],
          L = {};
        R.out && (L.outNumber = ++S),
          R.scored && (L.runNumber = ++P),
          c.isEmpty(L) || (f[R.globalAtBatId] = L);
      }
      return f;
    }
    function n(d, f, _) {
      if (
        (_.childEvents.forEach(function (P) {
          o(d, f, _, P);
        }),
        _.result.playType !== 'baserunning_ended_inning')
      ) {
        var S = a(_);
        _.participants.forEach(function (P) {
          var I = P,
            b = I.globalAtBatId,
            E = I.scored,
            T = I.out,
            F = I.baseChanged,
            R = I.role;
          if (b !== void 0 && (d[b] === void 0 && (d[b] = []), !!c.some([E, T, F]))) {
            var L = f[_.result.eventId],
              x = _.result.playType;
            if (
              !p.isCompoundPlayType(_.result.playType) &&
              r.isBallInPlayEvent(L) &&
              c.contains(['batter_out', 'batter_out_advance_runners'], L.attributes.playResult)
            )
              switch (L.attributes.playType) {
                case 'bunt':
                case 'ground_ball':
                case 'hard_ground_ball':
                  x = 'ground_out';
                  break;
                case 'fly_ball':
                  x = 'fly_out';
                  break;
                case 'pop_fly':
                  x = 'pop_out';
                  break;
                case 'line_drive':
                  x = 'line_out';
                  break;
                case 'foul_tip':
                  x = 'strikeout';
                  break;
              }
            if (r.isPitchEvent(L)) {
              var N = _.result;
              switch (N.lastPitchResult) {
                case 'strike_looking':
                  x = 'strikeout_looking';
                  break;
              }
            }
            var M = (0, v.findLocationData)(L),
              J = S[b] || {};
            d[b].push({
              reason: x,
              reasonCode: y(x) + u(_),
              fieldedLocation: R === 'batter' ? M.fieldedLocation : void 0,
              hrLocation: R === 'batter' ? M.hrLocation : void 0,
              ballInPlayType: M.ballInPlayType,
              base: P == null ? void 0 : P.base,
              outNumber: J.outNumber,
              runNumber: J.runNumber,
            });
          }
        });
      }
    }
    function e(d, f, _, S) {
      var P = {};
      (P[d] = []), (P[f] = []);
      var I = {};
      (I[d] = {}), (I[f] = {});
      var b = {};
      return (
        (b[d] = {}),
        (b[f] = {}),
        S.forEach(function (E) {
          var T = E,
            F = T.initialSituation,
            R = F.half,
            L = F.inning,
            x = T.result.eventId,
            N = T.participants,
            M = R === 'top' ? f : d,
            J = L - 1,
            D = p.firstWithRole(N, 'batter'),
            $ = x !== void 0;
          if (!($ && D === void 0)) {
            var z;
            $ ? (z = D.slot) : (z = _);
            var q = b[M][J] || 0,
              V = I[M][J],
              U;
            for (
              V === void 0
                ? ((U = !0), (I[M][J] = {}))
                : ((U = !1), I[M][J][z] !== void 0 && (q++, (I[M][J] = {}))),
                b[M][J] = q,
                I[M][J][z] = !0;
              P[M].length <= J;

            )
              P[M].push([]);
            for (; P[M][J].length <= q; ) P[M][J].push([]);
            for (; P[M][J][q].length <= z; ) P[M][J][q].push(void 0);
            var j = E == null ? void 0 : E.toJS();
            (j.firstAtBatOfInning = U), (P[M][J][q][z] = j);
          }
        }),
        P
      );
    }
    function t(d, f, _, S, P) {
      var I = {},
        b = l(S);
      return (
        P.forEach(function (E) {
          n(I, b, E);
        }),
        { atBatProgressMap: I, atBatsByInningColumnSlot: e(d, f, _, P) }
      );
    }
    return (Ir.renderForScorebook = t), Ir;
  }
  var oo = {},
    jt = {},
    ud;
  function Mi() {
    if (ud) return jt;
    (ud = 1),
      Object.defineProperty(jt, '__esModule', { value: !0 }),
      (jt.pluralSuffix = jt.ordinalNumber = jt.stubbify = void 0);
    function i(p) {
      return p ? '${' + p + '}' : '';
    }
    jt.stubbify = i;
    function c(p) {
      var v = { 1: 'st', 2: 'nd', 3: 'rd' },
        h = 'th';
      return (p < 4 || p > 20) && (h = v[p % 10] || 'th'), ''.concat(p).concat(h);
    }
    jt.ordinalNumber = c;
    function r(p, v) {
      return p <= 0
        ? 'no '.concat(v, 's')
        : p === 1
          ? '1 '.concat(v)
          : ''.concat(p, ' ').concat(v, 's');
    }
    return (jt.pluralSuffix = r), jt;
  }
  var mr = {},
    ld;
  function uo() {
    if (ld) return mr;
    (ld = 1),
      Object.defineProperty(mr, '__esModule', { value: !0 }),
      (mr.Queue = mr.assertUnreachable = void 0);
    function i(r) {
      throw new Error('Unhandled case value '.concat(r));
    }
    mr.assertUnreachable = i;
    var c = (function () {
      function r(p) {
        p === void 0 && (p = 1 / 0), (this.storage = []), (this.capacity = p);
      }
      return (
        (r.prototype.enqueue = function (p) {
          if (this.size() === this.capacity)
            throw Error('Queue has reached max capacity, you cannot add more items');
          this.storage.push(p);
        }),
        (r.prototype.dequeue = function () {
          if (this.isEmpty()) throw Error('Queue is empty, you cannot dequeue any item');
          return this.storage.shift();
        }),
        (r.prototype.peek = function () {
          if (this.isEmpty()) throw Error('Queue is empty, you cannot peek any item');
          return this.storage[0];
        }),
        (r.prototype.isEmpty = function () {
          return this.storage.length === 0;
        }),
        (r.prototype.size = function () {
          return this.storage.length;
        }),
        (r.prototype.getValues = function () {
          return this.storage;
        }),
        r
      );
    })();
    return (mr.Queue = c), mr;
  }
  var cd;
  function $y() {
    return (
      cd ||
        ((cd = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.templateForChildBaseRunning =
              i.defendersInfo =
              i.replacePlayerIdInPerspective =
              i.stubbify =
              i.perspectivesForAtBat =
              i.templateForChildEvent =
              i.headlineForChildEvent =
              i.headlineForBaseRunningChildEvent =
              i.shortTemplateForBaserunner =
              i.templateForBaseRunningOnPlayEvent =
              i.templateForAtBat =
              i.headlineForAtBat =
              i.templateForPitch =
                void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = Pt(),
            v = c.__importStar(at()),
            h = Mi();
          Object.defineProperty(i, 'stubbify', {
            enumerable: !0,
            get: function () {
              return h.stubbify;
            },
          });
          var s = c.__importStar(er()),
            l = uo();
          function u(W, te) {
            var ee = y(W.attributes.result, te),
              C = W.attributes.style ? o(W.attributes.style) : void 0,
              G = W.attributes.speed ? ''.concat(W.attributes.speed, ' MPH') : void 0;
            if (C || G) {
              var X = r.compact([G, C]).join(' ');
              ee += ' ('.concat(X, ')');
            }
            return ee;
          }
          i.templateForPitch = u;
          function y(W, te) {
            switch (W) {
              case p.PitchResult.StrikeSwinging:
                return 'Strike '.concat(te.resultingStrikes, ' swinging');
              case p.PitchResult.StrikeLooking:
                return 'Strike '.concat(te.resultingStrikes, ' looking');
              case p.PitchResult.Ball:
                return 'Ball '.concat(te.resultingBalls);
              case p.PitchResult.IntentionalBall:
                return 'Ball '.concat(te.resultingBalls, ' (intentional)');
              case p.PitchResult.Foul:
                return 'Foul';
              case p.PitchResult.IllegalPitch:
                return 'Illegal pitch';
              case p.PitchResult.FoulTip:
                return 'Foul tip';
              case p.PitchResult.FoulBunt:
                return 'Foul bunt';
              case p.PitchResult.BallInPlay:
                return 'In play';
              default:
                (0, l.assertUnreachable)(W);
            }
          }
          function o(W) {
            switch (W) {
              case 'fastball':
                return 'Fastball';
              case 'curveball':
                return 'Curveball';
              case 'slider':
                return 'Slider';
              case 'riseball':
                return 'Riseball';
              case 'dropball':
                return 'Dropball';
              case 'screwball':
                return 'Screwball';
              case 'drop_curve':
                return 'Drop Curve';
              case 'cutter':
                return 'Cutter';
              case 'knuckleball':
                return 'Knuckleball';
              case 'knuckle_curve':
                return 'Knuckle Curve';
              case 'changeup':
                return 'Changeup';
              default:
                (0, l.assertUnreachable)(W);
            }
          }
          function a(W, te) {
            switch (te.result.playType) {
              case 'single':
                return 'Single';
              case 'double':
                return 'Double';
              case 'triple':
                return 'Triple';
              case 'home_run':
                return 'Home Run';
              case 'foul_tip_out':
                return 'Foul Tip Out';
              case 'dropped_third_strike':
              case 'dropped_third_strike_batter_out':
                return 'Dropped 3rd Strike';
              case 'fielders_choice':
                return "Fielder's Choice";
              case 'error':
                return 'Error';
              case 'sacrifice_bunt_error':
                return 'Error';
              case 'sacrifice_bunt':
                return 'Sacrifice Bunt';
              case 'sacrifice_fly_error':
                return 'Error';
              case 'sacrifice_fly':
                return 'Sacrifice Fly';
              case 'offensive_interference':
                return 'Offensive Interference';
              case 'infield_fly':
                return 'Infield Fly';
              case 'other_out':
                return 'Batter Out';
              case 'fielders_choice_double_play':
              case 'double_play':
                return 'Double Play';
              case 'triple_play':
                return 'Triple Play';
              case 'batter_out':
              case 'batter_out_advance_runners':
                switch (W.attributes.playType) {
                  case 'bunt':
                  case 'ground_ball':
                  case 'hard_ground_ball':
                    return 'Ground Out';
                  case 'fly_ball':
                    return 'Fly Out';
                  case 'pop_fly':
                    return 'Pop Out';
                  case 'line_drive':
                    return 'Line Out';
                  case 'foul_tip':
                    return 'Strikeout';
                }
                return 'Batter Out';
              default:
                return 'Ball In Play';
            }
          }
          function n(W, te) {
            switch (te.result.playType) {
              case 'next_half':
                return 'Inning Ended';
              case 'inning_override':
                return 'Inning Changed by Scorekeeper';
              case 'strikeout':
                return 'Strikeout';
              case 'walk':
                return (v.isEndAtBatEvent(W) && W.attributes.intentional) ||
                  (v.isPitchEvent(W) && W.attributes.result === 'intentional_ball')
                  ? 'Intentional Walk'
                  : 'Walk';
              case 'hit_by_pitch':
                return 'Hit By Pitch';
              case 'catcher_interference':
                return "Catcher's Interference";
              case 'place_batter':
                return 'Batter Put on Base';
              case 'baserunning_ended_inning':
                return 'Runner Out';
              case 'double_play':
                return 'Double Play';
              case 'triple_play':
                return 'Triple Play';
              case 'fielders_choice_double_play':
                return 'FC Double Play';
              default:
                return a(W, te);
            }
          }
          i.headlineForAtBat = n;
          function e(W, te) {
            switch (te.result.playType) {
              case 'next_half':
                return q();
              case 'inning_override':
                return V();
              case 'strikeout':
              case 'walk':
              case 'hit_by_pitch':
              case 'catcher_interference':
                return D(W, te);
              case 'place_batter':
                return $(te);
              case 'baserunning_ended_inning':
                return z();
              case 'double_play':
              case 'triple_play':
              case 'fielders_choice_double_play':
              default:
                return J(W, te);
            }
          }
          i.templateForAtBat = e;
          function t(W, te) {
            var ee = s.firstWithRole(te.participants, 'runner'),
              C = (0, h.stubbify)(ee.playerId),
              G = T(ee.base),
              X = '';
            if (W.attributes.playFlavor !== void 0)
              switch (W.attributes.playFlavor) {
                case 'tagged_up':
                  W.attributes.base === 4
                    ? (X = ''.concat(C, ' scores after tagging up'))
                    : (X = ''.concat(C, ' advances to ').concat(G, ' after tagging up'));
                  break;
                case 'caught_tagging':
                  X = ''.concat(C, ' out at ').concat(G, ' advancing after tag up');
                  break;
                case 'did_not_tag':
                  X = ''.concat(C, ' out at ').concat(G, ', failing to tag up');
                  break;
                case 'doubled_off':
                  X = ''.concat(C, ' doubled off at ').concat(G);
                  break;
                case 'caught_running':
                  X = ''.concat(C, ' out at ').concat(G, ', caught running');
                  break;
                case 'on_the_throw':
                  W.attributes.base === 4
                    ? (X = ''.concat(C, ' scores on the throw'))
                    : (X = ''.concat(C, ' advances to ').concat(G, ' on the throw'));
                  break;
              }
            if (X === '')
              switch (W.attributes.playType) {
                case 'advanced_on_last_play':
                  X = ee.scored ? ''.concat(C, ' scores') : ''.concat(C, ' advances to ').concat(G);
                  break;
                case 'remained_on_last_play':
                  X = ''.concat(C, ' held up at ').concat(G);
                  break;
                case 'out_on_last_play':
                  X = ''.concat(C, ' out advancing to ').concat(G);
                  break;
                case 'did_not_score':
                  X = ''.concat(C, ' did not score');
                  break;
                case 'advanced_on_error':
                  X = ee.scored
                    ? ''.concat(C, ' scores on error')
                    : ''.concat(C, ' advances to ').concat(G, ' on error');
                  break;
                case 'on_same_error':
                  X = ee.scored
                    ? ''.concat(C, ' scores on the same error')
                    : ''.concat(C, ' advances to ').concat(G, ' on the same error');
                  break;
              }
            if (W.attributes.playType === 'advanced_on_error') {
              var ie = x(te.participants);
              return ''.concat(X).concat(ie);
            }
            return X;
          }
          i.templateForBaseRunningOnPlayEvent = t;
          function d(W, te, ee) {
            var C = (0, h.stubbify)(W);
            return ee === 4
              ? ''.concat(C, ' scores')
              : ee > te
                ? ''.concat(C, ' advances to ').concat(T(ee))
                : ee <= te
                  ? ''.concat(C, ' remains at ').concat(T(ee))
                  : '';
          }
          i.shortTemplateForBaserunner = d;
          function f(W) {
            return W.attributes.result === 'illegal_pitch' ? 'Illegal Pitch' : 'On The Pitch';
          }
          function _(W) {
            switch (W.attributes.playFlavor) {
              case 'tagged_up':
                return 'Tagged Up';
              case 'caught_tagging':
                return 'Caught Tagging Up';
              case 'caught_backtracking':
                return 'Caught Backtracking';
              case 'did_not_tag':
                return 'Did Not Tag Up';
              case 'doubled_off':
                return 'Doubled Off';
              case 'caught_running':
                return 'Caught Running';
              case 'on_the_throw':
                return 'On Throw';
            }
            switch (W.attributes.playType) {
              case 'offensive_interference':
                return 'Offensive Interference';
              case 'stole_base':
                return W.attributes.base === 4
                  ? 'Steals Home'
                  : 'Steals '.concat(T(W.attributes.base));
              case 'defensive_indifference':
                return 'On Defensive Indifference';
              case 'passed_ball':
                return 'On Passed Ball';
              case 'wild_pitch':
                return 'On Wild Pitch';
              case 'on_same_pitch':
                return 'On Same Pitch';
              case 'attempted_pickoff':
                return 'Pickoff Attempt';
              case 'fielders_choice_attempted_pickoff':
                return "Fielder's Choice";
              case 'advanced_on_error':
                return 'On Error';
              case 'on_same_error':
                return 'On Same Error';
              case 'out_on_appeal':
                return 'Out on Appeal';
              case 'caught_stealing':
                return 'Caught Stealing';
              case 'other_out':
                switch (W.attributes.playFlavor) {
                  case 'left_base_early':
                    return 'Left Base Early';
                  default:
                    return 'Out (other)';
                }
              case 'other_advance':
                return 'Advanced (other)';
              case 'picked_off':
                return 'Picked Off';
              case 'did_not_score':
                return 'Did Not Score';
              case 'advanced_on_last_play':
                return 'On Last Play';
              case 'remained_on_last_play':
                return 'Remained on Last Play';
              case 'out_on_last_play':
                return 'On Last Play';
            }
            return 'Base Running';
          }
          i.headlineForBaseRunningChildEvent = _;
          function S(W) {
            switch (W.code) {
              case 'pitch':
                return f(W);
              case 'base_running':
                return _(W);
              case 'end_half':
                return 'End Half';
              case 'override':
                return 'Manual Override';
              case 'fill_position':
                return 'Fill Position';
              case 'clear_position_by_id':
                return 'Clear Position';
              case 'clear_all_positions':
                return 'Clear Positions';
              case 'fill_lineup_index':
                return 'Add to Lineup';
              case 'fill_lineup':
                return 'Add to Lineup';
              case 'reorder_lineup':
                return 'Reorder Lineup';
              case 'clear_lineup_index':
                return 'Clear Batter';
              case 'clear_entire_lineup':
                return 'Clear Lineup';
              case 'replace_runner':
                return 'Courtesy Runner';
              case 'swap_players':
                return 'Swap Players';
              case 'sub_players':
                return 'Substitution';
              case 'goto_lineup_index':
                return 'Skip to Batter';
              case 'confirm_end_of_lineup':
                return 'Confirm End of Lineup';
              case 'squash_lineup_index':
                return 'Squash Lineup';
              case 'assign_dh':
                return 'Assign DH';
              case 'remove_dh':
                return 'Remove DH';
              case 'assign_flex':
                return 'Assign Flex';
              case 'clear_flex':
                return 'Clear Flex';
              case 'assign_dp':
                return 'Assign DP';
              case 'clear_dp':
                return 'Clear DP';
              case 'swap_dp_flex':
                return 'Swap DP/Flex';
              case 'balk':
                return 'Balk';
              case 'illegal_pitch_advance':
                return 'Illegal Pitch';
              case 'foul_error':
                return 'Foul Error';
              case 'place_batter':
                return 'Place Batter';
              case 'place_runner':
                return 'Place Runner';
              case 'pitcher_decision':
                return 'Pitcher Decision';
              case 'message':
                return 'Scorekeeper Note';
            }
            return '';
          }
          i.headlineForChildEvent = S;
          function P(W, te) {
            switch (W.code) {
              case 'base_running':
                return U(W, te);
              case 'override':
                return j(W, te);
            }
            var ee = te.participants.first(),
              C = ee !== void 0 ? (0, h.stubbify)(ee.playerId) : '',
              G,
              X,
              ie = W.code;
            switch (
              (v.isPitchEvent(W) &&
                W.attributes.advancesRunners &&
                (W.attributes.result === 'illegal_pitch'
                  ? (ie = 'illegal_pitch_advance')
                  : (ie = 'other_pitch_advance')),
              ie)
            ) {
              case 'balk':
                return C !== '' ? 'Balk by pitcher '.concat(C) : 'Balk';
              case 'illegal_pitch_advance':
                return C !== ''
                  ? 'Runners advance on illegal pitch by '.concat(C)
                  : 'Runners advance on illegal pitch';
              case 'other_pitch_advance':
                return C !== ''
                  ? 'Runners advance on pitch by '.concat(C)
                  : 'Runners advance on pitch';
              case 'foul_error':
                var ve = s.firstWithRole(te.participants, 'fielder'),
                  le = ve !== void 0 ? ' '.concat((0, h.stubbify)(ve.playerId)) : '';
                return ve !== void 0
                  ? 'Error by '.concat(F(ve.position)).concat(le, ' on foul ball')
                  : 'Error on foul ball';
              case 'fill_position':
                var Be = W.attributes.position;
                return 'Lineup changed: '.concat(C, ' in at ').concat(F(Be));
              case 'clear_position_by_id':
                return 'Lineup changed: '.concat(C, ' sat from the field');
              case 'clear_all_positions':
                return (
                  (G = (0, h.stubbify)(W.attributes.teamId)),
                  'Lineup changed: Removed all players for '.concat(G, ' from the field')
                );
              case 'fill_lineup_index':
                return (
                  (X = W.attributes.index),
                  'Lineup changed: '
                    .concat(C, ' activated, batting ')
                    .concat((0, h.ordinalNumber)(X + 1))
                );
              case 'goto_lineup_index':
                return (
                  (X = W.attributes.index),
                  C !== ''
                    ? 'Lineup changed: Scorekeeper skipped to '
                        .concat(C, ', batting ')
                        .concat((0, h.ordinalNumber)(X + 1))
                    : 'Lineup changed: Scorekeeper skipped to '.concat(
                        (0, h.ordinalNumber)(X + 1),
                        ' lineup spot (currently empty)'
                      )
                );
              case 'fill_lineup':
                return 'Lineup changed: '.concat(C, ' activated');
              case 'reorder_lineup':
                var Oe = W;
                return C !== ''
                  ? 'Lineup changed: Moved '
                      .concat(C, ' to ')
                      .concat(Oe.attributes.toIndex + 1, '-hole')
                  : 'Lineup changed: Moved empty '
                      .concat(Oe.attributes.fromIndex + 1, ' slot to position ')
                      .concat(Oe.attributes.toIndex + 1);
              case 'clear_entire_lineup':
                return (
                  (G = (0, h.stubbify)(W.attributes.teamId)),
                  'Lineup changed: Cleared entire lineup for '.concat(G)
                );
              case 'replace_runner':
                var Re = W,
                  et = void 0;
                switch (Re.attributes.flavor) {
                  case p.ReplaceRunnerFlavor.SpecialPinchRunner: {
                    et = 'Special pinch runner';
                    break;
                  }
                  case p.ReplaceRunnerFlavor.RetroactiveSubstitution: {
                    et = '(Play Edit)';
                    break;
                  }
                  default: {
                    et = 'Courtesy runner';
                    break;
                  }
                }
                return ''
                  .concat(et, ' ')
                  .concat((0, h.stubbify)(Re.attributes.incomingPlayerId), ' in for ')
                  .concat((0, h.stubbify)(Re.attributes.outgoingPlayerId));
              case 'swap_players':
                var Rt = W;
                return ''
                  .concat(
                    (0, h.stubbify)(Rt.attributes.firstPlayerId),
                    ' swapped positions and lineup order with '
                  )
                  .concat((0, h.stubbify)(Rt.attributes.secondPlayerId));
              case 'sub_players':
                var Ft = W,
                  Ct = Ft.attributes.outgoingPlayerId,
                  cn = s.firstParticipantWithId(te.participants, Ct),
                  dn = '';
                return (
                  cn !== void 0 && cn.position !== void 0 && (dn = F(cn.position) + ' '),
                  'Lineup changed: '
                    .concat((0, h.stubbify)(Ft.attributes.incomingPlayerId), ' in for ')
                    .concat(dn)
                    .concat((0, h.stubbify)(Ft.attributes.outgoingPlayerId))
                );
              case 'squash_lineup_index':
                var $i = W;
                return (
                  (G = (0, h.stubbify)($i.attributes.teamId)),
                  'Lineup changed: Squashed empty lineup position '
                    .concat($i.attributes.index + 1, ' for ')
                    .concat(G)
                );
              case 'assign_dh':
                var ni = W;
                return 'Lineup changed: '
                  .concat((0, h.stubbify)(ni.attributes.dhId), ' in as designated hitter for ')
                  .concat((0, h.stubbify)(ni.attributes.fielderId));
              case 'remove_dh':
                var zi = W;
                return 'Lineup changed: '.concat(
                  (0, h.stubbify)(zi.attributes.dhId),
                  ' no longer designated hitting'
                );
              case 'assign_dp':
                var Vi = W;
                return 'Lineup changed: '.concat(
                  (0, h.stubbify)(Vi.attributes.playerId),
                  ' assigned to DP'
                );
              case 'clear_dp':
                return 'Lineup changed: Scorekeeper unassigned the DP';
              case 'assign_flex':
                var ai = W;
                return 'Lineup changed: '.concat(
                  (0, h.stubbify)(ai.attributes.playerId),
                  ' assigned to Flex'
                );
              case 'clear_flex':
                return 'Lineup changed: Scorekeeper unassigned the Flex';
              case 'swap_dp_flex':
                return 'Lineup changed: DP and Flex players swap positions';
              case 'place_runner':
                var ii = W;
                return ''.concat(C, ' gets placed on ').concat(T(ii.attributes.base));
              case 'pitcher_decision':
                var si = W.attributes.decision;
                switch (si) {
                  case 'win':
                    return ''.concat(C, ' is the winning pitcher');
                  case 'loss':
                    return ''.concat(C, ' is the losing pitcher');
                  case 'save':
                    return ''.concat(C, ' credited with the save');
                  case 'blown_save':
                    return ''.concat(C, ' charged with a blown save');
                }
                return '';
              case 'message':
                var Ki = W;
                return ''.concat(Ki.attributes.content);
            }
            return '';
          }
          i.templateForChildEvent = P;
          function I(W, te) {
            var ee = te.result.playType,
              C = void 0,
              G = s.firstFielderByFieldingOrder(te.participants);
            G !== void 0 && (C = G.position);
            for (
              var X = s.allWithRole(te.participants, 'runner'), ie = {}, ve = 0, le = X;
              ve < le.length;
              ve++
            ) {
              var Be = le[ve];
              ie[Be.playerId] = Be;
            }
            return {
              batter: ce(ee, C, W),
              error: pe(ee, C, W),
              pitcher: ae(ee, C, W),
              fielder: ue(ee, C, W),
              runners: r.mapObject(ie, r.partial(De, ee, C, W)),
            };
          }
          i.perspectivesForAtBat = I;
          function b(W, te) {
            return W.replace('${playerId}', (0, h.stubbify)(te));
          }
          i.replacePlayerIdInPerspective = b;
          function E(W) {
            return W === void 0 ? W : W.replace(/_/g, ' ');
          }
          function T(W) {
            switch (W) {
              case 1:
                return '1st';
              case 2:
                return '2nd';
              case 3:
                return '3rd';
              case 4:
                return 'home';
              default:
                return String(W);
            }
          }
          function F(W) {
            switch (W) {
              case '1B':
                return 'first baseman';
              case '2B':
                return 'second baseman';
              case '3B':
                return 'third baseman';
              case 'P':
                return 'pitcher';
              case 'C':
                return 'catcher';
              case 'CF':
                return 'center fielder';
              case 'LF':
                return 'left fielder';
              case 'RF':
                return 'right fielder';
              case 'SF':
                return 'short fielder';
              case 'SS':
                return 'shortstop';
              case 'EH':
                return 'extra hitter';
              case 'DH':
                return 'designated hitter';
              case 'F10':
                return 'F10';
              default:
                return 'other';
            }
          }
          function R(W) {
            return E(W);
          }
          function L(W) {
            switch (W) {
              case 'ground_ball':
              case 'hard_ground_ball':
                return 'grounds';
              case 'fly_ball':
                return 'flies';
              case 'pop_fly':
                return 'pops';
              case 'foul_tip':
                return 'tips';
              case 'line_drive':
                return 'lines';
              case 'bunt':
                return 'bunts';
              default:
                return '';
            }
          }
          function x(W) {
            var te = '',
              ee = s.firstFielderWithError(W);
            if (ee !== void 0) {
              var C = F(ee.position),
                G = (0, h.stubbify)(ee.playerId);
              (te += ' by '.concat(C)), G !== '' && (te += ' '.concat(G));
            }
            return te;
          }
          function N(W) {
            var te = '',
              ee = s.allWithRole(W, 'fielder');
            if (ee.length === 0) return { template: '', totalDefenders: 0 };
            for (
              var C = r.reduce(
                  r.pluck(ee, 'fieldingOrder'),
                  function (Ft, Ct) {
                    return Ft + Ct.size;
                  },
                  0
                ),
                G = new Array(C),
                X = function (Ft) {
                  Ft.fieldingOrder.forEach(function (Ct) {
                    G.splice(Ct, 1, Ft);
                  });
                },
                ie = 0,
                ve = ee;
              ie < ve.length;
              ie++
            ) {
              var le = ve[ie];
              X(le);
            }
            var Be;
            switch (G.length) {
              case 1:
                Be = 'one';
                break;
              case 2:
                Be = 'two';
                break;
              default:
                Be = 'many';
                break;
            }
            for (var Oe = 0; Oe < G.length; Oe++) {
              var le = G[Oe],
                Re = Oe === G.length - 1,
                et = F(le.position),
                Rt = (0, h.stubbify)(le.playerId);
              switch ((Rt !== '' && (Rt = ' ' + Rt), Be)) {
                case 'one':
                case 'two':
                case 'many':
                  (te += ''.concat(et).concat(Rt)), Re || (te += ' to ');
                  break;
              }
            }
            return { template: te, totalDefenders: G.length };
          }
          i.defendersInfo = N;
          function M(W) {
            var te = W.attributes.hrLocation;
            switch (te) {
              case 'left_field':
              case 'center_field':
              case 'right_field':
                return 'to ' + E(te);
              case 'in_the_park':
                return 'inside the park';
              default:
                return '';
            }
          }
          function J(W, te) {
            var ee,
              C = s.firstWithRole(te.participants, 'batter'),
              G = (0, h.stubbify)(C == null ? void 0 : C.playerId),
              X = R(W.attributes.playType),
              ie = L(W.attributes.playType),
              ve,
              le = '';
            if (
              (v.isBallInPlayEvent(W) &&
                W.attributes.playFlavor === 'in_foul_territory' &&
                (le = ' in foul territory'),
              r.contains(
                ['dropped_third_strike', 'dropped_third_strike_batter_out'],
                te.result.playType
              ))
            ) {
              var Be = W.attributes.cause;
              ve = E(Be);
            }
            switch (te.result.playType) {
              case 'single':
                ee = ''.concat(G, ' singles on a ').concat(X);
                break;
              case 'double':
                ee = ''.concat(G, ' doubles on a ').concat(X);
                break;
              case 'triple':
                ee = ''.concat(G, ' triples on a ').concat(X);
                break;
              case 'home_run':
                var Oe = M(W);
                Oe === 'inside the park'
                  ? (ee = ''.concat(G, ' hits an inside the park home run on a ').concat(X))
                  : (ee = ''.concat(G, ' homers on a ').concat(X, ' ').concat(Oe));
                break;
              case 'dropped_third_strike':
                ve !== 'unspecified'
                  ? (ee = ''.concat(G, ' reaches on dropped 3rd strike (').concat(ve, ')'))
                  : (ee = ''.concat(G, ' reaches on dropped 3rd strike'));
                break;
              case 'dropped_third_strike_batter_out':
                ve !== 'unspecified'
                  ? (ee = ''.concat(G, ' out at first on dropped 3rd strike (').concat(ve, ')'))
                  : (ee = ''.concat(G, ' out at first on dropped 3rd strike'));
                break;
              case 'fielders_choice':
                ee = ''.concat(G, ' ').concat(ie, " into fielder's choice");
                break;
              case 'error':
                X === 'bunt'
                  ? (ee = ''.concat(G, ' bunts and reaches on an error'))
                  : (ee = ''.concat(G, ' hits a ').concat(X, ' and reaches on an error'));
                break;
              case 'sacrifice_bunt':
                ee = ''.concat(G, ' sacrifices');
                break;
              case 'sacrifice_fly':
                ee = ''.concat(G, ' out on sacrifice fly');
                break;
              case 'sacrifice_bunt_error':
                ee = ''.concat(G, ' sacrifices and reaches on an error');
                break;
              case 'sacrifice_fly_error':
                ee = ''.concat(G, ' hits a sacrifice fly and reaches on an error');
                break;
              case 'batter_out':
              case 'batter_out_advance_runners':
                ee = ''.concat(G, ' ').concat(ie, ' out').concat(le);
                break;
              case 'offensive_interference':
                ee = ''.concat(G, ' out due to batter interference');
                break;
              case 'infield_fly':
                ee = ''.concat(G, ' out on infield fly');
                break;
              case 'other_out':
                ee = ''.concat(G, ' out (other)');
                break;
              case 'foul_tip_out':
                ee = ''.concat(G, ' out on foul tip');
                break;
              case 'double_play':
                ee = ''.concat(G, ' ').concat(ie, ' into a double play');
                break;
              case 'fielders_choice_double_play':
                ee = ''.concat(G, ' ').concat(ie, " into a fielder's choice double play");
                break;
              case 'triple_play':
                ee = ''.concat(G, ' ').concat(ie, ' into a triple play');
                break;
            }
            if (
              r.contains(
                [
                  'dropped_third_strike',
                  'dropped_third_strike_batter_out',
                  'offensive_interference',
                ],
                te.result.playType
              )
            )
              return ee;
            if (
              r.contains(
                ['error', 'sacrifice_bunt_error', 'sacrifice_fly_error'],
                te.result.playType
              )
            ) {
              var Re = x(te.participants);
              return ''.concat(ee).concat(Re);
            }
            var et = N(te.participants);
            switch (et.totalDefenders) {
              case 0:
                return ee;
              case 1:
                return ''.concat(ee, ' to ').concat(et.template);
              default:
                return ''.concat(ee, ', ').concat(et.template);
            }
          }
          function D(W, te) {
            var ee = s.firstWithRole(te.participants, 'batter'),
              C = s.firstWithRole(te.participants, 'pitcher'),
              G = s.firstFielderWithPosition(te.participants, 'C'),
              X = (0, h.stubbify)(ee == null ? void 0 : ee.playerId),
              ie = (0, h.stubbify)(C == null ? void 0 : C.playerId),
              ve = G !== void 0 ? (0, h.stubbify)(G.playerId) : '',
              le = ie !== '' ? ', '.concat(ie, ' pitching') : '',
              Be = ve !== '' ? ' by '.concat(ve) : '',
              Oe = te.result.lastPitchResult,
              Re;
            switch (te.result.playType) {
              case 'strikeout':
                Oe === 'strike_swinging'
                  ? (Re = ''.concat(X, ' strikes out swinging').concat(le))
                  : Oe === 'strike_looking'
                    ? (Re = ''.concat(X, ' strikes out looking').concat(le))
                    : Oe === 'foul_tip'
                      ? (Re = ''.concat(X, ' is out on foul tip').concat(le))
                      : Oe === 'foul_bunt'
                        ? (Re = ''.concat(X, ' is out on foul bunt').concat(le))
                        : (Re = ''.concat(X, ' strikes out').concat(le));
                break;
              case 'walk':
                Oe === 'intentional_ball' || (v.isEndAtBatEvent(W) && W.attributes.intentional)
                  ? (Re = ''.concat(X, ' is intentionally walked').concat(le))
                  : (Re = ''.concat(X, ' walks').concat(le));
                break;
              case 'hit_by_pitch':
                Re = ''.concat(X, ' is hit by pitch').concat(le);
                break;
              case 'catcher_interference':
                Re = ''.concat(X, " reaches on catcher's interference").concat(Be);
                break;
            }
            return Re;
          }
          function $(W) {
            var te = s.firstWithRole(W.participants, 'batter'),
              ee = (0, h.stubbify)(te == null ? void 0 : te.playerId),
              C = T(te == null ? void 0 : te.base);
            return ''.concat(ee, ' gets placed on ').concat(C);
          }
          function z() {
            return 'Half-inning ended by out on the base paths';
          }
          function q() {
            return 'Half-inning ended by scorekeeper';
          }
          function V() {
            return 'Current inning overridden by scorekeeper';
          }
          function U(W, te) {
            var ee = s.firstWithRole(te.participants, 'runner'),
              C = (0, h.stubbify)(ee == null ? void 0 : ee.playerId),
              G = T(ee == null ? void 0 : ee.base),
              X = '',
              ie = !0;
            switch (W.attributes.playType) {
              case 'offensive_interference':
                (X = ''.concat(C, ' out due to offensive interference')), (ie = !1);
                break;
              case 'attempted_pickoff':
                X = 'Pickoff attempt at '.concat(G);
                break;
              case 'fielders_choice_attempted_pickoff':
                X = ''.concat(C, ' safe at ').concat(G, " on fielder's choice");
                break;
              case 'out_on_appeal':
                (X = ''.concat(C, ' out on appeal at ').concat(G)), (ie = !1);
                break;
              case 'caught_stealing':
                X = ''.concat(C, ' caught stealing ').concat(G);
                break;
              case 'other_out':
                switch (W.attributes.playFlavor) {
                  case 'left_base_early':
                    (X = ''.concat(C, ' out at ').concat(G, ' due to leaving base early')),
                      (ie = !1);
                    break;
                  default:
                    X = ''.concat(C, ' out at ').concat(G);
                    break;
                }
                break;
              case 'picked_off':
                X = ''.concat(C, ' picked off at ').concat(G);
                break;
            }
            if (ee != null && ee.scored)
              switch (W.attributes.playType) {
                case 'stole_base':
                  X = ''.concat(C, ' scores on steal of home');
                  break;
                case 'defensive_indifference':
                  X = ''.concat(C, ' scores on defensive indifference');
                  break;
                case 'passed_ball':
                  X = ''.concat(C, ' scores on passed ball');
                  break;
                case 'wild_pitch':
                  X = ''.concat(C, ' scores on wild pitch');
                  break;
                case 'on_same_pitch':
                  X = ''.concat(C, ' scores on the same pitch');
                  break;
                case 'advanced_on_error':
                  X = ''.concat(C, ' scores on error');
                  break;
                case 'on_same_error':
                  X = ''.concat(C, ' scores on the same error');
                  break;
                case 'other_advance':
                  X = ''.concat(C, ' scores');
                  break;
              }
            else
              switch (W.attributes.playType) {
                case 'stole_base':
                  X = ''.concat(C, ' steals ').concat(G);
                  break;
                case 'defensive_indifference':
                  X = ''.concat(C, ' advances to ').concat(G, ' on defensive indifference');
                  break;
                case 'passed_ball':
                  X = ''.concat(C, ' advances to ').concat(G, ' on passed ball');
                  break;
                case 'wild_pitch':
                  X = ''.concat(C, ' advances to ').concat(G, ' on wild pitch');
                  break;
                case 'on_same_pitch':
                  X = ''.concat(C, ' advances to ').concat(G, ' on the same pitch');
                  break;
                case 'advanced_on_error':
                  X = ''.concat(C, ' advances to ').concat(G, ' on error');
                  break;
                case 'on_same_error':
                  X = ''.concat(C, ' advances to ').concat(G, ' on the same error');
                  break;
                case 'other_advance':
                  X = ''.concat(C, ' advances to ').concat(G);
                  break;
              }
            if (W.attributes.playType === 'advanced_on_error') {
              var ve = x(te.participants);
              return ''.concat(X).concat(ve);
            }
            var le = N(te.participants);
            return le.totalDefenders === 0 || !ie ? X : ''.concat(X, ', ').concat(le.template);
          }
          i.templateForChildBaseRunning = U;
          function j(W, te) {
            var ee = ['', '', ''],
              C = ee[0],
              G = ee[1],
              X = ee[2];
            (W.attributes.balls !== void 0 || W.attributes.strikes !== void 0) &&
              (C = 'Count changed to '
                .concat(te.situation.balls, '-')
                .concat(te.situation.strikes)),
              W.attributes.outs !== void 0 && (G = 'Outs changed to '.concat(W.attributes.outs)),
              W.attributes.scores !== void 0 &&
                (X = 'Score changed to '
                  .concat(te.situation.awayScore, '-')
                  .concat(te.situation.homeScore));
            for (var ie = '', ve = 0, le = [C, G, X]; ve < le.length; ve++) {
              var Be = le[ve];
              Be !== '' && (ie !== '' && (ie += '. '), (ie += ''.concat(Be)));
            }
            return ie;
          }
          function re(W, te) {
            var ee = W !== void 0 ? ' to '.concat(W) : '';
            return v.isHomeRunEvent(te) && (ee = ' '.concat(M(te))), ee;
          }
          function se(W) {
            if (v.isPitchEvent(W))
              switch (W.attributes.result) {
                case 'ball':
                  return '';
                case 'intentional_ball':
                  return ' on intentional ball';
                case 'strike_swinging':
                  return ' swinging';
                case 'strike_looking':
                  return ' looking';
                case 'foul':
                  return ' foul';
                case 'illegal_pitch':
                  return ' on illegal pitch';
                case 'foul_tip':
                  return ' on foul tip';
                case 'foul_bunt':
                  return ' on foul bunt';
              }
            return '';
          }
          function ce(W, te, ee) {
            var C = '${playerId}',
              G = re(te, ee),
              X = se(ee);
            switch (W) {
              case 'single':
                return ''.concat(C, ' singles').concat(G);
              case 'double':
                return ''.concat(C, ' doubles').concat(G);
              case 'triple':
                return ''.concat(C, ' triples').concat(G);
              case 'home_run':
                return ''.concat(C, ' homers').concat(G);
              case 'dropped_third_strike':
                return ''.concat(C, ' reaches on a dropped third strike');
              case 'dropped_third_strike_batter_out':
                return ''.concat(C, ' out after a dropped third strike');
              case 'fielders_choice':
                return ''.concat(C, " hits into a fielder's choice");
              case 'error':
                return ''.concat(C, ' reaches on an error');
              case 'sacrifice_bunt_error':
              case 'sacrifice_bunt':
                return ''.concat(C, ' sacrifice bunts').concat(G);
              case 'sacrifice_fly_error':
              case 'sacrifice_fly':
                return ''.concat(C, ' hits a sacrifice fly').concat(G);
              case 'batter_out':
              case 'batter_out_advance_runners':
                var ie = ee;
                switch (ie.attributes.playType) {
                  case 'ground_ball':
                    return ''.concat(C, ' grounds out').concat(G);
                  case 'hard_ground_ball':
                    return ''.concat(C, ' grounds out hard').concat(G);
                  case 'fly_ball':
                    return ''.concat(C, ' flies out').concat(G);
                  case 'pop_fly':
                    return ''.concat(C, ' pops out').concat(G);
                  case 'line_drive':
                    return ''.concat(C, ' lines out').concat(G);
                  case 'bunt':
                    return ''.concat(C, ' out on a bunt');
                  case 'foul_tip':
                    return ''.concat(C, ' out on a foul tip');
                }
                return ''.concat(C, ' out on ball in play');
              case 'offensive_interference':
                return ''.concat(C, ' out on offensive interference');
              case 'infield_fly':
                return ''.concat(C, ' out on an infield fly');
              case 'other_out':
                return ''.concat(C, ' out');
              case 'foul_tip_out':
                return ''.concat(C, ' out on a foul tip');
              case 'strikeout':
                return ''.concat(C, ' strikes out').concat(X);
              case 'walk':
                return ''.concat(C, ' walks').concat(X);
              case 'hit_by_pitch':
                return ''.concat(C, ' hit by pitch');
              case 'catcher_interference':
                return ''.concat(C, " reaches on catcher's interference");
              case 'double_play':
                return ''.concat(C, ' hits into a double play');
              case 'triple_play':
                return ''.concat(C, ' hits into a triple play');
              case 'fielders_choice_double_play':
                return ''.concat(C, " hits into a fielder's choice double play");
              case 'place_batter':
              case 'baserunning_ended_inning':
              case 'next_half':
              case 'inning_override':
              default:
                return '';
            }
          }
          function ae(W, te, ee) {
            var C = '${playerId}',
              G = re(te, ee),
              X = se(ee);
            switch (W) {
              case 'single':
                return ''.concat(C, ' gives up a single').concat(G);
              case 'double':
                return ''.concat(C, ' gives up a double').concat(G);
              case 'triple':
                return ''.concat(C, ' gives up a triple').concat(G);
              case 'home_run':
                return ''.concat(C, ' gives up a home run').concat(G);
              case 'dropped_third_strike':
                return 'The batter facing '.concat(C, ' reaches on a dropped third strike');
              case 'dropped_third_strike_batter_out':
                return 'The batter facing '.concat(C, ' is out after a dropped third strike');
              case 'fielders_choice':
                return 'The batter facing '.concat(C, " hit into a fielder's choice");
              case 'error':
                return 'The batter facing '.concat(C, ' reaches on an error');
              case 'sacrifice_bunt_error':
              case 'sacrifice_bunt':
                return ''.concat(C, ' gives up a sacrifice bunt').concat(G);
              case 'sacrifice_fly_error':
              case 'sacrifice_fly':
                return ''.concat(C, ' gives up a sacrifice fly').concat(G);
              case 'batter_out':
              case 'batter_out_advance_runners':
                var ie = ee;
                switch (ie.attributes.playType) {
                  case 'ground_ball':
                    return ''.concat(C, ' gets the batter to ground out').concat(G);
                  case 'hard_ground_ball':
                    return ''.concat(C, ' gets the batter to ground out hard').concat(G);
                  case 'fly_ball':
                    return ''.concat(C, ' gets the batter to fly out').concat(G);
                  case 'pop_fly':
                    return ''.concat(C, ' gets the batter to pop out').concat(G);
                  case 'line_drive':
                    return ''.concat(C, ' gets the batter to line out').concat(G);
                  case 'bunt':
                    return ''.concat(C, ' gets the batter to bunt out').concat(G);
                  case 'foul_tip':
                    return ''.concat(C, ' gets the batter out on a foul tip');
                }
                return 'The batter facing '.concat(C, ' is out on a ball in play');
              case 'offensive_interference':
                return 'The batter facing '.concat(C, ' is out on offensive interference');
              case 'infield_fly':
                return ''.concat(C, ' gets the batter out on an infield fly');
              case 'other_out':
                return ''.concat(C, ' gets the batter out');
              case 'foul_tip_out':
                return ''.concat(C, ' gets the batter out on a foul tip');
              case 'strikeout':
                return ''.concat(C, ' strikes the batter out').concat(X);
              case 'walk':
                return ''.concat(C, ' walks the batter').concat(X, ' ');
              case 'hit_by_pitch':
                return ''.concat(C, ' hits the batter with a pitch');
              case 'catcher_interference':
                return 'The batter facing '.concat(C, " reaches on catcher's interference");
              case 'double_play':
                return 'The batter facing '.concat(C, ' hits into a double play');
              case 'triple_play':
                return 'The batter facing '.concat(C, ' hits into a triple play');
              case 'fielders_choice_double_play':
                return 'The batter facing '.concat(C, " hits into a fielder's choice double play");
              case 'place_batter':
              case 'baserunning_ended_inning':
              case 'next_half':
              case 'inning_override':
              default:
                return '';
            }
          }
          function ue(W, te, ee) {
            var C = '${playerId}',
              G = re(te, ee);
            switch (W) {
              case 'single':
                return ''.concat(C, ' fields a single').concat(G);
              case 'double':
                return ''.concat(C, ' fields a double').concat(G);
              case 'triple':
                return ''.concat(C, ' fields a triple').concat(G);
              case 'home_run':
                return ''.concat(C, ' fields an inside-the-park home run');
              case 'dropped_third_strike':
                return ''.concat(C, ' fields a dropped third strike');
              case 'dropped_third_strike_batter_out':
                return ''.concat(C, ' fields a dropped third strike, batter is out');
              case 'fielders_choice':
                return ''.concat(C, " fields a fielder's choice");
              case 'error':
                return 'Batter reaches on error, '.concat(C, ' fielding');
              case 'sacrifice_bunt_error':
              case 'sacrifice_bunt':
                return ''.concat(C, ' fields a sacrifice bunt').concat(G);
              case 'sacrifice_fly_error':
              case 'sacrifice_fly':
                return ''.concat(C, ' fields a sacrifice fly').concat(G);
              case 'batter_out':
              case 'batter_out_advance_runners':
                var X = ee;
                switch (X.attributes.playType) {
                  case 'ground_ball':
                    return ''.concat(C, ' fields a ground ball').concat(G, ', batter out');
                  case 'hard_ground_ball':
                    return ''.concat(C, ' fields a hard ground ball').concat(G, ', batter out');
                  case 'fly_ball':
                    return ''.concat(C, ' fields a fly ball').concat(G, ', batter out');
                  case 'pop_fly':
                    return ''.concat(C, ' fields a pop fly').concat(G, ', batter out');
                  case 'line_drive':
                    return ''.concat(C, ' fields a line drive').concat(G, ', batter out');
                  case 'bunt':
                    return ''.concat(C, ' fields a bunt').concat(G, ', batter out');
                  case 'foul_tip':
                    return 'Batter is out on foul tip, '.concat(C, ' fielding');
                }
                return 'Batter is out, '.concat(C, ' fielding');
              case 'offensive_interference':
                return 'Batter is out on offensive interference, '.concat(C, ' fielding');
              case 'infield_fly':
                return ''.concat(C, ' fields an infield fly').concat(G, ', batter out');
              case 'other_out':
                return 'Batter out, '.concat(C, ' fielding');
              case 'foul_tip_out':
                return 'Batter is out on foul tip, '.concat(C, ' fielding');
              case 'catcher_interference':
                return "Batter reaches on catcher's interference by ".concat(C);
              case 'double_play':
                return ''.concat(C, ' turns a double play');
              case 'triple_play':
                return ''.concat(C, ' turns a triple play');
              case 'fielders_choice_double_play':
                return ''.concat(C, " turns a fielder's choice double play");
              case 'strikeout':
              case 'walk':
              case 'hit_by_pitch':
              case 'place_batter':
              case 'baserunning_ended_inning':
              case 'next_half':
              case 'inning_override':
              default:
                return '';
            }
          }
          function pe(W, te, ee) {
            var C = '${playerId}',
              G = re(te, ee);
            switch (W) {
              case 'single':
                return ''.concat(C, ' commits an error fielding a single').concat(G);
              case 'double':
                return ''.concat(C, ' commits an error fielding a double').concat(G);
              case 'triple':
                return ''.concat(C, ' commits an error fielding a triple').concat(G);
              case 'home_run':
                return ''.concat(C, ' commits an error fielding an inside-the-park home run');
              case 'dropped_third_strike':
                return ''.concat(C, ' commits an error on a dropped third strike');
              case 'dropped_third_strike_batter_out':
                return ''.concat(C, ' commits an error on a dropped third strike, batter out');
              case 'fielders_choice':
                return ''.concat(C, " commits an error on a fielder's choice").concat(G);
              case 'error':
                return ''.concat(C, ' commits an error on a ball in play').concat(G);
              case 'sacrifice_bunt_error':
              case 'sacrifice_bunt':
                return ''.concat(C, ' commits an error on a sacrifice bunt');
              case 'sacrifice_fly_error':
              case 'sacrifice_fly':
                return ''.concat(C, ' commits an error on a sacrifice fly');
              case 'batter_out':
              case 'batter_out_advance_runners':
                var X = ee;
                switch (X.attributes.playType) {
                  case 'ground_ball':
                    return ''
                      .concat(C, ' commits an error on a ground ball')
                      .concat(G, ', batter out');
                  case 'hard_ground_ball':
                    return ''
                      .concat(C, ' commits an error on a hard ground ball')
                      .concat(G, ', batter out');
                  case 'fly_ball':
                    return ''
                      .concat(C, ' commits an error on a fly ball')
                      .concat(G, ', batter out');
                  case 'pop_fly':
                    return ''.concat(C, ' commits an error on a pop fly').concat(G, ', batter out');
                  case 'line_drive':
                    return ''
                      .concat(C, ' commits an error on a line drive')
                      .concat(G, ', batter out');
                  case 'bunt':
                    return ''.concat(C, ' commits an error on a bunt').concat(G, ', batter out');
                  case 'foul_tip':
                    return ''.concat(C, ' commits an error on a foul tip, batter out');
                }
                return ''.concat(C, ' commits an error, batter is out');
              case 'offensive_interference':
                return ''.concat(C, ' commits an error, batter is out on offensive interference');
              case 'infield_fly':
                return ''.concat(C, ' commits an error on an infield fly');
              case 'other_out':
                return 'Batter is out, '.concat(C, ' errors on the play');
              case 'foul_tip_out':
                return ''.concat(C, ' commits an error on a foul tip, batter out');
              case 'catcher_interference':
                return ''.concat(C, " commits an error, catcher's interference");
              case 'double_play':
                return ''.concat(C, ' commits an error during a double play');
              case 'triple_play':
                return ''.concat(C, ' commits an error during a triple play');
              case 'fielders_choice_double_play':
                return ''.concat(C, " commits an error during a fielder's choice double play");
              case 'strikeout':
              case 'walk':
              case 'hit_by_pitch':
              case 'place_batter':
              case 'baserunning_ended_inning':
              case 'next_half':
              case 'inning_override':
              default:
                return '';
            }
          }
          function De(W, te, ee, C) {
            var G = '${playerId}',
              X = re(te, ee),
              ie = T(C.base),
              ve = C.out ? 'out' : 'safe',
              le = ''.concat(ve, ' at ').concat(ie);
            switch (
              (C.scored
                ? (le = 'scores')
                : C.base === 4 && !C.out && !C.scored && (le = 'does not score'),
              W)
            ) {
              case 'single':
                return 'Batter singles'.concat(X, ', ').concat(G, ' ').concat(le);
              case 'double':
                return 'Batter doubles'.concat(X, ', ').concat(G, ' ').concat(le);
              case 'triple':
                return 'Batter triples'.concat(X, ', ').concat(G, ' ').concat(le);
              case 'home_run':
                return 'Batter homers'.concat(X, ', ').concat(G, ' ').concat(le);
              case 'dropped_third_strike':
              case 'dropped_third_strike_batter_out':
                return ''.concat(G, ' ').concat(le, ' on a dropped third strike');
              case 'fielders_choice':
                return "Fielder's choice, ".concat(G, ' ').concat(le);
              case 'error':
                return 'Error, '.concat(G, ' ').concat(le);
              case 'sacrifice_bunt_error':
              case 'sacrifice_bunt':
                return ''.concat(G, ' ').concat(le, ' on a sacrifice bunt');
              case 'sacrifice_fly_error':
              case 'sacrifice_fly':
                return ''.concat(G, ' ').concat(le, ' on a sacrifice fly');
              case 'batter_out':
              case 'batter_out_advance_runners':
                var Be = ee;
                switch (Be.attributes.playType) {
                  case 'ground_ball':
                    return 'Batter grounds out'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'hard_ground_ball':
                    return 'Batter grounds out hard'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'fly_ball':
                    return 'Batter flies out'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'pop_fly':
                    return 'Batter pops out'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'line_drive':
                    return 'Batter lines out'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'bunt':
                    return 'Batter out on bunt'.concat(X, ', ').concat(G, ' ').concat(le);
                  case 'foul_tip':
                    return 'Batter out on foul tip, '.concat(G, ' ').concat(le);
                }
                return 'Batter out on ball in play, '.concat(G, ' ').concat(le);
              case 'offensive_interference':
                return 'Batter out on offensive interference, '.concat(G, ' ').concat(le);
              case 'infield_fly':
                return 'Infield fly, '.concat(G, ' ').concat(le);
              case 'other_out':
                return 'Batter out, '.concat(G, ' ').concat(le);
              case 'foul_tip_out':
                return 'Batter out on foul tip, '.concat(G, ' ').concat(le);
              case 'catcher_interference':
                return "Batter reaches on catcher's interference, ".concat(G, ' ').concat(le);
              case 'double_play':
                return 'Double play, '.concat(G, ' ').concat(le);
              case 'triple_play':
                return 'Triple play, '.concat(G, ' ').concat(le);
              case 'fielders_choice_double_play':
                return "Fielder's choice double play, ".concat(G, ' ').concat(le);
              case 'walk':
                return C.baseChanged
                  ? 'Batter walked, '.concat(G, ' advances to ').concat(ie)
                  : 'Batter walked, '.concat(G, ' remains at ').concat(ie);
              case 'hit_by_pitch':
                return C.baseChanged
                  ? 'Batter hit by pitch, '.concat(G, ' advances to ').concat(ie)
                  : 'Batter hit by pitch, '.concat(G, ' remains at ').concat(ie);
              case 'strikeout':
              case 'place_batter':
              case 'baserunning_ended_inning':
              case 'next_half':
              case 'inning_override':
              default:
                return '';
            }
          }
        })(oo)),
      oo
    );
  }
  var br = {},
    dd;
  function zy() {
    if (dd) return br;
    (dd = 1),
      Object.defineProperty(br, '__esModule', { value: !0 }),
      (br.tabularizeFullPlayByPlay = br.exportTabularPlayByPlay = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = od(),
      p = id();
    function v(l) {
      return l ? ''.concat(l.x.toFixed(2), ',').concat(l.y.toFixed(2)) : void 0;
    }
    function h(l, u) {
      var y = (0, r.lookupMapForEvents)(u);
      return s(l, y);
    }
    br.exportTabularPlayByPlay = h;
    function s(l, u) {
      for (
        var y, o, a = [], n = [], e = [], t = [], d = [], f = 0, _ = 0, S = 0, P = l;
        S < P.length;
        S++
      ) {
        var I = P[S];
        (f += 1),
          e.push({
            atBatIndex: f,
            initialInning: I.initialSituation.inning,
            initialHalf: I.initialSituation.half,
            initialOuts: I.initialSituation.outs,
            initial1stBase: I.initialSituation.bases[1],
            initial2ndBase: I.initialSituation.bases[2],
            initial3rdBase: I.initialSituation.bases[3],
            initialHomeScore: I.initialSituation.homeScore,
            initialAwayScore: I.initialSituation.awayScore,
            resultingInning: I.result.situation.inning,
            resultingHalf: I.result.situation.half,
            resultingOuts: I.result.situation.outs,
            resulting1stBase: I.result.situation.bases[1],
            resulting2ndBase: I.result.situation.bases[2],
            resulting3rdBase: I.result.situation.bases[3],
            resultingHomeScore: I.result.situation.homeScore,
            resultingAwayScore: I.result.situation.awayScore,
          });
        for (var b = 0, E = void 0, T = 0, F = I.pitches; T < F.length; T++) {
          var R = F[T];
          (b += 1),
            n.push({
              atBatIndex: f,
              pitchIndex: b,
              pitchResult: R.result,
              pitchSpeed: R.speed,
              pitchType: R.style,
              occurredAt: R.createdAt ? new Date(R.createdAt).toISOString() : void 0,
              initialBalls: E !== void 0 ? E.resultingBalls : 0,
              initialStrikes: E !== void 0 ? E.resultingStrikes : 0,
              initial1stBase: I.initialSituation.bases[1],
              initial2ndBase: I.initialSituation.bases[2],
              initial3rdBase: I.initialSituation.bases[3],
              initialOuts: I.initialSituation.outs,
              initialHomeScore: I.initialSituation.homeScore,
              initialAwayScore: I.initialSituation.awayScore,
              resultingBalls: R.resultingBalls,
              resultingStrikes: R.resultingStrikes,
            }),
            (E = R);
        }
        for (
          var L = c.fromJS(I.initialSituation.bases),
            x = [0, 0, 0],
            N = x[0],
            M = x[1],
            J = x[2],
            D = 0,
            $ = I.childEvents;
          D < $.length;
          D++
        ) {
          var z = $[D];
          if (
            ((b = z.beforePitchIndex + 1),
            J !== b && ((N = 0), (M = 0), (J = b)),
            ['base_running', 'balk', 'foul_error'].includes(z.code))
          ) {
            z.code === 'base_running' && ((M += 1), (_ += 1));
            for (var q = 0, V = z.participants; q < V.length; q++) {
              var U = V[q];
              if (U.role === 'runner')
                (N += 1),
                  (_ += 1),
                  t.push({
                    atBatIndex: f,
                    pitchIndex: b,
                    advancementIndex: N,
                    runnerId: U.playerId,
                    playType: z.headline,
                    out: U.out,
                    scored: U.scored,
                    startBase: (y = L.keyOf(U.playerId)) !== null && y !== void 0 ? y : 0,
                    endBase: U.base,
                    sequence: _,
                  }),
                  (L = c.fromJS(z.situation.bases)),
                  (n[z.beforePitchIndex].initialAwayScore = z.situation.awayScore),
                  (n[z.beforePitchIndex].initialHomeScore = z.situation.homeScore),
                  (n[z.beforePitchIndex].initialOuts = z.situation.outs),
                  (n[z.beforePitchIndex].initial1stBase = L[1]),
                  (n[z.beforePitchIndex].initial2ndBase = L[2]),
                  (n[z.beforePitchIndex].initial3rdBase = L[3]);
              else if (U.role === 'fielder')
                for (var j = 0, re = U.fieldingOrder; j < re.length; j++) {
                  var se = re[j];
                  (_ += 1),
                    d.push({
                      atBatIndex: f,
                      pitchIndex: b,
                      fieldingIndex: M,
                      fieldingOrder: se,
                      fielderId: U.playerId,
                      position: U.position,
                      committedError: U.committedError,
                      sequence: _,
                    });
                }
            }
          }
        }
        for (var ce = '', ae = NaN, ue = '', pe = 0, De = I.participants; pe < De.length; pe++) {
          var U = De[pe];
          if (U.role === 'fielder')
            for (var W = 0, te = U.fieldingOrder; W < te.length; W++) {
              var se = te[W];
              (_ += 1),
                d.push({
                  atBatIndex: f,
                  pitchIndex: b,
                  fieldingIndex: 1,
                  fieldingOrder: se,
                  fielderId: U.playerId,
                  position: U.position,
                  committedError: U.committedError,
                  sequence: _,
                });
            }
          else
            U.role === 'batter'
              ? ((ce = U.playerId), (ae = U.slot))
              : U.role === 'pitcher' && (ue = U.playerId);
        }
        var ee = u[I.result.eventId],
          C = (0, p.findLocationData)(ee);
        a.push({
          atBatIndex: f,
          batterId: ce,
          battingOrder: ae,
          pitcherId: ue,
          resultingPlay: I.result.playType,
          occurredAt: I.result.createdAt ? new Date(I.result.createdAt).toISOString() : void 0,
          xy: v(C.fieldedLocation),
          ballInPlayType: C.ballInPlayType,
          hrLocation: C.hrLocation,
        });
        for (var G = 0, X = I.baseRunningOnPlayEvents; G < X.length; G++)
          for (var ie = X[G], ve = 0, le = ie.participants; ve < le.length; ve++) {
            var U = le[ve];
            U.role === 'runner' &&
              ((N += 1),
              (_ += 1),
              t.push({
                atBatIndex: f,
                pitchIndex: b,
                advancementIndex: N,
                runnerId: U.playerId,
                playType: ie.playType,
                out: U.out,
                scored: U.scored,
                startBase: (o = L.keyOf(U.playerId)) !== null && o !== void 0 ? o : 0,
                endBase: U.base,
                sequence: _,
              }),
              (L = c.fromJS(ie.situation.bases)));
          }
      }
      return { plays: a, pitches: n, playsOverview: e, baseAdvance: t, fielding: d };
    }
    return (br.tabularizeFullPlayByPlay = s), br;
  }
  var fd;
  function Vy() {
    if (fd) return Pr;
    (fd = 1),
      Object.defineProperty(Pr, '__esModule', { value: !0 }),
      (Pr.PlayByPlayEngine = Pr.PlayByPlayState = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(de()),
      p = i.__importStar(Ie()),
      v = i.__importStar(be()),
      h = i.__importStar(Pt()),
      s = at(),
      l = Wy(),
      u = od(),
      y = i.__importStar(er()),
      o = i.__importStar($y()),
      a = zy(),
      n = (function (t) {
        i.__extends(d, t);
        function d() {
          return (t !== null && t.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(d.prototype, 'currentAtBat', {
            get: function () {
              var f = this.currentAtBatImmutable,
                _ = f.toJS();
              return (_.index = void 0), (_.orderedEventIds = f.orderedEventIds), _;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (d.prototype.renderForScorebook = function (f, _, S) {
            var P = _.stateAfterEvent(this.nextEventOffset).homeId,
              I = _.stateAfterEvent(this.nextEventOffset).awayId,
              b = _.stateAfterEvent(this.nextEventOffset).atBatTeamId,
              E = S.stateAfterEvent(this.nextEventOffset).lineupIndex(b);
            return (0, u.renderForScorebook)(P, I, E, f, this.allAtBatsImmutable);
          }),
          (d.prototype.exportTabularPlayByPlay = function (f) {
            return (0, a.exportTabularPlayByPlay)(this.completedAtBats, f);
          }),
          Object.defineProperty(d.prototype, 'lastCompletedAtBat', {
            get: function () {
              return this.completedAtBatAtIndex(this.get('completedAtBats').size - 1);
            },
            enumerable: !1,
            configurable: !0,
          }),
          (d.prototype.recentCompletedAtBats = function (f) {
            var _ = this.get('completedAtBats');
            return _.slice(-f)
              .map(function (S, P) {
                var I = S.toJS();
                return (I.index = _.size - (f - P)), (I.orderedEventIds = S.orderedEventIds), I;
              })
              .toJS();
          }),
          (d.prototype.completedAtBatContainingEvent = function (f) {
            var _ = this.getIn(['idToAtBatIndexMap', f]);
            return this.completedAtBatAtIndex(_);
          }),
          (d.prototype.atBatContainingEvent = function (f) {
            var _ = this.completedAtBatContainingEvent(f);
            if (_) return _;
            for (var S = 0, P = this.currentAtBat.orderedEventIds; S < P.length; S++) {
              var I = P[S];
              if (f === I) return this.currentAtBat;
            }
          }),
          (d.prototype.completedAtBatAtIndex = function (f) {
            var _ = this.getIn(['completedAtBats', f]);
            if (_ !== void 0) {
              var S = _.toJS();
              return (S.index = f), (S.orderedEventIds = _.orderedEventIds), S;
            }
          }),
          (d.prototype.completedAtBatsForBatter = function (f) {
            var _ = this,
              S = this.getIn(['batterIdToAtBatIndicesMap', f]) || r.List();
            return S.map(function (P) {
              return _.getIn(['completedAtBats', P]);
            }).toJS();
          }),
          Object.defineProperty(d.prototype, 'completedAtBats', {
            get: function () {
              return this.get('completedAtBats').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'completedAnnotatedAtBats', {
            get: function () {
              for (var f = this.get('completedAtBats').size, _ = [], S = 0; S < f; S++)
                _.push(this.completedAtBatAtIndex(S));
              return _;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (d.prototype.possiblyMutatedAtBats = function (f) {
            var _ = this.earliestPossiblyMutatedAtBatIndex(f);
            _ === void 0 && (_ = 0);
            for (
              var S = { completedAtBats: [], startingIndex: _, currentAtBat: this.currentAtBat },
                P = this.completedAtBatsSize,
                I = _;
              I < P;
              I++
            ) {
              var b = this.completedAtBatAtIndex(I);
              b !== void 0 && S.completedAtBats.push(b);
            }
            return S;
          }),
          (d.prototype.earliestPossiblyMutatedAtBatIndex = function (f) {
            var _ = this.idToAtBatIndexMap[f];
            return _ === void 0
              ? c.contains(this.currentAtBatImmutable.orderedEventIds, f)
                ? Math.max(this.completedAtBatsSize - 1, 0)
                : void 0
              : Math.max(_ - 1, 0);
          }),
          Object.defineProperty(d.prototype, 'completedAtBatsSize', {
            get: function () {
              return this.get('completedAtBats').size;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'currentAtBatImmutable', {
            get: function () {
              return this.get('currentAtBat');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'lastCompletedAtBatImmutable', {
            get: function () {
              var f = this.get('completedAtBats');
              if (f.size !== 0) return f.last();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'completedAtBatsImmutable', {
            get: function () {
              return this.get('completedAtBats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'allAtBatsImmutable', {
            get: function () {
              return this.completedAtBatsImmutable
                .concat(r.List.of(this.currentAtBatImmutable))
                .toList();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'idToAtBatIndexMap', {
            get: function () {
              return this.get('idToAtBatIndexMap').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(d.prototype, 'batterIdToAtBatIndicesMap', {
            get: function () {
              return this.get('batterIdToAtBatIndicesMap').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (d.prototype.pushPitch = function (f, _) {
            var S = this.set('lastPitchResult', f.attributes.result);
            return S.updateIn(['currentAtBat', 'pitches'], function (P) {
              var I = {
                result: f.attributes.result,
                eventId: f.id,
                writeInDescription: f.description,
                resultingBalls: _.resultingBalls,
                resultingStrikes: _.resultingStrikes,
                resultingOuts: _.resultingOuts,
                speed: f.attributes.speed,
                style: f.attributes.style,
                template: void 0,
                createdAt: f.createdAt,
              };
              return (I.template = o.templateForPitch(f, I)), P.push(I);
            });
          }),
          (d.prototype.setResult = function (f, _, S, P) {
            return f.set(
              'result',
              new y.PlayResultRecord({
                playType: S,
                lastPitchResult: this.get('lastPitchResult'),
                eventId: _.id,
                writeInDescription: _.description,
                createdAt: _.createdAt,
                situation: P,
              })
            );
          }),
          (d.prototype.setResultForCurrentAtBat = function (f, _, S) {
            var P = this;
            return this.update('currentAtBat', function (I) {
              return P.setResult(I, f, _, S);
            });
          }),
          (d.prototype.updateLastCompletedAtBat = function (f) {
            var _ = this.get('completedAtBats').size - 1;
            return this.updateIn(['completedAtBats', _], f);
          }),
          (d.prototype.updatePerspectivesForTopLevelParticipants = function (f, _) {
            var S = o.perspectivesForAtBat(f, _);
            return _.update('participants', function (P) {
              return P.map(function (I) {
                var b,
                  E = I;
                if (E.playerId === void 0) return E;
                var T;
                return (
                  E.role === 'runner'
                    ? (T = (b = S.runners) === null || b === void 0 ? void 0 : b[E.playerId])
                    : (T = E.committedError ? S.error : S[E.role]),
                  T === void 0
                    ? E
                    : E.set('perspective', o.replacePlayerIdInPerspective(T, E.playerId))
                );
              }).toList();
            });
          }),
          (d.prototype.reconcileAtBatPlayTypeWithExtraBaseRunning = function (f) {
            return f.update('result', function (_) {
              var S = _.playType,
                P = y.firstWithRole(f.participants, 'batter'),
                I = P == null ? void 0 : P.out,
                b = I ? 1 : 0;
              return (
                f.baseRunningOnPlayEvents.forEach(function (E) {
                  E.participants.forEach(function (T) {
                    T.out &&
                      (T.playerId === (P == null ? void 0 : P.playerId)
                        ? (I || b++, (I = !0))
                        : b++);
                  });
                }),
                b === 2
                  ? (S = I ? 'double_play' : 'fielders_choice_double_play')
                  : b === 3 && (S = 'triple_play'),
                _.set('playType', S)
              );
            });
          }),
          (d.prototype.updateAtBatRunnerParticipantStateFromExtraBaseRunning = function (f, _) {
            var S = f.get('participants').findKey(function (I) {
              return I.playerId === _.attributes.runnerId;
            });
            if (S === void 0) return f;
            var P = h.baseRunningPlayTypeConfigs[_.attributes.playType];
            return f.updateIn(['participants', S], function (I) {
              return I.merge({
                base: _.attributes.base,
                out: P.runnerOut,
                scored:
                  _.attributes.base === 4 &&
                  !P.runnerOut &&
                  _.attributes.playType !== 'did_not_score',
                baseChanged: I.baseChanged || P.runnerOut || _.attributes.base !== I.base,
              });
            });
          }),
          (d.prototype.reconcileLastAtBatWithExtraBaseRunning = function (f, _, S) {
            var P = this,
              I = this.updateLastCompletedAtBat(function (b) {
                (b = P.reconcileAtBatPlayTypeWithExtraBaseRunning(b).setIn(
                  ['result', 'situation'],
                  S
                )),
                  (b = P.updateAtBatRunnerParticipantStateFromExtraBaseRunning(b, _)),
                  (b = b.set('template', o.templateForAtBat(f, b))),
                  (b = b.set('headline', o.headlineForAtBat(f, b)));
                var E = c.partial(P.updatePerspectivesForTopLevelParticipants, f);
                return b.update(E);
              });
            return I.setIn(['currentAtBat', 'initialSituation'], S);
          }),
          (d.prototype.cycleAtBat = function (f) {
            var _ = this.get('currentAtBat'),
              S = this.get('completedAtBats').size,
              P = c
                .pluck(_.pitches.toArray(), 'eventId')
                .concat(c.pluck(_.childEvents.toArray(), 'eventId'), [_.result.eventId]),
              I = this.update('idToAtBatIndexMap', function (E) {
                return E.withMutations(function (T) {
                  for (var F = 0, R = P; F < R.length; F++) {
                    var L = R[F];
                    T.set(L, S);
                  }
                });
              }),
              b = y.firstWithRole(_.participants, 'batter');
            return (
              b !== void 0 &&
                (I = I.updateIn(['batterIdToAtBatIndicesMap', b.playerId], r.List(), function (E) {
                  return E.push(S);
                })),
              I.update('completedAtBats', function (E) {
                return E.push(_);
              }).set('currentAtBat', new y.AtBatRecord({ initialSituation: f }))
            );
          }),
          (d.prototype.pushChildEvent = function (f, _, S, P) {
            var I = this;
            P === void 0 && (P = r.List());
            var b;
            return (
              f.code === 'base_running' && (b = f.attributes.playType),
              this.updateIn(['currentAtBat', 'childEvents'], function (E) {
                var T = new y.ChildEventRecord({
                  beforePitchIndex: I.getIn(['currentAtBat', 'pitches']).size,
                  eventId: f.id,
                  writeInDescription: f.description,
                  code: f.code,
                  createdAt: f.createdAt,
                  situation: _,
                  participants: P,
                  baseRunningPlayType: b,
                });
                return (
                  c.isEmpty(S) || (T = T.set('metadata', r.fromJS(S))),
                  (T = T.set('template', o.templateForChildEvent(f, T)).set(
                    'headline',
                    o.headlineForChildEvent(f)
                  )),
                  E.push(T)
                );
              })
            );
          }),
          (d.prototype.setSignificantEventId = function (f) {
            return this.getIn(['currentAtBat', 'firstSignificantEventId']) === void 0
              ? this.setIn(['currentAtBat', 'firstSignificantEventId'], f)
              : this;
          }),
          (d.prototype.pushSimpleChildEvent = function (f, _, S, P) {
            for (var I = [], b = 4; b < arguments.length; b++) I[b - 4] = arguments[b];
            if (I.length !== 0) {
              var E = r.List().withMutations(function (T) {
                for (var F = 0, R = I; F < R.length; F++) {
                  var L = R[F];
                  T.push(
                    new y.ParticipantRecord({ playerId: L, position: S.positionForPlayer(L) })
                  );
                }
              });
              return this.pushChildEvent(f, _, P, E);
            }
            return this.pushChildEvent(f, _, P);
          }),
          (d.prototype.pushBaseRunningOnPlayEvent = function (f, _, S) {
            S === void 0 && (S = r.List());
            var P = this.get('completedAtBats').size - 1,
              I = this.setIn(['idToAtBatIndexMap', f.id], P);
            return I.updateIn(['completedAtBats', P, 'baseRunningOnPlayEvents'], function (b) {
              var E = new y.BaseRunningOnPlayRecord({
                eventId: f.id,
                writeInDescription: f.description,
                playType: f.attributes.playType,
                createdAt: f.createdAt,
                situation: _,
                participants: S,
              });
              return (
                (E = E.set('headline', o.headlineForChildEvent(f))),
                b.push(E.set('template', o.templateForBaseRunningOnPlayEvent(f, E)))
              );
            });
          }),
          d
        );
      })(v.ImmutableState);
    Pr.PlayByPlayState = n;
    var e = (function (t) {
      i.__extends(d, t);
      function d(f, _, S, P, I, b) {
        var E = t.call(this, f) || this;
        return (
          (E.baseEvents = f),
          (E.context = _),
          (E.situation = S),
          (E.lineup = P),
          (E.fielders = I),
          (E.baserunners = b),
          (E.metadataTracker = new l.MetadataTracker(
            S,
            P,
            I,
            b,
            E.context.playByPlayMetadataKeys || []
          )),
          E
        );
      }
      return (
        (d.prototype.initialState = function () {
          return new n(
            r.fromJS({
              completedAtBats: [],
              currentAtBat: new y.AtBatRecord(),
              idToAtBatIndexMap: {},
              batterIdToAtBatIndicesMap: {},
              lastPitchResult: void 0,
            })
          );
        }),
        Object.defineProperty(d.prototype, 'lastSituationState', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(d.prototype, 'nextSituationState', {
          get: function () {
            return this.situation.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(d.prototype, 'lastLineupState', {
          get: function () {
            return this.lineup.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(d.prototype, 'lastFieldersState', {
          get: function () {
            return this.fielders.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(d.prototype, 'lastBaserunnersState', {
          get: function () {
            return this.baserunners.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(d.prototype, 'nextBaserunnersState', {
          get: function () {
            return this.baserunners.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        (d.prototype.situationRecordForNextEvent = function () {
          return new y.PlaySituationRecord({
            inning: this.nextSituationState.inning,
            half: this.nextSituationState.half,
            balls: this.nextSituationState.balls,
            strikes: this.nextSituationState.strikes,
            outs: this.nextSituationState.outs,
            bases: this.nextBaserunnersState.baserunnersImmutable,
            homeScore: this.nextBaserunnersState.scoreForTeam(this.nextSituationState.homeId),
            awayScore: this.nextBaserunnersState.scoreForTeam(this.nextSituationState.awayId),
          });
        }),
        (d.prototype.pushParticipantForPitcher = function (f) {
          var _ = this.lastSituationState.inFieldTeamId;
          return f.push(
            new y.ParticipantRecord({
              playerId: this.lastFieldersState.playerForPosition(_, 'P'),
              role: 'pitcher',
            })
          );
        }),
        (d.prototype.pushParticipantForCatcher = function (f) {
          var _ = this.lastSituationState.inFieldTeamId;
          return f.push(
            new y.ParticipantRecord({
              playerId: this.lastFieldersState.playerForPosition(_, 'C'),
              role: 'fielder',
              position: 'C',
            })
          );
        }),
        (d.prototype.pushParticipantsForNonBatterBaserunners = function (f) {
          for (
            var _ = this,
              S = this.lastSituationState.atBatTeamId,
              P = this.lastLineupState.currentBatter(S),
              I = f,
              b = this.nextBaserunnersState.runnersScoredOnLastEvent,
              E = 0,
              T = b;
            E < T.length;
            E++
          ) {
            var F = T[E];
            if (F !== P) {
              var R = this.lastBaserunnersState.baseForPlayer(F);
              I = I.push(
                new y.ParticipantRecord({
                  playerId: F,
                  globalAtBatId: this.lastBaserunnersState.globalAtBatIdForPlayer(F),
                  role: 'runner',
                  base: 4,
                  scored: !0,
                  template: o.shortTemplateForBaserunner(F, R, 4),
                })
              );
            }
          }
          var L = this.nextBaserunnersState.baserunners;
          return (
            [3, 2, 1].forEach(function (x) {
              if (L[x] !== void 0) {
                var N = _.nextBaserunnersState.playerAtBase(Number(x));
                if (!(N === void 0 || N === P)) {
                  var M = _.lastBaserunnersState.baseForPlayer(N);
                  I = I.push(
                    new y.ParticipantRecord({
                      playerId: N,
                      globalAtBatId: _.lastBaserunnersState.globalAtBatIdForPlayer(N),
                      role: 'runner',
                      base: Number(x),
                      baseChanged: M !== Number(x),
                      template: o.shortTemplateForBaserunner(N, M, Number(x)),
                    })
                  );
                }
              }
            }),
            I
          );
        }),
        (d.prototype.updatesForFieldingParticipants = function (f, _, S) {
          for (
            var P = {}, I = -1, b = {}, E = void 0, T = 0, F = 0, R = y.allWithRole(f, 'fielder');
            F < R.length;
            F++
          ) {
            var L = R[F];
            (b[L.position] = !0),
              L.fieldingOrder.last() > I && ((I = L.fieldingOrder.last()), (E = L.position));
          }
          for (var x = 0, N = S; x < N.length; x++) {
            for (var M = N[x], J = !1, D = [], $ = 0; $ < _.attributes.defenders.length; $++)
              _.attributes.defenders[$].position === M &&
                (E === M && $ === 0 ? T++ : D.push($ + I + 1 - T),
                _.attributes.defenders[$].error && (J = !0));
            P[M] = { fieldingOrder: D, committedError: J };
          }
          return P;
        }),
        (d.prototype.updateParticipantsForDefenders = function (f, _) {
          for (
            var S = f,
              P = this.lastSituationState.inFieldTeamId,
              I = c.uniq(c.pluck(_.attributes.defenders, 'position')),
              b = this.updatesForFieldingParticipants(f, _, I),
              E = function (x) {
                var N,
                  M,
                  J = void 0,
                  D = void 0,
                  $ = S.findEntry(function (q) {
                    return q.position === x;
                  });
                if (($ !== void 0 && ((N = [$[0], $[1]]), (J = N[0]), (D = N[1])), J !== void 0)) {
                  var z = function (q) {
                    return (
                      (q = q.update('fieldingOrder', function (V) {
                        return V.push.apply(V, b[x].fieldingOrder);
                      })),
                      q.set('committedError', b[x].committedError || q.committedError)
                    );
                  };
                  S = S.set(J, D.update(z));
                } else
                  S = S.push(
                    new y.ParticipantRecord({
                      playerId: T.lastFieldersState.playerForPosition(P, x),
                      role: 'fielder',
                      position: x,
                      committedError: b[x].committedError,
                      fieldingOrder: (M = r.List).of.apply(M, b[x].fieldingOrder),
                    })
                  );
              },
              T = this,
              F = 0,
              R = I;
            F < R.length;
            F++
          ) {
            var L = R[F];
            E(L);
          }
          return S;
        }),
        (d.prototype.updateParticipantsForSpecificBaseRunningPlays = function (f, _) {
          switch (_.attributes.playType) {
            case 'stole_base':
            case 'wild_pitch':
            case 'passed_ball':
              this.pushParticipantForPitcher(f), this.pushParticipantForCatcher(f);
              break;
          }
        }),
        (d.prototype.processOneEvent = function (f, _) {
          switch (_.code) {
            case 'pitch':
              f = this.pitch(f, _);
              break;
            case 'ball_in_play':
              f = this.ballInPlay(f, _);
              break;
            case 'end_at_bat':
              f = this.endAtBat(f, _);
              break;
            case 'base_running':
              f = this.baseRunning(f, _);
              break;
            case 'end_half':
              f = this.endHalf(f, _);
              break;
            case 'override':
              f = this.override(f, _);
              break;
            case 'clear_lineup_index':
              f = this.clearLineupIndex(f, _);
              break;
            case 'goto_lineup_index':
              f = this.gotoLineupIndex(f, _);
              break;
            case 'balk':
              f = this.balk(f, _);
              break;
            case 'illegal_pitch_advance':
              f = this.illegalPitchAdvance(f, _);
              break;
            case 'foul_error':
              f = this.foulError(f, _);
              break;
            case 'place_batter':
              f = this.placeBatter(f, _);
              break;
            case 'place_runner':
              f = this.placeRunner(f, _);
              break;
            case 'pitcher_decision':
              f = this.pitcherDecision(f, _);
              break;
            case 'swap_dp_flex':
              f = this.swapDPFlex(f, _);
              break;
            case 'clear_all_positions':
            case 'clear_entire_lineup':
            case 'squash_lineup_index':
            case 'message':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
              );
              break;
            case 'fill_position':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'clear_position_by_id':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'fill_lineup_index':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'fill_lineup':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'reorder_lineup':
              var S = _,
                P = this.lastLineupState.getPlayerAtIndex(
                  S.attributes.teamId,
                  S.attributes.fromIndex
                );
              P !== void 0
                ? (f = f.pushSimpleChildEvent(
                    _,
                    this.situationRecordForNextEvent(),
                    this.lastFieldersState,
                    this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                    P
                  ))
                : (f = f.pushSimpleChildEvent(
                    _,
                    this.situationRecordForNextEvent(),
                    this.lastFieldersState,
                    this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
                  ));
              break;
            case 'replace_runner':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.incomingPlayerId,
                _.attributes.outgoingPlayerId
              );
              break;
            case 'swap_players':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.firstPlayerId,
                _.attributes.secondPlayerId
              );
              break;
            case 'sub_players':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.incomingPlayerId,
                _.attributes.outgoingPlayerId
              );
              break;
            case 'assign_dh':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.dhId,
                _.attributes.fielderId
              );
              break;
            case 'remove_dh':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.dhId
              );
              break;
            case 'assign_flex':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'clear_flex':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
              );
              break;
            case 'assign_dp':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.attributes.playerId
              );
              break;
            case 'clear_dp':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
              );
              break;
            case 'player_stat_edit':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
                _.playerId
              );
              break;
            case 'team_stat_edit':
              f = f.pushSimpleChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.lastFieldersState,
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
              );
              break;
          }
          return f;
        }),
        (d.prototype.getBaseEvents = function () {
          return this.baseEvents;
        }),
        (d.prototype.finishAtBatFromEvent = function (f, _, S, P) {
          return (
            (f = f.setResultForCurrentAtBat(_, S, this.situationRecordForNextEvent())),
            (f = f.setSignificantEventId(_.id)),
            P !== void 0 &&
              (f = f.updateIn(['currentAtBat', 'participants'], function (I) {
                return I.withMutations(P);
              })),
            (f = f.setIn(
              ['currentAtBat', 'template'],
              o.templateForAtBat(_, f.get('currentAtBat'))
            )),
            (f = f.setIn(
              ['currentAtBat', 'headline'],
              o.headlineForAtBat(_, f.get('currentAtBat'))
            )),
            (f = f.update(
              'currentAtBat',
              c.partial(f.updatePerspectivesForTopLevelParticipants, _)
            )),
            f.cycleAtBat(this.situationRecordForNextEvent())
          );
        }),
        (d.prototype.pitch = function (f, _) {
          var S = this;
          if (
            ((f = f.pushPitch(_, this.nextSituationState)),
            (f = f.setSignificantEventId(_.id)),
            this.lastBaserunnersState.runnersOnBase !== 0 && _.attributes.advancesRunners)
          ) {
            var P = r.List().withMutations(function (T) {
              S.pushParticipantForPitcher(T), S.pushParticipantsForNonBatterBaserunners(T);
            });
            f = f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              P
            );
          }
          if (
            this.nextSituationState.lastEventWasStrikeout ||
            this.nextSituationState.lastEventWasWalk
          ) {
            var I = this.lastSituationState.atBatTeamId,
              b = this.lastLineupState.currentBatter(I),
              E = this.nextSituationState.lastEventWasStrikeout ? 'strikeout' : 'walk';
            f = this.finishAtBatFromEvent(f, _, E, function (T) {
              T.clear(),
                T.push(
                  new y.ParticipantRecord({
                    playerId: b,
                    globalAtBatId: S.lastLineupState.globalAtBatId,
                    role: 'batter',
                    base: E === 'strikeout' ? void 0 : 1,
                    out: E === 'strikeout',
                    scored: !1,
                    slot: S.lastLineupState.lineupIndex(I),
                  })
                ),
                S.pushParticipantForPitcher(T),
                S.pushParticipantsForNonBatterBaserunners(T);
            });
          }
          return f;
        }),
        (d.prototype.ballInPlay = function (f, _) {
          var S = this;
          return this.finishAtBatFromEvent(f, _, _.attributes.playResult, function (P) {
            P.clear();
            var I = S.lastSituationState.atBatTeamId,
              b = S.lastLineupState.currentBatter(I),
              E = h.ballInPlayResultConfigs[_.attributes.playResult];
            P.push(
              new y.ParticipantRecord({
                playerId: b,
                globalAtBatId: S.lastLineupState.globalAtBatId,
                role: 'batter',
                base: E.bases === 0 ? void 0 : E.bases,
                out: E.batterOut,
                scored: E.bases === 4,
                slot: S.lastLineupState.lineupIndex(I),
              })
            ),
              S.pushParticipantForPitcher(P),
              S.updateParticipantsForDefenders(P, _),
              S.pushParticipantsForNonBatterBaserunners(P);
          });
        }),
        (d.prototype.endAtBat = function (f, _) {
          var S = this,
            P = this.lastSituationState.atBatTeamId,
            I = this.lastLineupState.currentBatter(P),
            b = this.lastSituationState.inFieldTeamId;
          return this.finishAtBatFromEvent(f, _, _.attributes.reason, function (E) {
            E.clear(),
              E.push(
                new y.ParticipantRecord({
                  playerId: I,
                  globalAtBatId: S.lastLineupState.globalAtBatId,
                  role: 'batter',
                  base: _.attributes.reason === 'strikeout' ? void 0 : 1,
                  out: _.attributes.reason === 'strikeout',
                  scored: !1,
                  slot: S.lastLineupState.lineupIndex(P),
                })
              ),
              _.attributes.reason === 'catcher_interference' &&
                E.push(
                  new y.ParticipantRecord({
                    playerId: S.lastFieldersState.playerForPosition(b, 'C'),
                    role: 'fielder',
                    position: 'C',
                    fieldingOrder: r.List.of(0),
                  })
                ),
              S.pushParticipantForPitcher(E),
              S.pushParticipantsForNonBatterBaserunners(E);
          });
        }),
        (d.prototype.baserunningIsErrorImmediatelyAfterLastBIP = function (f, _) {
          var S,
            P,
            I =
              (P = (S = _.lastCompletedAtBat) === null || S === void 0 ? void 0 : S.result) ===
                null || P === void 0
                ? void 0
                : P.playType,
            b =
              I === 'walk' ||
              I === 'place_batter' ||
              I === 'hit_by_pitch' ||
              I === 'catcher_interference',
            E =
              f.attributes.playType === 'advanced_on_error' ||
              f.attributes.playType === 'on_same_error',
            T = _.currentAtBat.pitches.length === 0,
            F = _.currentAtBat.childEvents.length === 0;
          return !b && E && T && F;
        }),
        (d.prototype.baseRunning = function (f, _) {
          var S = this,
            P,
            I,
            b = r.List(),
            E = h.baseRunningPlayTypeConfigs[_.attributes.playType];
          if (
            ((b = b.withMutations(function (R) {
              R.push(
                new y.ParticipantRecord({
                  playerId: _.attributes.runnerId,
                  globalAtBatId: S.lastBaserunnersState.globalAtBatIdForPlayer(
                    _.attributes.runnerId
                  ),
                  role: 'runner',
                  base: _.attributes.base,
                  out: E.runnerOut,
                  scored:
                    _.attributes.base === 4 &&
                    !E.runnerOut &&
                    _.attributes.playType !== 'did_not_score',
                  baseChanged:
                    S.lastBaserunnersState.baseForPlayer(_.attributes.runnerId) !==
                    _.attributes.base,
                })
              ),
                S.updateParticipantsForDefenders(R, _),
                S.updateParticipantsForSpecificBaseRunningPlays(R, _);
            })),
            (0, s.baserunningRelatedToLastBIP)(_) ||
              this.baserunningIsErrorImmediatelyAfterLastBIP(_, f))
          ) {
            (f = f.pushBaseRunningOnPlayEvent(_, this.situationRecordForNextEvent(), b)),
              (f = f.updateLastCompletedAtBat(function (R) {
                return R.update('participants', function (L) {
                  return L.withMutations(function (x) {
                    S.updateParticipantsForDefenders(x, _);
                  });
                });
              }));
            var T =
                (I = (P = f.lastCompletedAtBat) === null || P === void 0 ? void 0 : P.result) ===
                  null || I === void 0
                  ? void 0
                  : I.eventId,
              F = this.baseEvents[this.idToIndexMap[T]];
            return f.reconcileLastAtBatWithExtraBaseRunning(
              F,
              _,
              this.situationRecordForNextEvent()
            );
          }
          return (
            (f = f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              b
            )),
            this.nextSituationState.lastEventEndedInning
              ? this.finishAtBatFromEvent(f, _, 'baserunning_ended_inning', function (R) {
                  var L = S.lastSituationState.atBatTeamId,
                    x = S.lastLineupState.currentBatter(L);
                  R.push(
                    new y.ParticipantRecord({
                      playerId: x,
                      role: 'batter',
                      slot: S.lastLineupState.lineupIndex(L),
                    })
                  );
                  for (var N = 0, M = b.toSeq().toArray(); N < M.length; N++) {
                    var J = M[N];
                    R.push(J);
                  }
                })
              : f
          );
        }),
        (d.prototype.endHalf = function (f, _) {
          return this.finishAtBatFromEvent(f, _, 'next_half');
        }),
        (d.prototype.override = function (f, _) {
          return (
            c.intersection(c.keys(_.attributes), ['scores', 'outs', 'balls', 'strikes']).length !==
              0 &&
              (f = f.pushChildEvent(
                _,
                this.situationRecordForNextEvent(),
                this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
              )),
            (0, s.changesInning)(_) ? this.finishAtBatFromEvent(f, _, 'inning_override') : f
          );
        }),
        (d.prototype.clearLineupIndex = function (f, _) {
          var S = this.lastLineupState.getPlayerAtIndex(_.attributes.teamId, _.attributes.index),
            P = new y.ParticipantRecord({ playerId: S });
          return f.pushChildEvent(
            _,
            this.situationRecordForNextEvent(),
            this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
            r.List.of(P)
          );
        }),
        (d.prototype.gotoLineupIndex = function (f, _) {
          var S = this.lastLineupState.getPlayerAtIndex(_.attributes.teamId, _.attributes.index);
          if (S !== void 0) {
            var P = new y.ParticipantRecord({ playerId: S });
            return f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              r.List.of(P)
            );
          }
          return f.pushChildEvent(
            _,
            this.situationRecordForNextEvent(),
            this.metadataTracker.metadataForEvent(_, this.nextEventOffset)
          );
        }),
        (d.prototype.balk = function (f, _) {
          var S = this,
            P = r.List().withMutations(function (I) {
              S.pushParticipantForPitcher(I), S.pushParticipantsForNonBatterBaserunners(I);
            });
          return (
            (f = f.setSignificantEventId(_.id)),
            f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              P
            )
          );
        }),
        (d.prototype.illegalPitchAdvance = function (f, _) {
          var S = this,
            P = r.List().withMutations(function (E) {
              S.pushParticipantForPitcher(E), S.pushParticipantsForNonBatterBaserunners(E);
            });
          if (
            ((f = f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              P
            )),
            (f = f.setSignificantEventId(_.id)),
            this.nextSituationState.lastEventWasWalk)
          ) {
            var I = this.lastSituationState.atBatTeamId,
              b = this.lastLineupState.currentBatter(I);
            f = this.finishAtBatFromEvent(f, _, 'walk', function (E) {
              E.clear(),
                E.push(
                  new y.ParticipantRecord({
                    playerId: b,
                    globalAtBatId: S.lastLineupState.globalAtBatId,
                    role: 'batter',
                    base: 1,
                    out: !1,
                    scored: !1,
                    slot: S.lastLineupState.lineupIndex(I),
                  })
                ),
                S.pushParticipantForPitcher(E),
                S.pushParticipantsForNonBatterBaserunners(E);
            });
          }
          return f;
        }),
        (d.prototype.foulError = function (f, _) {
          var S = this,
            P = this.lastSituationState.atBatTeamId,
            I = this.lastLineupState.currentBatter(P),
            b = r.List().withMutations(function (E) {
              E.push(
                new y.ParticipantRecord({
                  playerId: I,
                  globalAtBatId: S.lastLineupState.globalAtBatId,
                  role: 'batter',
                  base: void 0,
                  baseChanged: !1,
                  out: !1,
                  scored: !1,
                  slot: S.lastLineupState.lineupIndex(P),
                })
              ),
                S.pushParticipantForPitcher(E),
                S.updateParticipantsForDefenders(E, _);
            });
          return (
            (f = f.setSignificantEventId(_.id)),
            f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              b
            )
          );
        }),
        (d.prototype.placeBatter = function (f, _) {
          var S = this,
            P = this.lastSituationState.atBatTeamId,
            I = this.lastLineupState.currentBatter(P);
          return this.finishAtBatFromEvent(f, _, 'place_batter', function (b) {
            b.push(
              new y.ParticipantRecord({
                playerId: I,
                globalAtBatId: S.lastLineupState.globalAtBatId,
                role: 'batter',
                base: _.attributes.base,
                out: !1,
                scored: !1,
                slot: S.lastLineupState.lineupIndex(P),
              })
            );
          });
        }),
        (d.prototype.placeRunner = function (f, _) {
          var S = new y.ParticipantRecord({
            playerId: _.attributes.runnerId,
            role: 'runner',
            base: _.attributes.base,
            out: !1,
            scored: !1,
          });
          return f.pushChildEvent(
            _,
            this.situationRecordForNextEvent(),
            this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
            r.List.of(S)
          );
        }),
        (d.prototype.pitcherDecision = function (f, _) {
          var S = new y.ParticipantRecord({ playerId: _.attributes.pitcherId, role: 'pitcher' });
          return f.pushChildEvent(
            _,
            this.situationRecordForNextEvent(),
            this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
            r.List.of(S)
          );
        }),
        (d.prototype.swapDPFlex = function (f, _) {
          var S = this.lastLineupState.dpFlexAssignmentsForTeam(_.attributes.teamId),
            P = r.List();
          return (
            S.dp !== void 0 &&
              S.flex !== void 0 &&
              ((P = P.push(new y.ParticipantRecord({ playerId: S.dp }))),
              (P = P.push(new y.ParticipantRecord({ playerId: S.flex })))),
            f.pushChildEvent(
              _,
              this.situationRecordForNextEvent(),
              this.metadataTracker.metadataForEvent(_, this.nextEventOffset),
              P
            )
          );
        }),
        d
      );
    })(p.VersionedStateEngine);
    return (Pr.PlayByPlayEngine = e), Pr;
  }
  var Er = {},
    Ln = {},
    Dn = {},
    pd;
  function Ky() {
    if (pd) return Dn;
    (pd = 1),
      Object.defineProperty(Dn, '__esModule', { value: !0 }),
      (Dn.sortObjectArrayByKeys = void 0);
    function i(c, r) {
      c.sort(function (p, v) {
        for (var h = 0, s = r; h < s.length; h++) {
          var l = s[h],
            u = [p[l], v[l]],
            y = u[0],
            o = u[1];
          if ((y === void 0 && (y = 1 / 0), o === void 0 && (o = 1 / 0), y > o)) return 1;
          if (o > y) return -1;
        }
        return 0;
      });
    }
    return (Dn.sortObjectArrayByKeys = i), Dn;
  }
  var hd;
  function yd() {
    if (hd) return Ln;
    (hd = 1), Object.defineProperty(Ln, '__esModule', { value: !0 }), (Ln.GameStatsDoc = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Se),
      p = i.__importStar(be()),
      v = i.__importStar(Ky()),
      h = _r(),
      s = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(u.prototype, 'renderFunctions', {
            get: function () {
              return [];
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'teams', {
            get: function () {
              return this.get('teams').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'statsWithEdits', {
            get: function () {
              for (
                var y = this.get('teams').mergeDeep(this.get('editsForTeams')).toJS(),
                  o = 0,
                  a = this.editPlayerRemoveList;
                o < a.length;
                o++
              ) {
                var n = a[o];
                for (var e in y)
                  y.hasOwnProperty(e) && y[e].players !== void 0 && delete y[e].players[n];
              }
              return y;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'editPlayerRemoveList', {
            get: function () {
              var y = this.get('editPlayersToRemove'),
                o = c.Set.of();
              return (y || o).toArray();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.addPlayerToRemoveList = function (y) {
            return this.update('editPlayersToRemove', function (o) {
              return o.add(y);
            });
          }),
          (u.prototype.removePlayerFromRemoveList = function (y) {
            return this.update('editPlayersToRemove', function (o) {
              return o.delete(y);
            });
          }),
          (u.prototype.pivotStatsForStatsObject = function (y) {
            var o = { id: '', offense: [], defense: [], general: [] };
            return (
              ['offense', 'defense', 'general'].map(function (a) {
                for (var n in y[a]) y[a].hasOwnProperty(n) && o[a].push({ s: n, v: y[a][n] });
              }),
              o
            );
          }),
          Object.defineProperty(u.prototype, 'pivotStatsForOutput', {
            get: function () {
              var y = Object();
              y.stats = { team: [], player: [] };
              var o = this.rendered.teams;
              for (var a in o)
                if (a !== '' && o.hasOwnProperty(a)) {
                  var n = o[a].players;
                  for (var e in n)
                    if (e !== '' && n.hasOwnProperty(e)) {
                      var t = this.pivotStatsForStatsObject(n[e].stats);
                      (t.id = e), y.stats.player.push(t);
                    }
                  var d = this.pivotStatsForStatsObject(o[a].stats);
                  (d.id = a), y.stats.team.push(d);
                }
              return y;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'statsForOutput', {
            get: function () {
              return this.rendered.teams;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.sanitizeStatsDocument = function (y) {
            for (var o in y)
              if (y.hasOwnProperty(o)) {
                for (var a in y[o])
                  if (y[o].hasOwnProperty(a)) {
                    var n = y[o][a];
                    (isNaN(n) || n === 1 / 0 || n === -1 / 0 || n === void 0) && delete y[o][a];
                  }
              }
          }),
          (u.prototype.applyToTeamsAndPlayersWithEdits = function () {
            for (var y = [], o = 0; o < arguments.length; o++) y[o] = arguments[o];
            for (var a = this.statsWithEdits, n = 0, e = y; n < e.length; n++) {
              var t = e[n];
              for (var d in a)
                if (a.hasOwnProperty(d)) {
                  var f = a[d].players;
                  for (var _ in f) f.hasOwnProperty(_) && t(f[_].stats);
                  t(a[d].stats);
                }
            }
            return { teams: a };
          }),
          Object.defineProperty(u.prototype, 'sanitized', {
            get: function () {
              return this.applyToTeamsAndPlayersWithEdits(this.sanitizeStatsDocument.bind(this));
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'rendered', {
            get: function () {
              return this.applyToTeamsAndPlayersWithEdits.apply(
                this,
                i.__spreadArray(
                  i.__spreadArray([], this.renderFunctions, !1),
                  [this.sanitizeStatsDocument.bind(this)],
                  !1
                )
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.incrementPlayerStats = function (y, o, a, n, e, t, d) {
            e === void 0 && (e = 1), t === void 0 && (t = !0), d === void 0 && (d = 'teams');
            var f = this;
            if (o !== void 0) {
              var _ = [d, y, 'players', o, 'stats', a, n];
              f = f.setIn(_, this.getIn(_, 0) + e);
            }
            return t && (f = f.incrementTeamStats(y, a, n, e)), f;
          }),
          (u.prototype.incrementPlayerStatsElements = function (y, o, a, n, e) {
            e === void 0 && (e = 'teams');
            var t = this;
            if (o !== void 0) {
              var d = [e, y, 'players', o, 'stats', a];
              t = this.updatedStatsElements(t, d, n);
            }
            if (y !== void 0) {
              var f = [e, y, 'stats', a];
              t = this.updatedStatsElements(t, f, n);
            }
            return t;
          }),
          (u.prototype.updatedStatsElements = function (y, o, a) {
            return y.updateIn(o, c.Map(), function (n) {
              for (var e = 0, t = a; e < t.length; e++) {
                var d = t[e],
                  f = d.key,
                  _ = 'incrementBy' in d ? d.incrementBy : (0, h.bin)(d.increment);
                n = n.set(f, n.get(f, 0) + _);
              }
              return n;
            });
          }),
          (u.prototype.setPlayerStats = function (y, o, a, n, e, t) {
            if ((t === void 0 && (t = 'teams'), o !== void 0)) {
              var d = [t, y, 'players', o, 'stats', a, n];
              return this.setIn(d, e);
            }
            return this;
          }),
          (u.prototype.getPlayerStat = function (y, o, a, n, e) {
            e === void 0 && (e = 'teams');
            var t = [e, y, 'players', o, 'stats', a, n];
            return this.getIn(t);
          }),
          (u.prototype.incrementTeamStats = function (y, o, a, n, e) {
            if ((n === void 0 && (n = 1), e === void 0 && (e = 'teams'), y !== void 0)) {
              var t = [e, y, 'stats', o, a];
              return this.setIn(t, this.getIn(t, 0) + n);
            }
            return this;
          }),
          (u.prototype.setTeamStats = function (y, o, a, n, e) {
            if ((e === void 0 && (e = 'teams'), y !== void 0)) {
              var t = [e, y, 'stats', o, a];
              return this.setIn(t, n);
            }
            return this;
          }),
          (u.prototype.playerStat = function (y, o, a, n, e) {
            e === void 0 && (e = !0);
            var t = e ? this.rendered.teams : this.sanitized.teams;
            if (
              !(
                t[y] === void 0 ||
                t[y].players === void 0 ||
                t[y].players[o] === void 0 ||
                t[y].players[o].stats[a] === void 0 ||
                t[y].players[o].stats[a][n] === void 0
              )
            )
              return t[y].players[o].stats[a][n];
          }),
          (u.prototype.teamStat = function (y, o, a, n) {
            n === void 0 && (n = !0);
            var e = n ? this.rendered.teams : this.sanitized.teams;
            if (!(e[y] === void 0 || e[y].stats[o] === void 0)) return e[y].stats[o][a];
          }),
          (u.prototype.statHighlights = function (y) {
            for (var o = {}, a = this.rendered.teams, n = 0, e = y; n < e.length; n++) {
              var t = e[n];
              o[t.returnKey] = [];
            }
            for (var d in a)
              if (a.hasOwnProperty(d)) {
                var f = a[d].players;
                for (var _ in f)
                  if (f.hasOwnProperty(_))
                    for (var S = 0, P = y; S < P.length; S++) {
                      var t = P[S];
                      try {
                        var I = f[_].stats[t.category][t.stat];
                        I !== void 0 && o[t.returnKey].push({ playerId: _, teamId: d, value: I });
                      } catch {}
                    }
              }
            for (
              var b = function (F) {
                  var R = o[F.returnKey];
                  F.excludeValues !== void 0 &&
                    F.excludeValues.length !== 0 &&
                    (R = r.reject(R, function (L) {
                      return F.excludeValues ? r.contains(F.excludeValues, L.value) : !1;
                    })),
                    v.sortObjectArrayByKeys(R, ['value', 'playerId']),
                    F.sortOrder === 'descending' && R.reverse(),
                    (o[F.returnKey] = r.first(R, F.numberOfPlayers));
                },
                E = 0,
                T = y;
              E < T.length;
              E++
            ) {
              var t = T[E];
              b(t);
            }
            return o;
          }),
          u
        );
      })(p.ImmutableState);
    return (Ln.GameStatsDoc = s), Ln;
  }
  var vd;
  function Jy() {
    if (vd) return Er;
    (vd = 1),
      Object.defineProperty(Er, '__esModule', { value: !0 }),
      (Er.StatsEngine = Er.BatsGameStatsDoc = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Se),
      p = i.__importStar(yd()),
      v = i.__importStar(Pt()),
      h = at(),
      s = _r(),
      l = i.__importStar(Ie()),
      u = (function (o) {
        i.__extends(a, o);
        function a() {
          return (o !== null && o.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(a.prototype, 'context', {
            get: function () {
              return this.get('context').toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(a.prototype, 'renderFunctions', {
            get: function () {
              return [
                this.renderOffensiveStats.bind(this),
                r.partial(this.renderDefensiveStats, this.context).bind(this),
              ];
            },
            enumerable: !1,
            configurable: !0,
          }),
          (a.prototype.setTeams = function (n) {
            return this.set('teams', c.fromJS(n));
          }),
          (a.prototype.renderOffensiveStats = function (n) {
            var e = n.offense;
            if (e !== void 0) {
              (e.H = (0, s.safeSum)(e['1B'], e['2B'], e['3B'], e.HR)),
                (e.PA = (0, s.safeSum)(e.BB, e.HBP, e.SHB, e.SHF, e.CI, e.AB)),
                (e.AVG = (0, s.safeSum)(e.H) / e.AB),
                (e.TB = (0, s.safeSum)(e['1B'], 2 * e['2B'], 3 * e['3B'], 4 * e.HR)),
                (e.XBH = (0, s.safeSum)(e['2B'], e['3B'], e.HR)),
                (e.SLG = (0, s.safeSum)(e.TB) / e.AB),
                (e['2S+3%'] = (0, s.safeSum)(e['2S+3']) / e.PA),
                (e['6+%'] = (0, s.safeSum)(e['6+']) / e.PA),
                (e['PS/PA'] = (0, s.safeSum)(e.PS) / e.PA),
                (e['AB/HR'] = (0, s.safeSum)(e.AB) / e.HR),
                (e['BA/RISP'] = (0, s.safeSum)(e.HRISP) / e.ABRISP),
                (e['BB/K'] = (0, s.safeSum)(e.BB) / e.SO),
                (e['PA/BB'] = (0, s.safeSum)(e.PA) / e.BB),
                (e.BABIP =
                  (0, s.safeSum)(e.H, -1 * e.HR) /
                  (0, s.safeSum)(e.SHF, e.AB, -1 * e.SO, -1 * e.HR)),
                (e['GB%'] = (0, s.safeSum)(e.GB) / e.INP),
                (e['FLB%'] = (0, s.safeSum)(e.FLB) / e.INP),
                (e['LND%'] = (0, s.safeSum)(e.LND) / e.INP),
                (e['C%'] = (0, s.safeSum)(e.AB, -1 * e.SO) / e.AB),
                (e['SM%'] = (0, s.safeSum)(e.SM) / e.PS),
                (e['SW%'] = (0, s.safeSum)(e.SW) / e.PS),
                (e.OB = (0, s.safeSum)(e.H, e.BB, e.HBP)),
                (e.OBP = (0, s.safeSum)(e.OB) / (0, s.safeSum)(e.AB, e.BB, e.HBP, e.SHF)),
                (e.OPS = (0, s.safeSum)(e.SLG, e.OBP)),
                (e['QAB%'] = (0, s.safeSum)(e.QAB) / e.PA),
                (e['SB%'] = (0, s.safeSum)(e.SB) / (0, s.safeSum)(e.SB, e.CS)),
                (e.OS = (0, s.safeSum)(e.CB, e.SL, e.CH, e.SC, e.KB, e.DC, e.KC)),
                (e.OSS = (0, s.safeSum)(e.CBS, e.SLS, e.CHS, e.SCS, e.KBS, e.DCS, e.KCS)),
                (e.OSSW = (0, s.safeSum)(e.CBSW, e.SLSW, e.CHSW, e.SCSW, e.KBSW, e.DCSW, e.KCSW)),
                (e.OSSM = (0, s.safeSum)(e.CBSM, e.SLSM, e.CHSM, e.SCSM, e.KBSM, e.DCSM, e.KCSM));
              for (
                var t = 0,
                  d = ['FB', 'CB', 'SL', 'CH', 'CT', 'RB', 'DB', 'SC', 'DC', 'KB', 'KC', 'OS'];
                t < d.length;
                t++
              ) {
                var f = d[t];
                (e[''.concat(f, '%')] = (0, s.safeSum)(e[f]) / e.PS),
                  (e[''.concat(f, 'S%')] = (0, s.safeSum)(e[''.concat(f, 'S')]) / e[f]),
                  (e[''.concat(f, 'SW%')] = (0, s.safeSum)(e[''.concat(f, 'SW')]) / e[f]),
                  (e[''.concat(f, 'SM%')] = (0, s.safeSum)(e[''.concat(f, 'SM')]) / e[f]);
              }
            }
          }),
          (a.prototype.renderDefensiveStats = function (n, e) {
            var t = e.defense;
            if (t !== void 0) {
              (t.IP = (0, s.safeSum)(t.outs) / 3),
                (t['IC:C'] = (0, s.safeSum)(t['outs:C']) / 3),
                (t['IP:F'] = (0, s.safeSum)(t['outs:F']) / 3),
                (t['IP:1B'] = (0, s.safeSum)(t['outs-1B']) / 3),
                (t['IP:2B'] = (0, s.safeSum)(t['outs-2B']) / 3),
                (t['IP:3B'] = (0, s.safeSum)(t['outs-3B']) / 3),
                (t['IP:SS'] = (0, s.safeSum)(t['outs-SS']) / 3),
                (t['IP:LF'] = (0, s.safeSum)(t['outs-LF']) / 3),
                (t['IP:CF'] = (0, s.safeSum)(t['outs-CF']) / 3),
                (t['IP:RF'] = (0, s.safeSum)(t['outs-RF']) / 3),
                (t['IP:SF'] = (0, s.safeSum)(t['outs-SF']) / 3),
                (t.AB = (0, s.safeSum)(
                  t.BF,
                  -1 * t.BB,
                  -1 * t.HBP,
                  -1 * t.SHF,
                  -1 * t.SHB,
                  -1 * t.CI
                )),
                (t['BB/INN'] = (0, s.safeSum)(t.BB) / t.IP),
                (t['SM%'] = (0, s.safeSum)(t.SM) / t['#P']),
                (t.BAA = (0, s.safeSum)(t.H) / t.AB),
                (t['FLB%'] = (0, s.safeSum)(t.FLB) / t.INP),
                (t.BABIP =
                  (0, s.safeSum)(t.H, -1 * t.HR) /
                  (0, s.safeSum)(t.SHF, t.AB, -1 * t.SO, -1 * t.HR)),
                (t['BA/RISP'] = (0, s.safeSum)(t.HRISP) / t.ABRISP),
                (t.WHIP = (0, s.safeSum)(t.H, t.BB) / t.IP),
                (t['LOB%'] =
                  (0, s.safeSum)(t.H, t.BB, t.HBP, -1 * t.R) /
                  (0, s.safeSum)(t.H, t.BB, t.HBP, -1.4 * t.HR)),
                (t['FPS%'] = (0, s.safeSum)(t.FPS) / t.BF),
                (t['FPSH%'] = (0, s.safeSum)(t.FPSH) / t.FPS),
                (t['FPSW%'] = (0, s.safeSum)(t.FPSW) / t.FPS),
                (t['FPSO%'] = (0, s.safeSum)(t.FPSO) / t.FPS),
                (t['K/BB'] = (0, s.safeSum)(t.SO) / t.BB),
                (t['<3%'] = (0, s.safeSum)(t['<3']) / t.BF),
                (t['S%'] = (0, s.safeSum)(t.TS) / t['#P']),
                (t['LND%'] = (0, s.safeSum)(t.LND) / t.INP),
                (t['123INN%'] = (0, s.safeSum)(t['123INN']) / t.IP),
                (t['HARD%'] = (0, s.safeSum)(t.HARD) / (0, s.safeSum)(t.HARD, t.WEAK)),
                (t['WEAK%'] = (0, s.safeSum)(t.WEAK) / (0, s.safeSum)(t.HARD, t.WEAK)),
                (t['<13%'] = (0, s.safeSum)(t['<13']) / t.IP),
                (t['P/BF'] = (0, s.safeSum)(t['#P']) / t.BF),
                (t['GB%'] = (0, s.safeSum)(t.GB) / (0, s.safeSum)(t.GB, t.FLY)),
                (t['FLY%'] = (0, s.safeSum)(t.FLY) / (0, s.safeSum)(t.GB, t.FLY)),
                (t['GO/AO'] = (0, s.safeSum)(t.GO) / t.AO),
                (t['P/IP'] = (0, s.safeSum)(t['#P']) / t.IP),
                (t['K/BF'] = (0, s.safeSum)(t.SO) / t.BF),
                (t.TC = (0, s.safeSum)(t.PO, t.E, t.A)),
                (t.FPCT = (0, s.safeSum)(t.PO, t.A) / t.TC),
                (t['CS:C%'] = (0, s.safeSum)(t['CS:C']) / (0, s.safeSum)(t['SB:C'], t['CS:C'])),
                (t['SBATT:C'] = (0, s.safeSum)(t['SB:C'], t['CS:C'])),
                (t['SB%'] = (0, s.safeSum)(t.SB) / (0, s.safeSum)(t.SB, t.CS)),
                (t['K/G'] = (0, s.safeSum)(t.SO) / ((0, s.safeSum)(t.IP) / n.inningsPerGame)),
                (t['1ST2OUT%'] = (0, s.safeSum)(t['1ST2OUT']) / t.IP),
                (t.SVO = (0, s.safeSum)(t.SV, t.BS)),
                (t['SV%'] = (0, s.safeSum)(t.SV) / t.SVO),
                (t['LOO%'] = (0, s.safeSum)(t.LOO) / t.IP),
                (t.ERA = (n.inningsPerGame * (0, s.safeSum)(t.ER)) / t.IP),
                (t['SB:C%'] = (0, s.safeSum)(t['SB:C']) / (0, s.safeSum)(t['SB:C'], t['CS:C'])),
                (t.OS = (0, s.safeSum)(t.CB, t.SL, t.CH, t.SC, t.KB, t.DC, t.KC)),
                (t.OSS = (0, s.safeSum)(t.CBS, t.SLS, t.CHS, t.SCS, t.KBS, t.DCS, t.KCS)),
                (t.OSSW = (0, s.safeSum)(t.CBSW, t.SLSW, t.CHSW, t.SCSW, t.KBSW, t.DCSW, t.KCSW)),
                (t.OSSM = (0, s.safeSum)(t.CBSM, t.SLWM, t.CHSM, t.SCSM, t.KBSM, t.DCSM, t.KCSM));
              for (
                var d = 0,
                  f = ['FB', 'CB', 'SL', 'CH', 'CT', 'RB', 'DB', 'SC', 'DC', 'KB', 'KC', 'OS'];
                d < f.length;
                d++
              ) {
                var _ = f[d];
                (t[''.concat(_, '%')] = (0, s.safeSum)(t[_]) / t['#P']),
                  (t[''.concat(_, 'S%')] = (0, s.safeSum)(t[''.concat(_, 'S')]) / t[_]),
                  (t[''.concat(_, 'SW%')] = (0, s.safeSum)(t[''.concat(_, 'SW')]) / t[_]),
                  (t[''.concat(_, 'SM%')] = (0, s.safeSum)(t[''.concat(_, 'SM')]) / t[_]);
              }
              if (
                n.FIPConstant !== void 0 &&
                n.FIPHRValue !== void 0 &&
                n.FIPBBValue !== void 0 &&
                n.FIPSOValue !== void 0 &&
                n.inningsPerGame !== void 0
              ) {
                var S = (0, s.safeSum)(t.BB) + (n.FIPIncludeHBPWithBB ? t.HBP : 0),
                  P =
                    (0, s.safeSum)(t.HR) * n.FIPHRValue +
                    S * n.FIPBBValue +
                    -1 * (0, s.safeSum)(t.SO) * n.FIPSOValue;
                t.FIP = n.FIPConstant + (n.inningsPerGame * P) / t.IP;
              }
            }
          }),
          a
        );
      })(p.GameStatsDoc);
    Er.BatsGameStatsDoc = u;
    var y = (function (o) {
      i.__extends(a, o);
      function a(n, e, t, d, f, _, S, P) {
        var I = o.call(this, n) || this;
        return (
          (I.context = e),
          (I.baserunners = t),
          (I.situation = d),
          (I.lineup = f),
          (I.fielders = _),
          (I.earnedRuns = S),
          (I.statEvents = P),
          I.stateHistory.pop(),
          I.stateHistory.push(I.initialState()),
          I
        );
      }
      return (
        (a.prototype.initialState = function () {
          return new u(
            c.fromJS({
              teams: {},
              editsForTeams: {},
              context: this.context,
              pitcherLastAtBatIndex: {},
            })
          ).set('editPlayersToRemove', c.Set.of());
        }),
        (a.prototype.processOneEvent = function (n, e) {
          switch (e.code) {
            case 'team_stat_edit':
              n = this.applyTeamEdit(n, e);
              break;
            case 'player_stat_edit':
              n = this.applyPlayerEdit(n, e);
              break;
            case 'remove_player_edit':
              n = this.applyRemovePlayerEdit(n, e);
              break;
            case 'clear_all_edits':
              n = this.clearAllEdits(n);
              break;
            default:
              n = this.incrementStatsForEvent(n, e);
          }
          return n;
        }),
        (a.prototype.getDerivedMultiGamePivotedStatsWithBaseStats = function (n) {
          var e = this.stateHistory[0].setTeams(n).set('context', c.fromJS(this.context));
          return e.pivotStatsForOutput;
        }),
        (a.prototype.getDerivedMultiGameStatsWithBaseStats = function (n) {
          var e = this.stateHistory[0].setTeams(n).set('context', c.fromJS(this.context));
          return e.statsForOutput;
        }),
        Object.defineProperty(a.prototype, 'situationBeforeEvent', {
          get: function () {
            return this.situation.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'situationAfterEvent', {
          get: function () {
            return this.situation.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lineupBeforeEvent', {
          get: function () {
            return this.lineup.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lineupAfterEvent', {
          get: function () {
            return this.lineup.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'fieldersBeforeEvent', {
          get: function () {
            return this.fielders.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'fieldersAfterEvent', {
          get: function () {
            return this.fielders.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'baserunnersBeforeEvent', {
          get: function () {
            return this.baserunners.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'baserunnersAfterEvent', {
          get: function () {
            return this.baserunners.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'earnedRunsBeforeEvent', {
          get: function () {
            return this.earnedRuns.stateBeforeEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'earnedRunsAfterEvent', {
          get: function () {
            return this.earnedRuns.stateAfterEvent(this.nextEventOffset);
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'currentPitcher', {
          get: function () {
            return {
              id: this.fieldersBeforeEvent.playerForPosition(
                this.situationBeforeEvent.inFieldTeamId,
                'P'
              ),
              teamId: this.situationBeforeEvent.inFieldTeamId,
            };
          },
          enumerable: !1,
          configurable: !0,
        }),
        (a.prototype.applyTeamEdit = function (n, e) {
          return n.setTeamStats(e.teamId, e.category, e.statName, e.statValue, 'editsForTeams');
        }),
        (a.prototype.applyPlayerEdit = function (n, e) {
          return n
            .setPlayerStats(
              e.teamId,
              e.playerId,
              e.category,
              e.statName,
              e.statValue,
              'editsForTeams'
            )
            .removePlayerFromRemoveList(e.playerId);
        }),
        (a.prototype.applyRemovePlayerEdit = function (n, e) {
          return n.addPlayerToRemoveList(e.playerId);
        }),
        (a.prototype.clearAllEdits = function (n) {
          return n
            .update('editsForTeams', function (e) {
              return e.clear();
            })
            .set('editPlayersToRemove', c.Set.of());
        }),
        (a.prototype.setGamesScored = function (n, e) {
          var t = [this.situationBeforeEvent.inFieldTeamId, this.situationBeforeEvent.atBatTeamId],
            d = t[0],
            f = t[1];
          (n = n.setTeamStats(f, 'general', 'GP', 1)),
            (n = n.setTeamStats(f, 'offense', 'GP', 1)),
            (n = n.setTeamStats(d, 'general', 'GP', 1)),
            (n = n.setTeamStats(d, 'defense', 'GP:F', 1)),
            (n = n.setTeamStats(d, 'defense', 'GP:C', 1)),
            (n = n.setTeamStats(d, 'defense', 'GP:P', 1));
          var _ = this.fieldersAfterEvent.playersMapForTeam(d);
          for (var S in _)
            if (!(!_.hasOwnProperty(S) || S === 'undefined')) {
              n = n.setPlayerStats(d, S, 'general', 'GP', 1);
              var P = _[S];
              P !== void 0 &&
                (r.contains(['EH', 'DH', 'F10'], P) ||
                  (n = n.setPlayerStats(d, S, 'defense', 'GP:F', 1)),
                P === 'C' && (n = n.setPlayerStats(d, S, 'defense', 'GP:C', 1)),
                P === 'P' && (n = n.setPlayerStats(d, S, 'defense', 'GP:P', 1)));
            }
          var I = this.lineupAfterEvent.currentBatter(f);
          I !== void 0 &&
            e.code !== 'ball_in_play' &&
            !(0, h.baserunningRelatedToLastBIP)(e) &&
            !this.situationAfterEvent.lastEventEndedInning &&
            ((n = n.setPlayerStats(f, I, 'offense', 'GP', 1)),
            (n = n.setPlayerStats(f, I, 'general', 'GP', 1)));
          for (var b in this.baserunnersAfterEvent.baserunners)
            if (b !== void 0) {
              var E = this.baserunnersAfterEvent.baserunners[b];
              E !== void 0 &&
                ((n = n.setPlayerStats(f, E, 'offense', 'GP', 1)),
                (n = n.setPlayerStats(f, E, 'general', 'GP', 1)));
            }
          return n;
        }),
        (a.prototype.incrementBatterStats = function (n, e) {
          var t = this.situationBeforeEvent.atBatTeamId,
            d = this.lineupBeforeEvent.currentBatter(t),
            f = [
              { key: 'H', increment: e.isHit },
              { key: 'PS', increment: e.code === 'pitch' },
              { key: 'TS', increment: e.isStrike },
              { key: 'SW', increment: e.isSwing },
              { key: 'SM', increment: e.isMiss },
              {
                key: '2STRIKES',
                increment:
                  (e.code === 'pitch' || e.code === 'override') &&
                  this.situationAfterEvent.strikes === 2 &&
                  this.situationBeforeEvent.strikes !== this.situationAfterEvent.strikes,
              },
              {
                key: 'FULL',
                increment:
                  (e.code === 'pitch' || e.code === 'override') &&
                  this.situationAfterEvent.strikes === 2 &&
                  this.situationAfterEvent.balls === 3 &&
                  (this.situationBeforeEvent.strikes !== this.situationAfterEvent.strikes ||
                    this.situationBeforeEvent.balls !== this.situationAfterEvent.balls),
              },
              { key: 'INP', increment: e.code === 'ball_in_play' && e.isInPlay },
              {
                key: 'GSHR',
                increment:
                  e.code === 'ball_in_play' &&
                  e.attributes.ballInPlayResult === 'home_run' &&
                  this.baserunnersAfterEvent.runnersScoredOnLastEvent.length === 4,
              },
              { key: 'ROE', increment: e.reachedBaseOnError },
              {
                key: 'FC',
                increment:
                  e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'fielders_choice',
              },
              { key: 'LOBB', increment: this.situationAfterEvent.lastEventWasWalk && e.leadOff },
              {
                key: 'SO',
                increment:
                  this.situationAfterEvent.lastEventWasStrikeout ||
                  (e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'foul_tip_out'),
              },
              {
                key: 'SOL',
                increment:
                  this.situationAfterEvent.lastEventWasStrikeout &&
                  e.atBatLastPitchResult === 'strike_looking',
              },
              {
                key: 'HBP',
                increment:
                  e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'hit_by_pitch',
              },
              { key: 'AB', increment: e.isAtBat },
              { key: 'ABRISP', increment: e.isAtBat && e.risp },
              { key: 'QAB', incrementBy: e.qabIncrement },
              { key: '2S+3', incrementBy: e.threeAfterTwoIncrement },
              { key: 'HRISP', increment: e.isHit && e.risp },
              { key: 'HARD', increment: e.isHardHit && e.isInPlay },
              { key: 'WEAK', increment: !e.isHardHit && e.isInPlay },
              { key: 'GB', increment: e.isGround },
              { key: 'LND', increment: e.attributes.ballInPlayType === 'line_drive' },
              {
                key: 'FLB',
                increment: r.contains(['pop_fly', 'fly_ball'], e.attributes.ballInPlayType),
              },
              {
                key: 'SHF',
                increment:
                  e.code === 'ball_in_play' &&
                  r.contains(
                    ['sacrifice_fly', 'sacrifice_fly_error'],
                    e.attributes.ballInPlayResult
                  ),
              },
              {
                key: 'SHB',
                increment:
                  e.code === 'ball_in_play' &&
                  r.contains(
                    ['sacrifice_bunt', 'sacrifice_bunt_error'],
                    e.attributes.ballInPlayResult
                  ),
              },
              { key: '6+', incrementBy: e.sixPlusIncrement },
              {
                key: '1B',
                increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'single',
              },
              {
                key: '2B',
                increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'double',
              },
              {
                key: '3B',
                increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'triple',
              },
              {
                key: 'HR',
                increment:
                  e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'home_run',
              },
              { key: 'BB', increment: this.situationAfterEvent.lastEventWasWalk },
              {
                key: 'CI',
                increment:
                  e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'catcher_interference',
              },
              { key: 'R', increment: !1 },
              { key: 'RBI', increment: !1 },
              { key: '2OUTRBI', increment: !1 },
              { key: 'LOB', increment: !1 },
            ];
          this.appendPitchStyleStats(e, f),
            (n = n.incrementPlayerStatsElements(t, d, 'offense', f)),
            (n = n.incrementPlayerStats(
              e.lastBatter.teamId,
              e.lastBatter.id,
              'offense',
              'GIDP',
              e.lastBallInPlayWasGround ? e.doublePlayIncrement : 0
            )),
            (n = n.incrementPlayerStats(
              e.lastBatter.teamId,
              e.lastBatter.id,
              'offense',
              'GITP',
              (0, s.bin)(e.lastBallInPlayWasGround && e.outsOnPlay === 3)
            ));
          for (
            var _ = 0, S = this.baserunnersAfterEvent.runnersScoredOnLastEvent;
            _ < S.length;
            _++
          ) {
            var P = S[_];
            n = n.incrementPlayerStats(t, P, 'offense', 'R', 1);
          }
          for (
            var I = 0, b = this.baserunnersAfterEvent.runnersUnscoredOnLastEvent;
            I < b.length;
            I++
          ) {
            var E = b[I];
            n = n.incrementPlayerStats(t, E, 'offense', 'R', -1);
          }
          if (
            ((n = n.incrementPlayerStats(
              e.lastBatter.teamId,
              e.lastBatter.id,
              'offense',
              'LOB',
              e.playerLOBIncrement,
              !1
            )),
            this.situationAfterEvent.lastEventEndedInning)
          ) {
            var T = this.baserunnersAfterEvent.runnersLeftOnBase;
            e.code === 'ball_in_play' ||
            this.situationAfterEvent.lastEventWasStrikeout ||
            (e.code === 'base_running' && e.attributes.baseRunningPlayType === 'out_on_last_play')
              ? ((n = n.incrementTeamStats(t, 'offense', 'LOB', T)),
                (n = n.incrementPlayerStats(t, e.lastBatter.id, 'offense', '3OUTLOB', T, !1)))
              : e.code === 'base_running' &&
                ((n = n.incrementTeamStats(
                  t,
                  'offense',
                  'LOB',
                  this.baserunnersAfterEvent.runnersLeftOnBase
                )),
                (n = n.incrementPlayerStats(
                  t,
                  e.attributes.baseRunningRunnerId,
                  'offense',
                  '3OUTLOB',
                  T,
                  !1
                )));
          }
          return this.incrementRBIStats(n, e);
        }),
        (a.prototype.incrementRBIStatsForBatter = function (n, e, t, d, f) {
          n = n.incrementPlayerStats(t, d, 'offense', 'RBI', f);
          var _ = this.situationAfterEvent.lastEventEndedInning ? 3 : this.situationAfterEvent.outs;
          return (
            _ - e.outsOnPlay === 2 && (n = n.incrementPlayerStats(t, d, 'offense', '2OUTRBI', f)), n
          );
        }),
        (a.prototype.incrementRBIStats = function (n, e) {
          var t = this.situationBeforeEvent.atBatTeamId,
            d = this.lineupBeforeEvent.currentBatter(t);
          if (
            this.baserunnersBeforeEvent.runnersOnBase === 3 &&
            this.situationAfterEvent.lastEventWasWalk &&
            (e.code === 'illegal_pitch_advance' ||
              (e.code === 'pitch' && e.attributes.pitchAdvancesRunners))
          )
            return this.incrementRBIStatsForBatter(n, e, t, d, 1);
          if (
            this.situationAfterEvent.lastEventWasWalk ||
            (e.code === 'end_at_bat' &&
              r.contains(['hit_by_pitch', 'catcher_interference'], e.attributes.endAtBatReason))
          )
            return this.incrementRBIStatsForBatter(
              n,
              e,
              t,
              d,
              this.baserunnersAfterEvent.runnersScoredOnLastEvent.length
            );
          if (
            !r.contains(['ball_in_play', 'base_running'], e.code) ||
            (e.code === 'base_running' &&
              !r.contains(
                [
                  'advanced_on_last_play',
                  'remained_on_last_play',
                  'out_on_last_play',
                  'did_not_score',
                ],
                e.attributes.baseRunningPlayType
              ))
          )
            return n;
          var f =
              e.lastBallInPlayWasGround && e.forcedOutsOnPlay === 2 && e.forcedOutsOnEvent === 1,
            _ =
              e.lastBallInPlayWasGround &&
              (e.forcedOutsOnPlay === 3 || (e.forcedOutsOnPlay === 2 && e.forcedOutsOnEvent === 0));
          if (e.lastBallInPlayWasRBIEligible !== !0 || _) return n;
          if (f) {
            var S = -1 * r.last(e.scoresOnPlayAfterEachEvent, 2)[0];
            n = this.incrementRBIStatsForBatter(n, e, t, e.lastBatter.id, S);
          } else {
            var P = r.last(e.scoresOnPlayAfterEachEvent, 2),
              S = r.last(P) - (P.length === 1 ? 0 : P[0]);
            n = this.incrementRBIStatsForBatter(n, e, t, e.lastBatter.id, S);
          }
          return n;
        }),
        (a.prototype.appendPitchStyleStats = function (n, e) {
          if (!(n.code !== 'pitch' || n.attributes.pitchStyle === void 0)) {
            var t = '';
            switch (n.attributes.pitchStyle) {
              case 'fastball':
                t = 'FB';
                break;
              case 'curveball':
                t = 'CB';
                break;
              case 'slider':
                t = 'SL';
                break;
              case 'changeup':
                t = 'CH';
                break;
              case 'cutter':
                t = 'CT';
                break;
              case 'riseball':
                t = 'RB';
                break;
              case 'dropball':
                t = 'DB';
                break;
              case 'screwball':
                t = 'SC';
                break;
              case 'drop_curve':
                t = 'DC';
                break;
              case 'knuckleball':
                t = 'KB';
                break;
              case 'knuckle_curve':
                t = 'KC';
                break;
              default:
                return;
            }
            e.push({ key: t, increment: !0 }),
              e.push({ key: ''.concat(t, 'S'), increment: n.isStrike }),
              e.push({ key: ''.concat(t, 'SW'), increment: n.isSwing }),
              e.push({ key: ''.concat(t, 'SM'), increment: n.isMiss });
          }
        }),
        (a.prototype.incrementPitcherStats = function (n, e) {
          var t = this.situationBeforeEvent.inFieldTeamId,
            d = this.fieldersBeforeEvent.playerForPosition(t, 'P'),
            f = this.earnedRunsAfterEvent.mostRecentRunner(e.lastBatter.id),
            _ = !1;
          f !== void 0 && (_ = f.out);
          var S = [
            { key: 'GS', increment: e.code === 'pitch' && e.firstPitchThrownForTeam },
            { key: 'DP:P', incrementBy: e.doublePlayIncrement },
            { key: 'TP:P', increment: e.outsOnPlay === 3 },
            { key: '#P', increment: e.code === 'pitch' },
            { key: 'BF', increment: e.isPlateAppearance },
            { key: 'TS', increment: e.isStrike },
            { key: 'TB', increment: e.isBall },
            {
              key: 'FPS',
              increment: this.situationAfterEvent.pitchesThisAtBat === 1 && e.isStrike,
            },
            { key: 'INP', increment: e.code === 'ball_in_play' && e.isInPlay },
            { key: 'SW', increment: e.isSwing },
            { key: 'SM', increment: e.isMiss },
            {
              key: '2STRIKES',
              increment:
                (e.code === 'pitch' || e.code === 'override') &&
                this.situationAfterEvent.strikes === 2 &&
                this.situationBeforeEvent.strikes !== this.situationAfterEvent.strikes,
            },
            {
              key: 'FULL',
              increment:
                (e.code === 'pitch' || e.code === 'override') &&
                this.situationAfterEvent.strikes === 2 &&
                this.situationAfterEvent.balls === 3 &&
                (this.situationBeforeEvent.strikes !== this.situationAfterEvent.strikes ||
                  this.situationBeforeEvent.balls !== this.situationAfterEvent.balls),
            },
            { key: 'LOB', increment: !1 },
            {
              key: 'SB',
              increment:
                e.code === 'base_running' && e.attributes.baseRunningPlayType === 'stole_base',
            },
            { key: 'LOBB', increment: this.situationAfterEvent.lastEventWasWalk && e.leadOff },
            {
              key: 'SO',
              increment:
                this.situationAfterEvent.lastEventWasStrikeout ||
                (e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'foul_tip_out'),
            },
            {
              key: 'SOL',
              increment:
                this.situationAfterEvent.lastEventWasStrikeout &&
                e.atBatLastPitchResult === 'strike_looking',
            },
            {
              key: 'WP',
              increment:
                (this.situationAfterEvent.lastEventWasStrikeout &&
                  e.attributes.droppedThirdStrikeCause === 'wild_pitch') ||
                (e.code === 'base_running' && e.attributes.baseRunningPlayType === 'wild_pitch'),
            },
            {
              key: 'HBP',
              increment: e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'hit_by_pitch',
            },
            {
              key: 'FPSO',
              increment:
                e.firstPitchStrikeAtBat &&
                e.code !== 'base_running' &&
                (e.outsOnEvent > 0 ||
                  r.contains(['error', 'fielders_choice'], e.attributes.ballInPlayResult)),
            },
            {
              key: 'FPSW',
              increment:
                e.pitchesThisAtBat !== 0 &&
                e.firstPitchStrikeAtBat &&
                this.situationAfterEvent.lastEventWasWalk,
            },
            { key: 'FPSH', increment: e.firstPitchStrikeAtBat && e.isHit },
            { key: 'ABRISP', increment: e.isAtBat && e.risp },
            { key: 'HRISP', increment: e.isHit && e.risp },
            {
              key: '<3',
              increment:
                e.pitchesThisAtBat <= 3 &&
                (this.situationAfterEvent.lastEventWasStrikeout ||
                  e.code === 'ball_in_play' ||
                  this.situationAfterEvent.lastEventWasWalk),
            },
            {
              key: '<13',
              increment:
                e.pitchesThisInning <= 13 &&
                this.situationAfterEvent.lastEventEndedInning &&
                r.isEqual(e.firstPitcherOfInning, this.currentPitcher),
            },
            {
              key: '123INN',
              increment:
                this.situationAfterEvent.lastEventEndedInning &&
                e.outsOnEvent === 1 &&
                e.battersReachedBaseThisInning === 0 &&
                r.isEqual(e.firstPitcherOfInning, this.currentPitcher),
            },
            {
              key: '0BBINN',
              increment: this.situationAfterEvent.lastEventEndedInning && e.walksThisInning === 0,
            },
            { key: 'H', increment: e.isHit },
            {
              key: 'IF',
              increment:
                e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'infield_fly',
            },
            { key: 'GO', increment: e.isGroundOut },
            { key: 'AO', increment: e.isAirOut },
            { key: 'GB', increment: e.isGround },
            { key: 'LND', increment: e.attributes.ballInPlayType === 'line_drive' },
            {
              key: 'FLB',
              increment: r.contains(['pop_fly', 'fly_ball'], e.attributes.ballInPlayType),
            },
            {
              key: 'FLY',
              increment: r.contains(
                ['pop_fly', 'line_drive', 'fly_ball'],
                e.attributes.ballInPlayType
              ),
            },
            { key: 'HARD', increment: e.isHardHit && e.isInPlay },
            { key: 'WEAK', increment: !e.isHardHit && e.isInPlay },
            {
              key: 'SHF',
              increment:
                e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'sacrifice_fly',
            },
            {
              key: 'SHB',
              increment:
                e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'sacrifice_bunt',
            },
            { key: 'outs', incrementBy: e.outsOnEvent },
            {
              key: '1B',
              increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'single',
            },
            {
              key: '2B',
              increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'double',
            },
            {
              key: '3B',
              increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'triple',
            },
            {
              key: 'HR',
              increment: e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'home_run',
            },
            {
              key: 'FC',
              increment:
                e.code === 'ball_in_play' && e.attributes.ballInPlayResult === 'fielders_choice',
            },
            {
              key: 'FC',
              incrementBy: -(0, s.bin)(
                _ && e.doublePlayIncrement === 1 && e.lastBallInPlayResult === 'fielders_choice'
              ),
            },
            {
              key: 'CI',
              increment:
                e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'catcher_interference',
            },
            { key: 'BK', increment: e.code === 'balk' },
            { key: 'R', increment: !1 },
            { key: 'PIK', increment: e.positionForPickoff === 'P' },
            {
              key: 'CS',
              increment:
                e.code === 'base_running' && e.attributes.baseRunningPlayType === 'caught_stealing',
            },
            {
              key: '1ST2OUT',
              increment:
                (e.isEndOfPitchesToCurrentBatter ||
                  (e.code === 'ball_in_play' &&
                    v.ballInPlayResultConfigs[e.attributes.ballInPlayResult].batterOut)) &&
                this.situationAfterEvent.outs === 2 &&
                e.battersThisInning === 2 &&
                r.isEqual(e.firstPitcherOfInning, this.currentPitcher),
            },
            {
              key: 'LOO',
              increment:
                e.code !== 'base_running' &&
                e.battersThisInning === 1 &&
                r.isEqual(e.firstPitcherOfInning, this.currentPitcher) &&
                this.earnedRunsAfterEvent.effectiveOutsForTeam === 1 &&
                this.earnedRunsAfterEvent.runnersEffectivelyOutOnEventIndex(this.nextEventOffset)
                  .length === 1,
            },
            { key: 'ER', increment: !1 },
          ];
          if (this.situationAfterEvent.lastEventWasWalk) {
            var P = this.earnedRunsAfterEvent.runners[0];
            (n = n.incrementPlayerStats(t, P.pitcherId, 'defense', 'BB', 1)),
              P.pitcherId !== d &&
                (n = n.incrementPlayerStats(t, P.pitcherId, 'defense', 'BF', 1, !1));
          }
          for (
            var I = 0,
              b = this.earnedRunsAfterEvent.runnersScoredOnEventIndex(this.nextEventOffset);
            I < b.length;
            I++
          ) {
            var E = b[I];
            this.earnedRunsAfterEvent.effectiveOutsForTeam < 3 &&
              (n = n.incrementTeamStats(t, 'defense', 'ER', 1)),
              this.earnedRunsAfterEvent.effectiveOutsForPitcher(E.pitcherId) < 3 &&
                (n = n.incrementPlayerStats(t, E.pitcherId, 'defense', 'ER', 1, !1));
          }
          for (
            var T = 0,
              F = this.earnedRunsAfterEvent.runnersUnscoredOnEventIndex(this.nextEventOffset);
            T < F.length;
            T++
          ) {
            var R = F[T],
              L = R.scoredOnEventIndex;
            this.earnedRuns.stateAfterEvent(L).effectiveOutsForTeam < 3 &&
              (n = n.incrementTeamStats(t, 'defense', 'ER', -1)),
              this.earnedRuns.stateAfterEvent(L).effectiveOutsForPitcher(R.pitcherId) < 3 &&
                (n = n.incrementPlayerStats(t, R.pitcherId, 'defense', 'ER', -1, !1));
          }
          for (
            var x = 0, N = this.baserunnersAfterEvent.runnersScoredOnLastEvent;
            x < N.length;
            x++
          ) {
            var M = N[x],
              P = this.earnedRunsAfterEvent.currentRunner(M);
            n = n.incrementPlayerStatsElements(t, P !== void 0 ? P.pitcherId : void 0, 'defense', [
              { key: 'R', increment: !0 },
              { key: 'BBS', increment: P !== void 0 && P.walked },
              { key: 'LOBBS', increment: P !== void 0 && P.walked && P.leadoff },
            ]);
          }
          for (
            var J = 0, D = this.baserunnersAfterEvent.runnersUnscoredOnLastEvent;
            J < D.length;
            J++
          ) {
            var $ = D[J],
              P = this.earnedRunsAfterEvent.mostRecentRunner($);
            n = n.incrementPlayerStatsElements(t, P !== void 0 ? P.pitcherId : void 0, 'defense', [
              { key: 'R', incrementBy: -1 },
              { key: 'BBS', incrementBy: -(0, s.bin)(P !== void 0 && P.walked) },
              { key: 'LOBBS', incrementBy: -(0, s.bin)(P !== void 0 && P.walked && P.leadoff) },
            ]);
          }
          this.appendPitchStyleStats(e, S),
            (n = n.incrementPlayerStatsElements(t, d, 'defense', S)),
            this.situationAfterEvent.lastEventEndedInning &&
              (n = n.incrementPlayerStats(
                t,
                d,
                'defense',
                'LOB',
                this.baserunnersAfterEvent.runnersLeftOnBase
              ));
          var z = this.situationBeforeEvent.atBatIndex;
          if (d !== void 0 && e.code === 'pitch' && n.getIn(['pitcherLastAtBatIndex', d]) !== z) {
            var q = n.getPlayerStat(t, d, 'defense', '#P');
            n = n
              .setPlayerStats(t, d, 'defense', 'LBFPN', q)
              .setIn(['pitcherLastAtBatIndex', d], z);
          }
          return n;
        }),
        (a.prototype.incrementCatcherStats = function (n, e) {
          var t = this.situationBeforeEvent.inFieldTeamId,
            d = this.fieldersBeforeEvent.playerForPosition(t, 'C'),
            f = [
              {
                key: 'E',
                increment:
                  e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'catcher_interference',
              },
              {
                key: 'CI:C',
                increment:
                  e.code === 'end_at_bat' && e.attributes.endAtBatReason === 'catcher_interference',
              },
              {
                key: 'PB:C',
                increment:
                  e.isKPassedBall ||
                  (e.code === 'base_running' && e.attributes.baseRunningPlayType === 'passed_ball'),
              },
              {
                key: 'SB:C',
                increment:
                  e.code === 'base_running' && e.attributes.baseRunningPlayType === 'stole_base',
              },
              { key: 'outs:C', incrementBy: e.outsOnEvent },
              { key: 'PIK:C', increment: e.positionForPickoff === 'C' },
              {
                key: 'CS:C',
                increment:
                  e.code === 'base_running' &&
                  e.attributes.baseRunningPlayType === 'caught_stealing',
              },
            ];
          return (
            !r.contains(
              ['dropped_third_strike', 'dropped_third_strike_batter_out'],
              e.attributes.ballInPlayResult
            ) &&
              (e.attributes.ballInPlayResult === 'foul_tip_out' ||
                this.situationAfterEvent.lastEventWasStrikeout) &&
              (n = n.incrementPlayerStats(t, d, 'defense', 'PO', 1)),
            n.incrementPlayerStatsElements(t, d, 'defense', f)
          );
        }),
        (a.prototype.incrementFielderStatsForPlayer = function (n, e, t, d) {
          var f = this.situationBeforeEvent.inFieldTeamId,
            _ = [
              { key: 'outs:F', incrementBy: e.outsOnEvent },
              { key: 'outs-'.concat(d), incrementBy: e.outsOnEvent },
            ];
          return n.incrementPlayerStatsElements(f, t, 'defense', _);
        }),
        (a.prototype.incrementAPOForDefenders = function (n, e, t, d, f) {
          f === void 0 && (f = !1);
          var _ = this.fieldersBeforeEvent.positionsMapForTeam(
              this.situationBeforeEvent.inFieldTeamId
            ),
            S = {},
            P = !1;
          if (t === 1)
            for (var I = 0; I < e.length; I++) {
              var b = _[e[I].position];
              I < e.length - 1
                ? P ||
                  ((P = e[I].error),
                  !P &&
                    (b === void 0 || S[b] === void 0) &&
                    (f ||
                      (n = n.incrementPlayerStats(
                        this.situationBeforeEvent.inFieldTeamId,
                        b,
                        'defense',
                        'A'
                      )),
                    (S[b] = !0)))
                : (n = n.incrementPlayerStats(
                    this.situationBeforeEvent.inFieldTeamId,
                    b,
                    'defense',
                    'PO',
                    d ? 0 : 1
                  ));
            }
          else {
            var E = void 0;
            e.length < t ? (E = _[e[0].position]) : (E = _[e[e.length - t].position]),
              (n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                E,
                'defense',
                'PO',
                d ? 0 : 1
              ));
          }
          return n;
        }),
        (a.prototype.incrementEForDefenders = function (n, e) {
          for (
            var t = !1,
              d = this.fieldersBeforeEvent.positionsMapForTeam(
                this.situationBeforeEvent.inFieldTeamId
              ),
              f = 0;
            f < e.length;
            f++
          )
            e[f].error &&
              ((n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                d[e[f].position],
                'defense',
                'E'
              )),
              (t = !0));
          return (
            t ||
              (n = n.incrementTeamStats(this.situationBeforeEvent.inFieldTeamId, 'defense', 'E')),
            n
          );
        }),
        (a.prototype.reconcileAssistsWithPreviousDefenders = function (n, e) {
          var t = {},
            d = !1;
          r.each(e.defendersByEventInPlay, function (T, F) {
            r.each(T, function (R, L) {
              (d = d || R.error),
                !d &&
                  (F < e.defendersByEventInPlay.length - 2 ||
                    (F !== e.defendersByEventInPlay.length - 1 && L !== T.length - 1)) &&
                  (t[R.position] = !0);
            });
          });
          var f = {},
            _ = r.last(e.defendersByEventInPlay[e.defendersByEventInPlay.length - 2]);
          if (_ === void 0) return n;
          var S = _.position;
          f[S] = !0;
          for (var P = 0, I = r.initial(e.defenders); P < I.length; P++) {
            var b = I[P];
            f[b.position] = !0;
          }
          for (var E in f)
            t[E] === void 0 &&
              (n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                this.fieldersBeforeEvent.playerForPosition(
                  this.situationBeforeEvent.inFieldTeamId,
                  E
                ),
                'defense',
                'A'
              ));
          return n;
        }),
        (a.prototype.incrementDefenderStats = function (n, e) {
          if (
            (e.isError &&
              e.code !== 'end_at_bat' &&
              (n = this.incrementEForDefenders(n, e.defenders)),
            e.doublePlayIncrement !== 0)
          ) {
            n = n.incrementTeamStats(
              this.situationBeforeEvent.inFieldTeamId,
              'defense',
              'DP',
              e.doublePlayIncrement
            );
            for (var t = 0, d = e.defenderIdsAtPointOfDoublePlay; t < d.length; t++) {
              var f = d[t];
              n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                f,
                'defense',
                'DP',
                e.doublePlayIncrement,
                !1
              );
            }
          }
          if (e.outsOnPlay === 3) {
            n = n.incrementTeamStats(this.situationBeforeEvent.inFieldTeamId, 'defense', 'TP', 1);
            for (var _ = 0, S = e.defenderIdsForPlay; _ < S.length; _++) {
              var f = S[_];
              n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                f,
                'defense',
                'TP',
                1,
                !1
              );
            }
          }
          if (
            e.defenders === void 0 ||
            (e.defenders.length === 0 && e.attributes.baseRunningPlayType !== 'out_on_last_play')
          )
            return n;
          var P, I;
          if (
            (e.defenders.length === 0
              ? ((P = e.defendersByEventInPlay[0]), (I = !1))
              : ((P = e.defenders), (I = !0)),
            P.length === 0)
          )
            return n;
          if (e.outsOnEvent > 0 || e.isError)
            if (e.batterOutOnCatchInPlay && e.eventIndexInPlay === 0) {
              var b = this.fieldersBeforeEvent.playerForPosition(
                this.situationBeforeEvent.inFieldTeamId,
                P[0].position
              );
              n = n.incrementPlayerStats(
                this.situationBeforeEvent.inFieldTeamId,
                b,
                'defense',
                'PO'
              );
            } else if (
              e.code === 'ball_in_play' ||
              (e.code === 'base_running' && e.attributes.baseRunningPlayType === 'out_on_last_play')
            )
              if (I && e.code === 'base_running')
                (n = this.incrementAPOForDefenders(n, P, e.outsOnEvent, e.isError, !0)),
                  (n = this.reconcileAssistsWithPreviousDefenders(n, e));
              else {
                var E = 1 + e.outsOnPlay - e.outsOnEvent,
                  T = E - (0, s.bin)(e.batterOutOnCatchInPlay);
                n = this.incrementAPOForDefenders(n, P, T, e.isError);
              }
            else
              e.code === 'base_running' && (n = this.incrementAPOForDefenders(n, P, 1, e.isError));
          return n;
        }),
        (a.prototype.incrementBaserunnerStats = function (n, e) {
          var t = this.situationBeforeEvent.atBatTeamId,
            d = [
              { key: 'SB', increment: e.attributes.baseRunningPlayType === 'stole_base' },
              { key: 'CS', increment: e.attributes.baseRunningPlayType === 'caught_stealing' },
              { key: 'PIK', increment: e.attributes.baseRunningPlayType === 'picked_off' },
            ];
          return (
            (n = n.incrementPlayerStatsElements(t, e.attributes.baseRunningRunnerId, 'offense', d)),
            n
          );
        }),
        (a.prototype.incrementDecisionStats = function (n, e) {
          var t = '';
          switch (e.attributes.pitcherDecision) {
            case 'win':
              t = 'W';
              break;
            case 'loss':
              t = 'L';
              break;
            case 'save':
              t = 'SV';
              break;
            case 'blown_save':
              t = 'BS';
              break;
          }
          for (var d = 0, f = ['W', 'L', 'SV', 'BS']; d < f.length; d++) {
            var _ = f[d];
            n = n.incrementPlayerStats(
              e.attributes.pitcherDecisionTeamId,
              e.attributes.pitcherDecisionPitcherId,
              'defense',
              _,
              (0, s.bin)(t === _)
            );
          }
          return n;
        }),
        (a.prototype.handleManualOverride = function (n, e) {
          if (e.attributes.overrideScores === void 0) return n;
          for (var t = 0, d = e.attributes.overrideScores; t < d.length; t++) {
            var f = d[t];
            (n = n.setTeamStats(f.teamId, 'offense', 'R', f.score)),
              f.teamId === this.situationBeforeEvent.inFieldTeamId
                ? (n = n.setTeamStats(
                    this.situationBeforeEvent.atBatTeamId,
                    'defense',
                    'R',
                    f.score
                  ))
                : (n = n.setTeamStats(
                    this.situationBeforeEvent.inFieldTeamId,
                    'defense',
                    'R',
                    f.score
                  ));
          }
          return n;
        }),
        (a.prototype.incrementStatsForEvent = function (n, e) {
          var t = this.statEvents.stateAfterEvent(this.nextEventOffset).statsEvent;
          if (((n = this.setGamesScored(n, e)), r.contains(['NOP', 'PLAYER'], t.code))) return n;
          (n = this.incrementBatterStats(n, t)),
            (n = this.incrementPitcherStats(n, t)),
            (n = this.incrementCatcherStats(n, t)),
            (n = this.incrementDefenderStats(n, t));
          var d = this.fieldersBeforeEvent.positionsMapForTeam(
            this.situationBeforeEvent.inFieldTeamId
          );
          for (var f in d)
            if (d.hasOwnProperty(f)) {
              var _ = d[f];
              _ !== void 0 &&
                f !== void 0 &&
                !r.contains(['EH', 'DH', 'F10'], f) &&
                (n = this.incrementFielderStatsForPlayer(n, t, _, f));
            }
          return (
            e.code === 'pitcher_decision' && (n = this.incrementDecisionStats(n, t)),
            e.code === 'base_running' && (n = this.incrementBaserunnerStats(n, t)),
            e.code === 'override' && (n = this.handleManualOverride(n, t)),
            n
          );
        }),
        a
      );
    })(l.VersionedStateEngine);
    return (Er.StatsEngine = y), Er;
  }
  var qt = {},
    Gn = {},
    gd;
  function Yy() {
    if (gd) return Gn;
    (gd = 1), Object.defineProperty(Gn, '__esModule', { value: !0 }), (Gn.StatsEvent = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(Pt()),
      p = i.__importStar(at()),
      v = at(),
      h = (function () {
        function s(l, u, y, o, a) {
          if (
            ((this.context = u),
            (this.lastEventWasWalk = y),
            (this.lastEventWasStrikeout = o),
            (this.lastEventWasOut = a),
            (this.id = l.id),
            (this.attributes = Object()),
            (this.defenders =
              l.attributes !== void 0 && l.attributes.defenders !== void 0
                ? l.attributes.defenders
                : []),
            c.contains(
              [
                'pitch',
                'end_at_bat',
                'balk',
                'illegal_pitch',
                'illegal_pitch_advance',
                'ball_in_play',
                'base_running',
                'override',
                'end_half',
                'pitcher_decision',
                'foul_error',
              ],
              l.code
            )
              ? (this.code = l.code)
              : c.contains(
                    [
                      'fill_position',
                      'fill_lineup_index',
                      'fill_lineup',
                      'replace_runner',
                      'swap_players',
                      'assign_dh',
                    ],
                    l.code
                  )
                ? (this.code = 'PLAYER')
                : (this.code = 'NOP'),
            (this.isHit = (0, v.isHit)(l)),
            (this.isError = (0, v.isError)(l)),
            (this.isStrike = (0, v.isStrike)(l)),
            l.code === 'ball_in_play')
          ) {
            (this.attributes.ballInPlayResult = l.attributes.playResult),
              (this.attributes.ballInPlayType = l.attributes.playType),
              (this.attributes.ballInPlayHomeRunLocation = l.attributes.hrLocation),
              (this.attributes.droppedThirdStrikeCause = l.attributes.cause);
            var n = c.contains(
                ['line_drive', 'fly_ball', 'pop_fly'],
                this.attributes.ballInPlayType
              ),
              e = r.ballInPlayResultConfigs[this.attributes.ballInPlayResult].batterOut,
              t = l.attributes.ballWasCaught;
            e === !1
              ? (this.attributes.ballInPlayBallWasCaught = !1)
              : e && t === void 0
                ? (this.attributes.ballInPlayBallWasCaught = n)
                : (this.attributes.ballInPlayBallWasCaught = t);
          } else
            l.code === 'pitch'
              ? ((this.attributes.pitchResult = l.attributes.result),
                (this.attributes.pitchStyle = l.attributes.style),
                (this.attributes.pitchAdvancesRunners = l.attributes.advancesRunners || !1))
              : l.code === 'base_running'
                ? ((this.attributes.baseRunningPlayType = l.attributes.playType),
                  (this.attributes.baseRunningRunnerId = l.attributes.runnerId))
                : l.code === 'end_at_bat'
                  ? (this.attributes.endAtBatReason = l.attributes.reason)
                  : l.code === 'pitcher_decision'
                    ? ((this.attributes.pitcherDecisionTeamId = l.attributes.teamId),
                      (this.attributes.pitcherDecisionPitcherId = l.attributes.pitcherId),
                      (this.attributes.pitcherDecision = l.attributes.decision))
                    : l.code === 'override' &&
                      (this.attributes.overrideScores = l.attributes.scores);
        }
        return (
          Object.defineProperty(s.prototype, 'isSwing', {
            get: function () {
              return (
                this.code === 'pitch' &&
                (this.attributes.pitchResult === 'strike_swinging' ||
                  this.attributes.pitchResult === 'ball_in_play' ||
                  this.attributes.pitchResult === 'foul' ||
                  this.attributes.pitchResult === 'foul_bunt')
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isMiss', {
            get: function () {
              return this.code === 'pitch' && this.attributes.pitchResult === 'strike_swinging';
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isBall', {
            get: function () {
              return (
                this.code === 'pitch' &&
                c.contains(
                  ['ball', 'intentional_ball', 'illegal_pitch'],
                  this.attributes.pitchResult
                )
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isKPassedBall', {
            get: function () {
              return (
                this.attributes.ballInPlayResult === 'dropped_third_strike' &&
                this.attributes.droppedThirdStrikeCause === 'passed_ball'
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'reachedBaseOnError', {
            get: function () {
              return this.code === 'ball_in_play' && this.isError;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isHitOut', {
            get: function () {
              return (
                this.code === 'ball_in_play' &&
                c.contains(
                  [
                    'batter_out',
                    'batter_out_advance_runners',
                    'infield_fly',
                    'offensive_interference',
                  ],
                  this.attributes.ballInPlayResult
                )
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isSacrifice', {
            get: function () {
              return (
                this.code === 'ball_in_play' &&
                (0, v.isSacrificeResult)(this.attributes.ballInPlayResult)
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isHardHitCode', {
            get: function () {
              return (
                c.contains(['hard_ground_ball', 'line_drive'], this.attributes.ballInPlayType) ||
                (this.attributes.ballInPlayResult === 'home_run' &&
                  this.attributes.ballInPlayHomeRunLocation !== 'in_the_park')
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isHardHit', {
            get: function () {
              return this.code === 'ball_in_play' && this.isHardHitCode;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isInPlay', {
            get: function () {
              return this.code === 'ball_in_play'
                ? this.attributes.droppedThirdStrikeCause === 'passed_ball'
                  ? !0
                  : !c.contains(
                      [
                        'other_out',
                        'foul_tip_out',
                        'foul_error',
                        'other_out',
                        'dropped_third_strike',
                        'dropped_third_strike_batter_out',
                      ],
                      this.attributes.ballInPlayResult
                    )
                : !1;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isAtBat', {
            get: function () {
              return (
                this.isHit ||
                this.isHitOut ||
                this.lastEventWasStrikeout ||
                (this.reachedBaseOnError && !this.isSacrifice) ||
                (this.code === 'ball_in_play' &&
                  c.contains(
                    [
                      'dropped_third_strike',
                      'dropped_third_strike_batter_out',
                      'fielders_choice',
                      'foul_tip_out',
                      'other_out',
                    ],
                    this.attributes.ballInPlayResult
                  ))
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isPlateAppearance', {
            get: function () {
              return (
                this.isAtBat ||
                this.lastEventWasWalk ||
                this.isSacrifice ||
                (this.code === 'end_at_bat' &&
                  c.contains(
                    ['hit_by_pitch', 'catcher_interference'],
                    this.attributes.endAtBatReason
                  ))
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isAirOut', {
            get: function () {
              return (
                this.code === 'ball_in_play' &&
                c.contains(
                  ['batter_out', 'batter_out_advance_runners', 'infield_fly', 'sacrifice_fly'],
                  this.attributes.ballInPlayResult
                ) &&
                c.contains(['pop_fly', 'line_drive', 'fly_ball'], this.attributes.ballInPlayType)
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isGround', {
            get: function () {
              return this.code === 'ball_in_play' && p.isGroundType(this.attributes.ballInPlayType);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'lastBallInPlayWasGround', {
            get: function () {
              return c.contains(['ground_ball', 'hard_ground_ball'], this.lastBallInPlayType);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isGroundOut', {
            get: function () {
              return p.isGroundOutResult(
                this.attributes.ballInPlayType,
                this.attributes.ballInPlayResult
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isBattingPlay', {
            get: function () {
              return this.isAtBat || this.code === 'pitch';
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isGoodPlay', {
            get: function () {
              return (
                this.lastEventWasWalk ||
                (this.code === 'ball_in_play' &&
                  c.contains(
                    [
                      'double',
                      'triple',
                      'home_run',
                      'sacrifice_bunt',
                      'sacrifice_fly',
                      'sacrifice_fly_error',
                      'sacrifice_bunt_error',
                    ],
                    this.attributes.ballInPlayResult
                  ))
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isEndOfPitchesToCurrentBatter', {
            get: function () {
              return (
                this.lastEventWasStrikeout ||
                this.lastEventWasWalk ||
                this.code === 'end_at_bat' ||
                (this.code === 'pitch' && this.attributes.pitchResult === 'ball_in_play')
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'didBatterReachBase', {
            get: function () {
              return (
                (this.code === 'ball_in_play' &&
                  !r.ballInPlayResultConfigs[this.attributes.ballInPlayResult].batterOut) ||
                (this.code === 'pitch' && this.lastEventWasWalk) ||
                (this.code === 'end_at_bat' && this.attributes.endAtBatReason !== 'strikeout')
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'outsOnEvent', {
            get: function () {
              return this.lastEventWasOut ? 1 : 0;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'isEndOfAtBat', {
            get: function () {
              return (
                this.lastEventWasStrikeout ||
                this.lastEventWasWalk ||
                this.code === 'end_at_bat' ||
                this.code === 'ball_in_play'
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'positionForPickoff', {
            get: function () {
              if (
                !(
                  this.code !== 'base_running' ||
                  this.attributes.baseRunningPlayType !== 'picked_off'
                )
              ) {
                var l = (c.first(this.defenders) || {}).position;
                return c.contains(['P', 'C'], l) ? l : this.context.defaultPickOffPosition;
              }
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'numberOfBaserunnersAfterLastBatterAtBatDone', {
            get: function () {
              var l = 0;
              for (var u in this.baserunnersAfterLastBatterAtBatDone)
                u !== void 0 &&
                  (l += this.baserunnersAfterLastBatterAtBatDone[u] !== void 0 ? 1 : 0);
              return l;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(s.prototype, 'doublePlayIncrement', {
            get: function () {
              return this.outsOnPlay === 2 && this.outsOnEvent === 1
                ? 1
                : this.outsOnPlay === 3
                  ? -1
                  : 0;
            },
            enumerable: !1,
            configurable: !0,
          }),
          s
        );
      })();
    return (Gn.StatsEvent = h), Gn;
  }
  var _d;
  function Qy() {
    if (_d) return qt;
    (_d = 1),
      Object.defineProperty(qt, '__esModule', { value: !0 }),
      (qt.StatEventsEngine = qt.StateAccessorWrapper = qt.StatsEventEngineState = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(de()),
      p = at(),
      v = Yy(),
      h = i.__importStar(Ie()),
      s = i.__importStar(be()),
      l = (function (o) {
        i.__extends(a, o);
        function a() {
          return (o !== null && o.apply(this, arguments)) || this;
        }
        return a;
      })(s.ImmutableState);
    qt.StatsEventEngineState = l;
    var u = (function (o) {
      i.__extends(a, o);
      function a(n) {
        var e = o.call(this, n) || this;
        return (e.internalObject = n), e;
      }
      return (
        (a.prototype.get = function (n) {
          return this.internalObject.get(n);
        }),
        (a.prototype.set = function (n, e) {
          return new a(this.internalObject.set(n, e));
        }),
        (a.prototype.withMutations = function (n) {
          return new a(this.internalObject.withMutations(n));
        }),
        Object.defineProperty(a.prototype, 'strikes', {
          get: function () {
            return this.internalObject.get('strikes');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'leadOff', {
          get: function () {
            return this.internalObject.get('leadOff');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'have2Strikes', {
          get: function () {
            return this.internalObject.get('have2Strikes');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'pitchesAfter2Strikes', {
          get: function () {
            return this.internalObject.get('pitchesAfter2Strikes');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'firstPitchStrikeAtBat', {
          get: function () {
            return this.internalObject.get('firstPitchStrikeAtBat');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'qabIncrementedForPlay', {
          get: function () {
            return this.internalObject.get('qabIncrementedForPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'twoPlusThreeIncrementedForPlay', {
          get: function () {
            return this.internalObject.get('twoPlusThreeIncrementedForPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'sixPlusIncrementedForPlay', {
          get: function () {
            return this.internalObject.get('sixPlusIncrementedForPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'battersThisInning', {
          get: function () {
            return this.internalObject.get('battersThisInning');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'battersReachedBaseThisInning', {
          get: function () {
            return this.internalObject.get('battersReachedBaseThisInning');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'walksThisInning', {
          get: function () {
            return this.internalObject.get('walksThisInning');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'firstPitchThrownForTeam', {
          get: function () {
            return this.internalObject.get('firstPitchThrownForTeam');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'firstPitcherOfInning', {
          get: function () {
            return this.internalObject.get('firstPitcherOfInning');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'forcedOutsOnPlay', {
          get: function () {
            return this.internalObject.get('forcedOutsOnPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'forcedOutsOnEvent', {
          get: function () {
            return this.internalObject.get('forcedOutsOnEvent');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'outsOnPlay', {
          get: function () {
            return this.internalObject.get('outsOnPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'scoresOnPlayAfterEachEvent', {
          get: function () {
            return this.internalObject.get('scoresOnPlayAfterEachEvent');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'batterOutOnCatchInPlay', {
          get: function () {
            return this.internalObject.get('batterOutOnCatchInPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'eventIndexInPlay', {
          get: function () {
            return this.internalObject.get('eventIndexInPlay');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lastBallInPlayResult', {
          get: function () {
            return this.internalObject.get('lastBallInPlayResult');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lastBallInPlayType', {
          get: function () {
            return this.internalObject.get('lastBallInPlayType');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lastBallInPlayWasRBIEligible', {
          get: function () {
            return this.internalObject.get('lastBallInPlayWasRBIEligible');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'defendersByEventInPlay', {
          get: function () {
            return this.internalObject.get('defendersByEventInPlay').toJS();
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'defenderIdsForPlay', {
          get: function () {
            return this.internalObject.get('defenderIdsForPlay').toArray();
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'defenderIdsAtPointOfDoublePlay', {
          get: function () {
            return this.internalObject.get('defenderIdsAtPointOfDoublePlay').toArray();
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'baserunnersAfterLastBatterAtBatDone', {
          get: function () {
            return this.internalObject.get('baserunnersAfterLastBatterAtBatDone');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lastBatterId', {
          get: function () {
            return this.internalObject.get('lastBatterId');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'lastBatterTeamId', {
          get: function () {
            return this.internalObject.get('lastBatterTeamId');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'atBatLastPitchResult', {
          get: function () {
            return this.internalObject.get('atBatLastPitchResult');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'playerLOBIncrement', {
          get: function () {
            return this.internalObject.get('playerLOBIncrement');
          },
          enumerable: !1,
          configurable: !0,
        }),
        Object.defineProperty(a.prototype, 'statsEvent', {
          get: function () {
            return this.internalObject.get('statsEvent');
          },
          enumerable: !1,
          configurable: !0,
        }),
        a
      );
    })(s.ImmutableState);
    qt.StateAccessorWrapper = u;
    var y = (function (o) {
      i.__extends(a, o);
      function a(n, e, t, d, f, _, S) {
        var P = o.call(this, n) || this;
        return (
          (P.context = e),
          (P.baserunners = t),
          (P.situation = d),
          (P.lineup = f),
          (P.fielders = _),
          (P.plays = S),
          (P.pitchUpdaters = [
            P.updateWalksThisInning.bind(P),
            P.updateBattersReachedBase.bind(P),
            P.updateFirstPitcherOfInning.bind(P),
            P.updateFirstPitchStrikeAtBat.bind(P),
            P.updateLeadOff.bind(P),
            P.updateBattersThisInning.bind(P),
            P.updateFirstPitchThrownForTeam.bind(P),
            P.updateAtBatLastPitchResult.bind(P),
          ]),
          (P.playUpdaters = [
            P.updateLastBatterIds.bind(P),
            P.updateLastBallInPlay.bind(P),
            P.updateBaseRunning.bind(P),
            P.updateOutsOnPlay.bind(P),
            P.updateDefenderIds.bind(P),
            P.updateScoresOnPlayAfterEachEvent.bind(P),
            P.updateBatterOutOnCatchInPlay.bind(P),
            P.updatePlayerLOBIncrement.bind(P),
          ]),
          (P.updaters = [P.updateFromOtherEngines.bind(P)].concat(P.pitchUpdaters, P.playUpdaters, [
            P.updateQABForPlay.bind(P),
          ])),
          P
        );
      }
      return (
        (a.prototype.initialState = function () {
          return new u(
            new l(
              r.fromJS({
                strikes: 0,
                battersThisInning: 0,
                battersReachedBaseThisInning: 0,
                walksThisInning: 0,
                firstPitchThrownForTeam: !1,
                firstPitcherOfInning: {},
                leadOff: !0,
                have2Strikes: !1,
                pitchesAfter2Strikes: 0,
                firstPitchStrikeAtBat: !1,
                forcedOutsOnPlay: 0,
                forcedOutsOnEvent: 0,
                outsOnPlay: 0,
                scoresOnPlayAfterEachEvent: [],
                batterOutOnCatchInPlay: !1,
                eventIndexInPlay: 0,
                lastBallInPlayResult: void 0,
                lastBallInPlayType: void 0,
                lastBallInPlayWasRBIEligible: !1,
                defendersByEventInPlay: [],
                defenderIdsForPlay: [],
                defenderIdsAtPointOfDoublePlay: [],
                baserunnersAfterLastBatterAtBatDone: { 1: void 0, 2: void 0, 3: void 0 },
                lastBatterId: void 0,
                lastBatterTeamId: void 0,
                atBatLastPitchResult: void 0,
                qabIncrementedForPlay: !1,
                twoPlusThreeIncrementedForPlay: !1,
                sixPlusIncrementedForPlay: !1,
                playerLOBIncrement: 0,
                statsEvent: void 0,
              })
            )
          );
        }),
        (a.prototype.processOneEvent = function (n, e) {
          var t = this,
            d = this.situation.stateAfterEvent(this.nextEventOffset),
            f = new v.StatsEvent(
              e,
              this.context,
              d.lastEventWasWalk,
              d.lastEventWasStrikeout,
              d.lastEventWasOut
            );
          return n.withMutations(function (_) {
            for (var S = new u(_), P = 0, I = t.updaters; P < I.length; P++) {
              var b = I[P];
              b(e, f, S);
            }
            _.set('statsEvent', f);
          });
        }),
        (a.prototype.updateFromOtherEngines = function (n, e, t) {
          var d = this.situation.stateBeforeEvent(this.nextEventOffset),
            f = this.baserunners.stateBeforeEvent(this.nextEventOffset),
            _ = this.plays.stateAfterEvent(this.nextEventOffset);
          (e.risp = f.playerAtBase(2) !== void 0 || f.playerAtBase(3) !== void 0),
            (e.pitchesThisAtBat = d.pitchesThisAtBat + (n.code === 'pitch' ? 1 : 0)),
            (e.pitchesThisInning = d.pitchesThisInning + (n.code === 'pitch' ? 1 : 0)),
            (e.eventIndexInPlay = _.eventIndexInPlay);
        }),
        (a.prototype.setEventPropertiesFromOwnState = function (n, e) {
          for (var t = [], d = 2; d < arguments.length; d++) t[d - 2] = arguments[d];
          for (var f = 0, _ = t; f < _.length; f++) {
            var S = _[f];
            e[S] = n.get(S);
          }
        }),
        (a.prototype.updateFirstPitchThrownForTeam = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            t.set('firstPitchThrownForTeam', d.pitchesThrownThisGame(d.inFieldTeamId) === 1),
            this.setEventPropertiesFromOwnState(t, e, 'firstPitchThrownForTeam');
        }),
        (a.prototype.updateBattersThisInning = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            (d.pitchesThisInning === 1
              ? t.set('battersThisInning', 1)
              : d.pitchesThisAtBat === 1 && t.set('battersThisInning', t.battersThisInning + 1)),
            this.setEventPropertiesFromOwnState(t, e, 'battersThisInning');
        }),
        (a.prototype.updateLeadOff = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            d.pitchesThisAtBat === 1 &&
            t.set('leadOff', d.pitchesThisInning === 1),
            this.setEventPropertiesFromOwnState(t, e, 'leadOff');
        }),
        (a.prototype.updateFirstPitchStrikeAtBat = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            d.pitchesThisAtBat === 1 &&
            (e.isStrike ? t.set('firstPitchStrikeAtBat', !0) : t.set('firstPitchStrikeAtBat', !1)),
            this.setEventPropertiesFromOwnState(t, e, 'firstPitchStrikeAtBat');
        }),
        (a.prototype.updateFirstPitcherOfInning = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset),
            f = this.fielders.stateAfterEvent(this.nextEventOffset),
            _ = f.playerForPosition(d.inFieldTeamId, 'P');
          ((n.code === 'pitch' && d.pitchesThisInning === 1) ||
            (t.firstPitcherOfInning.get('id') === void 0 && _ !== void 0)) &&
            t.update('firstPitcherOfInning', function (S) {
              return S.set('id', _).set('teamId', d.inFieldTeamId);
            }),
            (e.firstPitcherOfInning = {
              id: t.firstPitcherOfInning.get('id'),
              teamId: t.firstPitcherOfInning.get('teamId'),
            });
        }),
        (a.prototype.updateBattersReachedBase = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            d.pitchesThisInning === 1 &&
            t.set('battersReachedBaseThisInning', 0),
            t.set(
              'battersReachedBaseThisInning',
              t.battersReachedBaseThisInning + (e.didBatterReachBase ? 1 : 0)
            ),
            this.setEventPropertiesFromOwnState(t, e, 'battersReachedBaseThisInning');
        }),
        (a.prototype.updateWalksThisInning = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' && d.pitchesThisInning === 1 && t.set('walksThisInning', 0),
            d.lastEventWasWalk && t.set('walksThisInning', t.walksThisInning + 1),
            this.setEventPropertiesFromOwnState(t, e, 'walksThisInning');
        }),
        (a.prototype.updateAtBatLastPitchResult = function (n, e, t) {
          var d,
            f = this.situation.stateBeforeEvent(this.nextEventOffset);
          f.pitchesThisAtBat === 0 && t.set('atBatLastPitchResult', void 0),
            n.code === 'pitch' &&
              t.set(
                'atBatLastPitchResult',
                (d = e.attributes.pitchResult) !== null && d !== void 0 ? d : void 0
              ),
            this.setEventPropertiesFromOwnState(t, e, 'atBatLastPitchResult');
        }),
        (a.prototype.getBaseForRunner = function (n, e) {
          var t = 0;
          for (var d in e)
            if (e[d] === n) {
              t = +d;
              break;
            }
          return t;
        }),
        (a.prototype.idsFromDefenders = function (n) {
          var e = this.situation.stateBeforeEvent(this.nextEventOffset),
            t = this.fielders.stateBeforeEvent(this.nextEventOffset);
          return c.uniq(
            c.map(n, function (d) {
              return t.playerForPosition(e.inFieldTeamId, d.position);
            })
          );
        }),
        (a.prototype.updateBatterOutOnCatchInPlay = function (n, e, t) {
          (0, p.eventRelatesToAtBatTeam)(n) &&
            ((0, p.baserunningRelatedToLastBIP)(n) ||
              t.set(
                'batterOutOnCatchInPlay',
                n.code === 'ball_in_play' && !!e.attributes.ballInPlayBallWasCaught
              )),
            this.setEventPropertiesFromOwnState(t, e, 'batterOutOnCatchInPlay');
        }),
        (a.prototype.updateScoresOnPlayAfterEachEvent = function (n, e, t) {
          var d = this.baserunners.stateAfterEvent(this.nextEventOffset),
            f = this.plays.stateAfterEvent(this.nextEventOffset);
          f.isPartOfPlay && !f.eventStartsNewPlay
            ? t.update('scoresOnPlayAfterEachEvent', function (_) {
                return _.push(
                  t.scoresOnPlayAfterEachEvent.last() +
                    d.runnersScoredOnLastEvent.length -
                    d.runnersUnscoredOnLastEvent.length
                );
              })
            : f.isPartOfPlay &&
              t.update('scoresOnPlayAfterEachEvent', function (_) {
                return _.clear().push(d.runnersScoredOnLastEvent.length);
              }),
            (e.scoresOnPlayAfterEachEvent = t.scoresOnPlayAfterEachEvent.toArray());
        }),
        (a.prototype.updateDefenderIds = function (n, e, t) {
          var d = this,
            f = this.plays.stateAfterEvent(this.nextEventOffset);
          (0, p.isBallInPlayEvent)(n) &&
            t.set('defendersByEventInPlay', r.List.of(n.attributes.defenders)),
            f.isPartOfPlay && !f.eventStartsNewPlay
              ? (t.update('defendersByEventInPlay', function (_) {
                  return _.push(n.attributes.defenders);
                }),
                t.update('defenderIdsForPlay', function (_) {
                  for (var S = 0, P = d.idsFromDefenders(e.defenders); S < P.length; S++) {
                    var I = P[S];
                    _.contains(I) || (_ = _.push(I));
                  }
                  return _;
                }),
                t.outsOnPlay === 2 &&
                  e.outsOnEvent === 1 &&
                  t.update('defenderIdsAtPointOfDoublePlay', function (_) {
                    _ = _.clear();
                    for (var S = 0, P = t.defenderIdsForPlay.slice(); S < P.length; S++) {
                      var I = P[S];
                      _ = _.push(I);
                    }
                    return _;
                  }))
              : f.isPartOfPlay &&
                (t.update('defenderIdsForPlay', function (_) {
                  _ = _.clear();
                  for (var S = 0, P = d.idsFromDefenders(e.defenders); S < P.length; S++) {
                    var I = P[S];
                    _ = _.push(I);
                  }
                  return _;
                }),
                t.update('defenderIdsAtPointOfDoublePlay', function (_) {
                  return _.clear();
                })),
            (e.defendersByEventInPlay = t.defendersByEventInPlay),
            (e.defenderIdsForPlay = t.defenderIdsForPlay),
            (e.defenderIdsAtPointOfDoublePlay = t.defenderIdsAtPointOfDoublePlay);
        }),
        (a.prototype.updateOutsOnPlay = function (n, e, t) {
          var d = this.situation.stateBeforeEvent(this.nextEventOffset),
            f = this.plays.stateAfterEvent(this.nextEventOffset);
          (0, p.manualInningAdvance)(n)
            ? t.set('outsOnPlay', 0)
            : f.isPartOfPlay && !f.eventStartsNewPlay
              ? t.set('outsOnPlay', t.outsOnPlay + e.outsOnEvent)
              : f.isPartOfPlay
                ? t.set('outsOnPlay', e.outsOnEvent)
                : d.lastEventEndedInning && t.set('outsOnPlay', 0),
            this.setEventPropertiesFromOwnState(t, e, 'outsOnPlay');
        }),
        (a.prototype.updateBaseRunning = function (n, e, t) {
          var d = this.baserunners.stateBeforeEvent(this.nextEventOffset),
            f = this.plays.stateAfterEvent(this.nextEventOffset);
          e.isEndOfAtBat &&
            t.update('baserunnersAfterLastBatterAtBatDone', function (I) {
              return I.set('1', d.baserunners[1])
                .set('2', d.baserunners[2])
                .set('3', d.baserunners[3]);
            });
          var _ = {
            1: t.baserunnersAfterLastBatterAtBatDone.get('1'),
            2: t.baserunnersAfterLastBatterAtBatDone.get('2'),
            3: t.baserunnersAfterLastBatterAtBatDone.get('3'),
          };
          if (f.isPartOfPlay && !f.eventStartsNewPlay) {
            var S = n,
              P = this.getBaseForRunner(S.attributes.runnerId, _);
            S.attributes.playType === 'out_on_last_play' &&
            S.attributes.base === P + 1 &&
            !t.batterOutOnCatchInPlay
              ? (t.set('forcedOutsOnPlay', t.forcedOutsOnPlay + e.outsOnEvent),
                t.set('forcedOutsOnEvent', e.outsOnEvent))
              : t.set('forcedOutsOnEvent', 0);
          } else
            (0, p.eventRelatesToAtBatTeam)(n) &&
              (t.set('forcedOutsOnPlay', e.outsOnEvent), t.set('forcedOutsOnEvent', e.outsOnEvent));
          (e.baserunnersAfterLastBatterAtBatDone = _),
            this.setEventPropertiesFromOwnState.apply(
              this,
              i.__spreadArray([t, e], ['forcedOutsOnPlay', 'forcedOutsOnEvent'], !1)
            );
        }),
        (a.prototype.updateLastBallInPlay = function (n, e, t) {
          var d = this.situation.stateBeforeEvent(this.nextEventOffset),
            f = this.baserunners.stateBeforeEvent(this.nextEventOffset);
          if (n.code === 'ball_in_play') {
            var _ = n.attributes.playType;
            t.set('lastBallInPlayResult', n.attributes.playResult),
              t.set('lastBallInPlayType', _),
              (!e.isError && !e.isKPassedBall) ||
              e.isSacrifice ||
              (d.outs < 2 && f.playerAtBase(3) !== void 0 && (0, p.isGroundType)(_))
                ? t.set('lastBallInPlayWasRBIEligible', !0)
                : t.set('lastBallInPlayWasRBIEligible', !1);
          } else
            n.code === 'base_running' &&
              !(0, p.baserunningRelatedToLastBIP)(n) &&
              (t.set('lastBallInPlayResult', void 0),
              t.set('lastBallInPlayType', void 0),
              t.set('lastBallInPlayWasRBIEligible', !1));
          this.setEventPropertiesFromOwnState.apply(
            this,
            i.__spreadArray(
              [t, e],
              ['lastBallInPlayResult', 'lastBallInPlayType', 'lastBallInPlayWasRBIEligible'],
              !1
            )
          );
        }),
        (a.prototype.updateLastBatterIds = function (n, e, t) {
          var d = this.situation.stateBeforeEvent(this.nextEventOffset),
            f = this.lineup.stateBeforeEvent(this.nextEventOffset);
          (n.code === 'pitch' ||
            n.code === 'end_at_bat' ||
            (n.code === 'ball_in_play' && n.attributes.playResult === 'other_out')) &&
            (t.set('lastBatterId', f.currentBatter(d.atBatTeamId)),
            t.set('lastBatterTeamId', d.atBatTeamId)),
            (e.lastBatter = { id: t.lastBatterId, teamId: t.lastBatterTeamId }),
            this.setEventPropertiesFromOwnState.apply(
              this,
              i.__spreadArray([t, e], ['lastBatterId', 'lastBatterTeamId'], !1)
            );
        }),
        (a.prototype.updatePlayerLOBIncrement = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          t.set('playerLOBIncrement', 0),
            e.code === 'base_running' &&
            e.attributes.baseRunningPlayType === 'advanced_on_last_play' &&
            n.attributes.base === 4 &&
            !(
              (0, p.isHitResult)(t.lastBallInPlayResult) ||
              (0, p.isSacrificeResult)(t.lastBallInPlayResult)
            )
              ? t.set('playerLOBIncrement', -1)
              : e.code === 'base_running' &&
                  ((e.attributes.baseRunningPlayType === 'did_not_score' &&
                    n.attributes.base === 4) ||
                    (e.attributes.baseRunningPlayType === 'remained_on_last_play' &&
                      n.attributes.base === 3)) &&
                  !(
                    (0, p.isHitResult)(t.lastBallInPlayResult) ||
                    (0, p.isSacrificeResult)(t.lastBallInPlayResult)
                  )
                ? t.set('playerLOBIncrement', 1)
                : ((e.isAtBat && !e.isHit) || d.lastEventWasStrikeout) &&
                  t.set(
                    'playerLOBIncrement',
                    e.numberOfBaserunnersAfterLastBatterAtBatDone -
                      t.scoresOnPlayAfterEachEvent.first()
                  ),
            this.setEventPropertiesFromOwnState(t, e, 'playerLOBIncrement');
        }),
        (a.prototype.updateQABForPlay = function (n, e, t) {
          var d = this.situation.stateAfterEvent(this.nextEventOffset);
          n.code === 'pitch' &&
            (t.have2Strikes && t.set('pitchesAfter2Strikes', t.pitchesAfter2Strikes + 1),
            d.strikes === 2 && t.set('have2Strikes', !0));
          var f = t.pitchesAfter2Strikes >= 3,
            _ = e.pitchesThisAtBat >= 6,
            S = _ || f || e.isGoodPlay || e.isHardHit;
          _ && t.sixPlusIncrementedForPlay === !1
            ? ((e.sixPlusIncrement = 1), t.set('sixPlusIncrementedForPlay', !0))
            : (e.sixPlusIncrement = 0),
            f && t.twoPlusThreeIncrementedForPlay === !1
              ? ((e.threeAfterTwoIncrement = 1), t.set('twoPlusThreeIncrementedForPlay', !0))
              : (e.threeAfterTwoIncrement = 0),
            S && t.qabIncrementedForPlay === !1
              ? ((e.qabIncrement = 1), t.set('qabIncrementedForPlay', !0))
              : (e.qabIncrement = 0),
            (d.lastEventEndedInning || e.isEndOfAtBat || (0, p.manualInningAdvance)(n)) &&
              (t.set('pitchesAfter2Strikes', 0),
              t.set('have2Strikes', !1),
              t.set('qabIncrementedForPlay', !1),
              t.set('twoPlusThreeIncrementedForPlay', !1),
              t.set('sixPlusIncrementedForPlay', !1));
        }),
        a
      );
    })(h.VersionedStateEngine);
    return (qt.StatEventsEngine = y), qt;
  }
  var lo = {},
    Br = {},
    Sd;
  function co() {
    if (Sd) return Br;
    (Sd = 1),
      Object.defineProperty(Br, '__esModule', { value: !0 }),
      (Br.stripNulls = Br.modularSlice = void 0);
    function i(r, p, v) {
      for (var h = [], s = p, l = 0; l < v; s = (s + 1) % r.length, ++l) h.push(r[s]);
      return h;
    }
    Br.modularSlice = i;
    function c(r) {
      return r.filter(function (p) {
        return p !== null;
      });
    }
    return (Br.stripNulls = c), Br;
  }
  var Pd;
  function Tr() {
    return (
      Pd ||
        ((Pd = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.SabertoothEventCompactor = i.ComponentStream = i.undoableEditTag = void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = c.__importStar(He()),
            v = co(),
            h = dt(),
            s;
          (function (y) {
            (y[(y.Insert = 0)] = 'Insert'), (y[(y.Delete = 1)] = 'Delete');
          })((s = i.undoableEditTag || (i.undoableEditTag = {})));
          var l = (function () {
            function y(o, a) {
              (this.identifier = o),
                (this.playCodeTransformer = a),
                (this.inStream = []),
                (this.outStream = []),
                (this.inIndexMap = {}),
                (this.outIndexMap = {}),
                (this.inEventIdToOutEventIdMap = {});
            }
            return (
              (y.prototype.push = function (o) {
                var a;
                (this.inIndexMap[o.id] = this.inStream.length), this.inStream.push(o);
                var n = this.handleEvent(o);
                return (
                  (this.inEventIdToOutEventIdMap[o.id] =
                    (a = this.outStream[this.outStream.length - 1]) === null || a === void 0
                      ? void 0
                      : a.id),
                  n
                );
              }),
              (y.prototype.outStreamIsEmpty = function () {
                return this.outStream.length === 0;
              }),
              (y.prototype.eventTargetedByUndoSubjectToBlacklist = function () {
                var o = this.eventTargetedByUndo();
                if (
                  o !== void 0 &&
                  (this.eventBlacklistedForUndo === void 0 || !this.eventBlacklistedForUndo(o))
                )
                  return o;
              }),
              (y.prototype.redoIsPossible = function () {
                return this.eventTargetedByRedo() !== void 0;
              }),
              (y.prototype.shouldIgnoreRedo = function () {
                var o = this.inStream.length - 1;
                return o < 0 ? !0 : this.inStream[o].code === 'redo';
              }),
              (y.prototype.eventTargetedByUndo = function (o) {
                for (
                  var a = 1, n = o ? this.inIndexMap[o.id] - 1 : this.inStream.length - 1, e = n;
                  e >= 0;
                  e--
                )
                  if (this.inStream[e].code === 'undo') a++;
                  else if ((a--, a === 0)) return this.inStream[e];
              }),
              (y.prototype.eventTargetedByRedo = function (o) {
                for (
                  var a = 1, n = o ? this.inIndexMap[o.id] - 1 : this.inStream.length - 1, e = n;
                  e >= 0;
                  e--
                )
                  if (this.inStream[e].code === 'redo') a++;
                  else if (this.inStream[e].code === 'undo') {
                    if ((a--, a === 0)) return this.inStream[e];
                  } else return;
              }),
              (y.prototype.ensureComponentStream = function (o) {
                o.compactorAttributes
                  ? (o.compactorAttributes.stream = this.identifier)
                  : (o.compactorAttributes = { stream: this.identifier });
              }),
              (y.prototype.ensureComponentStreams = function (o) {
                for (var a = 0, n = o; a < n.length; a++) {
                  var e = n[a];
                  this.ensureComponentStream(e);
                }
                return o;
              }),
              (y.prototype.pushToOutStream = function (o) {
                o.code === 'play' &&
                  this.playCodeTransformer &&
                  this.handlePlayCodeTransformation(o),
                  this.ensureComponentStream(o),
                  this.outStream.push(o);
              }),
              (y.prototype.pushToOutstream = function (o, a) {
                for (var n, e = 0, t = a; e < t.length; e++) {
                  var d = t[e];
                  d.code === 'play' &&
                    this.playCodeTransformer &&
                    this.handlePlayCodeTransformation(d);
                }
                (n = this.outStream).splice.apply(n, c.__spreadArray([o, 0], a, !1));
              }),
              (y.prototype.handleEvent = function (o) {
                switch (o.code) {
                  case 'insert':
                    return this.handleInsert(o);
                  case 'delete':
                    return this.handleDelete(o);
                  case 'replace':
                    return this.handleReplace(o);
                  case 'edit_group':
                    return this.handleEditGroup(o);
                  case 'transaction':
                    return this.handleTransaction(o);
                  case 'set_game_settings':
                    return this.handleSetGameSettings(o);
                  case 'undo':
                    var a = this.eventTargetedByUndo(o);
                    return a !== void 0 ? this.handleUndo(a) : String(this.outStream.length - 1);
                  case 'redo':
                    var n = this.eventTargetedByRedo(o);
                    return n !== void 0 ? this.handleRedo(n) : String(this.outStream.length - 1);
                  case 'play':
                    return this.pushEvent(o);
                  default:
                    return this.pushEvent(o);
                }
              }),
              (y.prototype.pushEvent = function (o) {
                return (
                  (this.outIndexMap[o.id] = this.outStream.length),
                  this.pushToOutStream(o),
                  String(this.outStream.length - 2)
                );
              }),
              (y.prototype.rebuildOutIndexMap = function (o) {
                for (var a = o + 1; a < this.outStream.length; a++)
                  this.outIndexMap[this.outStream[a].id] = Number(a);
              }),
              (y.prototype.handleInsert = function (o) {
                var a;
                if (o.beforeId !== void 0) a = this.outIndexMap[o.beforeId];
                else if (o.afterId !== void 0) a = this.outIndexMap[o.afterId] + 1;
                else
                  return (
                    console.log('Malformed insert command, either beforeId or afterId is required'),
                    String(this.outStream.length - 1)
                  );
                return (
                  this.pushToOutstream(a, this.ensureComponentStreams(o.events)),
                  this.rebuildOutIndexMap(a - 1),
                  String(a - 1)
                );
              }),
              (y.prototype.annotateEventWithDeleteEvents = function (o) {
                o.deleteEvents = [];
                for (var a = 0, n = o.deleteIds; a < n.length; a++) {
                  var e = n[a];
                  o.deleteEvents.push([this.outIndexMap[e], this.outStream[this.outIndexMap[e]]]);
                }
                o.deleteEvents = r.sortBy(o.deleteEvents, function (t) {
                  var d = t[0];
                  return t[1], -1 * d;
                });
              }),
              (y.prototype.annotateEventWithEditGroupUndoEvents = function (o) {
                o.edits = [];
                for (
                  var a = p.aggregateGroupableEvents(o.events), n = 0, e = a.deleteIds;
                  n < e.length;
                  n++
                ) {
                  var t = e[n],
                    d = this.outIndexMap[t],
                    f = this.outStream[d];
                  o.edits.push([s.Delete, d, [f]]);
                }
                for (var _ = 0, S = a.insertions; _ < S.length; _++) {
                  var P = S[_],
                    I = P[0],
                    b = P[1],
                    E = P[2],
                    T = b === p.Placement.Before ? 0 : 1,
                    F = this.outIndexMap[I] + T;
                  o.edits.push([s.Insert, F, E]);
                }
                o.edits = r.sortBy(o.edits, function (R) {
                  return -1 * R[1];
                });
              }),
              (y.prototype.handlePlayCodeTransformation = function (o) {
                var a,
                  n,
                  e = o.attributes,
                  t = e.play_code,
                  d = e.play_details;
                o.attributes.play_code =
                  (n =
                    (a = this.playCodeTransformer) === null || a === void 0
                      ? void 0
                      : a.transform(t, d)) !== null && n !== void 0
                    ? n
                    : t;
              }),
              (y.prototype.handleDelete = function (o) {
                this.annotateEventWithDeleteEvents(o);
                for (var a = 0, n = o.deleteEvents; a < n.length; a++) {
                  var e = n[a][0];
                  this.outStream.splice(e, 1);
                }
                var t = r.last(o.deleteEvents)[0] - 1;
                return this.rebuildOutIndexMap(t), String(t);
              }),
              (y.prototype.handleReplace = function (o) {
                var a = this.outIndexMap[o.deleteIds[0]];
                this.annotateEventWithDeleteEvents(o);
                for (var n = 0, e = o.deleteEvents; n < e.length; n++) {
                  var t = e[n][0];
                  this.outStream.splice(t, 1), t < a && a--;
                }
                this.pushToOutstream(a, this.ensureComponentStreams(o.events));
                var d = r.last(o.deleteEvents)[0] - 1;
                return this.rebuildOutIndexMap(d), String(d);
              }),
              (y.prototype.handleTransaction = function (o) {
                for (var a = 0, n = o.events; a < n.length; a++) {
                  var e = n[a];
                  (this.outIndexMap[e.id] = this.outStream.length), this.pushToOutStream(e);
                }
                return String(this.outStream.length - (1 + o.events.length));
              }),
              (y.prototype.handleSetGameSettings = function (o) {
                var a = this.outStream.findIndex(function (e) {
                    return e.code === 'set_game_settings';
                  }),
                  n = a - 1;
                return a !== -1
                  ? ((this.outStream[a] = o), this.rebuildOutIndexMap(n), String(n))
                  : (this.pushToOutStream(o), String(this.outStream.length - 2));
              }),
              (y.prototype.handleEditGroup = function (o) {
                var a = this.outStream.length;
                (o.events = (0, v.stripNulls)(o.events)),
                  this.annotateEventWithEditGroupUndoEvents(o);
                for (var n = 0, e = o.edits; n < e.length; n++) {
                  var t = e[n],
                    d = t[0],
                    f = t[1],
                    _ = t[2];
                  switch ((f < a && (a = f), d)) {
                    case s.Delete:
                      this.outStream.splice(f, _.length);
                      break;
                    case s.Insert:
                      this.pushToOutstream(f, this.ensureComponentStreams(_));
                      break;
                  }
                }
                return this.rebuildOutIndexMap(a - 1), String(a - 1);
              }),
              (y.prototype.handleUndo = function (o) {
                switch (o.code) {
                  case 'insert':
                    return this.undoInsert(o);
                  case 'delete':
                    return this.undoDelete(o);
                  case 'replace':
                    return this.undoReplace(o);
                  case 'transaction':
                    return this.undoTransaction(o);
                  case 'edit_group':
                    return this.undoEditGroup(o);
                  case 'redo':
                    return this.undoRedo(o);
                  case 'undo':
                    return (
                      console.log(
                        'Cannot call handleUndo on an undo event. Use redo instead. Illegal operation.'
                      ),
                      String(this.outStream.length - 1)
                    );
                  default:
                    return this.undoSabertoothEvent(o);
                }
              }),
              (y.prototype.undoSabertoothEvent = function (o) {
                var a = this.outIndexMap[o.id];
                return this.outStream.splice(a, 1), this.rebuildOutIndexMap(a - 1), String(a - 1);
              }),
              (y.prototype.undoInsert = function (o) {
                var a;
                if (o.beforeId !== void 0) a = this.outIndexMap[o.beforeId] - o.events.length;
                else if (o.afterId !== void 0) a = this.outIndexMap[o.afterId] + 1;
                else
                  return (
                    console.log('Malformed insert command, either beforeId or afterId is required'),
                    String(this.outStream.length - 1)
                  );
                return (
                  this.outStream.splice(a, o.events.length),
                  this.rebuildOutIndexMap(a - 1),
                  String(a - 1)
                );
              }),
              (y.prototype.undoDelete = function (o) {
                for (var a = o.deleteEvents.length - 1; a >= 0; a--) {
                  var n = o.deleteEvents[a],
                    e = n[0],
                    t = n[1];
                  this.pushToOutstream(e, [t]);
                }
                var d = r.last(o.deleteEvents)[0] - 1;
                return this.rebuildOutIndexMap(d), String(d);
              }),
              (y.prototype.undoReplace = function (o) {
                var a = this.outIndexMap[o.events[0].id];
                this.outStream.splice(a, o.events.length);
                for (var n = o.deleteEvents.length - 1; n >= 0; n--) {
                  var e = o.deleteEvents[n],
                    t = e[0],
                    d = e[1];
                  this.pushToOutstream(t, [d]);
                }
                var f = Math.min.apply(
                  Math,
                  c.__spreadArray(
                    [a - 1],
                    r.map(o.deleteEvents, function (_) {
                      return _[0] - 1;
                    }),
                    !1
                  )
                );
                return this.rebuildOutIndexMap(f), String(f);
              }),
              (y.prototype.undoEditGroup = function (o) {
                o.events = (0, v.stripNulls)(o.events);
                for (var a = this.outStream.length, n = o.edits.length - 1; n >= 0; n--) {
                  var e = o.edits[n],
                    t = e[0],
                    d = e[1],
                    f = e[2];
                  t === s.Delete
                    ? (this.pushToOutstream(d, f), (a = Math.min(d, a)))
                    : (this.outStream.splice(d, f.length), (a = Math.min(d, a)));
                }
                return this.rebuildOutIndexMap(a - 1), String(a - 1);
              }),
              (y.prototype.undoTransaction = function (o) {
                if (o.events.length === 0) return String(this.outStream.length - 1);
                var a = this.outIndexMap[o.events[0].id] - 1;
                return this.outStream.splice(a + 1, o.events.length), String(a);
              }),
              (y.prototype.undoRedo = function (o) {
                var a = this.eventTargetedByRedo(o);
                return a === void 0
                  ? (console.log('Attempted to undo an illegal redo. Illegal operation.'),
                    String(this.outStream.length - 1))
                  : this.handleEvent(a);
              }),
              (y.prototype.handleRedo = function (o) {
                if (o.code !== 'undo')
                  return (
                    console.log(
                      'Got a redo event following a '.concat(o.code, '. Illegal operation.')
                    ),
                    String(this.outStream.length - 1)
                  );
                var a = this.eventTargetedByUndo(o);
                return a === void 0
                  ? (console.log('Attempted to redo an illegal undo. Illegal operation.'),
                    String(this.outStream.length - 1))
                  : this.handleEvent(a);
              }),
              y
            );
          })();
          i.ComponentStream = l;
          var u = (function () {
            function y(o) {
              (this.transformer = o),
                (this.inStream = []),
                (this.componentStreams = {
                  head: new l('head', this.transformer),
                  main: new l('main', this.transformer),
                  tail: new l('tail', this.transformer),
                }),
                (this.outStream = []),
                (this.outIndexMap = {});
            }
            return (
              (y.prototype.push = function (o, a) {
                var n = this.targetedComponentStreamIdentifier(o),
                  e = this.componentStreams[n];
                if (o.code === 'undo') {
                  if (e.outStreamIsEmpty()) {
                    if (a === 'strictlyCheckUndoRedo')
                      throw new h.SabertoothError(
                        'undo_not_possible',
                        'Undo event was pushed to the compactor but there was nothing to undo'
                      );
                    return '-1';
                  } else if (e.eventTargetedByUndoSubjectToBlacklist() === void 0)
                    throw new h.SabertoothError(
                      'undo_not_possible',
                      'Undo event was pushed to the compactor but undo is not currently possible'
                    );
                } else if (o.code === 'redo' && !e.redoIsPossible()) {
                  if (e.shouldIgnoreRedo() && a !== 'strictlyCheckUndoRedo')
                    return String(e.outStream.length - 1);
                  throw new h.SabertoothError(
                    'redo_not_possible',
                    'Redo event was pushed to the compactor but there was nothing to redo'
                  );
                }
                this.inStream.push(o);
                var t = e.push(o);
                return this.reconcileOutStreamWithChanges(n, t);
              }),
              (y.prototype.clearScratch = function (o) {
                this.outStream.splice(this.outStream.length - o.length, o.length);
              }),
              (y.prototype.pushForScratch = function (o) {
                (this.outIndexMap[o.id] = this.outStream.length), this.outStream.push(o);
              }),
              (y.prototype.eventTargetedByUndoSubjectToBlacklist = function (o) {
                return this.componentStreams[o].eventTargetedByUndoSubjectToBlacklist();
              }),
              (y.prototype.redoIsPossible = function (o) {
                return this.componentStreams[o].redoIsPossible();
              }),
              (y.prototype.targetedComponentStreamIdentifier = function (o) {
                return o.compactorAttributes !== void 0 && o.compactorAttributes.stream !== void 0
                  ? o.compactorAttributes.stream
                  : 'main';
              }),
              (y.prototype.reconcileOutStreamWithChanges = function (o, a) {
                for (
                  var n, e, t = ['head', 'main', 'tail'], d = 0, f = 0, _ = r.clone(t);
                  f < _.length;
                  f++
                ) {
                  var S = _[f];
                  if (o === S) break;
                  t.splice(0, 1);
                  var P = this.componentStreams[S];
                  d += P.outStream.length;
                }
                (d += Number(a)), this.outStream.splice(d + 1, 1 / 0);
                for (var I = 0, b = t; I < b.length; I++) {
                  var S = b[I],
                    P = this.componentStreams[S];
                  P.outStream.length !== 0 &&
                    (S === o
                      ? (n = this.outStream).splice.apply(
                          n,
                          c.__spreadArray(
                            [this.outStream.length, 0],
                            P.outStream.slice(Number(a) + 1),
                            !1
                          )
                        )
                      : (e = this.outStream).splice.apply(
                          e,
                          c.__spreadArray([this.outStream.length, 0], P.outStream, !1)
                        ));
                }
                return this.rebuildOutIndexMap(d), String(d);
              }),
              (y.prototype.rebuildOutIndexMap = function (o) {
                for (var a = o + 1; a < this.outStream.length; a++)
                  this.outIndexMap[this.outStream[a].id] = Number(a);
              }),
              y
            );
          })();
          i.SabertoothEventCompactor = u;
        })(lo)),
      lo
    );
  }
  var Hn = {},
    Id;
  function Xy() {
    if (Id) return Hn;
    (Id = 1), Object.defineProperty(Hn, '__esModule', { value: !0 }), (Hn.applyMixins = void 0);
    function i(c, r) {
      r.forEach(function (p) {
        Object.getOwnPropertyNames(p.prototype).forEach(function (v) {
          c.prototype[v] = p.prototype[v];
        });
      });
    }
    return (Hn.applyMixins = i), Hn;
  }
  var Nn = {},
    jn = {},
    fo = {},
    md;
  function bd() {
    return (
      md ||
        ((md = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.getBaseRunningPlayType =
              i.getBallInPlayResult =
              i.getEquivalentPlays =
              i.getEquivalentPlayTypeForBaseRunningPlayType =
              i.getEquivalentPlayTypeForPbpPlayType =
              i.getSacBuntWithOutEvent =
              i.isPlaySacBuntWithOut =
              i.EquivalentPlays =
              i.EquivalentPlayType =
              i.lookupMapForEvents =
                void 0);
          var c = Q,
            r = c.__importStar(er()),
            p = er();
          function v(d) {
            for (var f = {}, _ = 0, S = d; _ < S.length; _++) {
              var P = S[_];
              f[P.id] = P;
            }
            return f;
          }
          i.lookupMapForEvents = v;
          var h;
          (function (d) {
            (d.Single = 'single'),
              (d.Error = 'error'),
              (d.FieldersChoice = 'fielders_choice'),
              (d.StolenBase = 'stolen_base'),
              (d.DefensiveIndifference = 'defensive_indifference'),
              (d.WildPitch = 'wild_pitch'),
              (d.PassedBall = 'passed_ball'),
              (d.AdvancedOnError = 'advanced_on_error'),
              (d.GroundOut = 'ground_out'),
              (d.SacBuntBatterOut = 'sacbunt_batter_out'),
              (d.Double = 'double'),
              (d.SinglePlusError = 'single_plus_error'),
              (d.FieldersChoicePlusError = 'fielders_choice_plus_error'),
              (d.TwoBaseError = 'two_base_error'),
              (d.OtherAdvanceToSecond = 'other_to_second'),
              (d.Triple = 'triple'),
              (d.SinglePlusTwoBaseError = 'single_plus_two_base_error'),
              (d.DoublePlusError = 'double_plus_error'),
              (d.ThreeBaseError = 'three_base_error'),
              (d.FieldersChoicePlusTwoBaseError = 'fielders_choice_plus_two_base_error'),
              (d.OtherAdvanceToThird = 'other_to_third'),
              (d.InsideTheParkHomerun = 'itp_homerun'),
              (d.SinglePlusThreeBaseError = 'single_plus_three_base_error'),
              (d.DoublePlusTwoBaseError = 'double_plus_two_base_error'),
              (d.TriplePlusError = 'triple_plus_error'),
              (d.FourBaseError = 'four_base_error'),
              (d.FieldersChoicePlusThreeBaseError = 'fielders_choice_plus_three_base_error'),
              (d.OtherAdvanceToHome = 'other_to_home');
          })((h = i.EquivalentPlayType || (i.EquivalentPlayType = {})));
          var s = (function () {
            function d() {}
            return (
              (d.SINGLE_ERROR = [h.Single, h.Error, h.FieldersChoice]),
              (d.DOUBLE = [
                h.Double,
                h.SinglePlusError,
                h.TwoBaseError,
                h.FieldersChoicePlusError,
                h.OtherAdvanceToSecond,
              ]),
              (d.TRIPLE = [
                h.Triple,
                h.SinglePlusTwoBaseError,
                h.DoublePlusError,
                h.ThreeBaseError,
                h.FieldersChoicePlusTwoBaseError,
                h.OtherAdvanceToThird,
              ]),
              (d.HOMERUN = [
                h.InsideTheParkHomerun,
                h.SinglePlusThreeBaseError,
                h.DoublePlusTwoBaseError,
                h.TriplePlusError,
                h.FourBaseError,
                h.FieldersChoicePlusThreeBaseError,
                h.OtherAdvanceToHome,
              ]),
              (d.STOLEN_BASE = [
                h.StolenBase,
                h.DefensiveIndifference,
                h.WildPitch,
                h.PassedBall,
                h.AdvancedOnError,
              ]),
              (d.GROUNDOUT = [h.GroundOut, h.SacBuntBatterOut]),
              (d.ALL = [d.SINGLE_ERROR, d.STOLEN_BASE, d.GROUNDOUT, d.DOUBLE, d.TRIPLE, d.HOMERUN]),
              d
            );
          })();
          i.EquivalentPlays = s;
          function l(d, f) {
            return u(d, f) !== void 0;
          }
          i.isPlaySacBuntWithOut = l;
          function u(d, f) {
            var _,
              S = f[d.result.eventId];
            if (S.code === 'ball_in_play' && S.attributes.playResult === 'sacrifice_bunt') {
              var P =
                  (_ = r.firstWithRoleToJS(d.participants, 'batter')) === null || _ === void 0
                    ? void 0
                    : _.playerId,
                I = d.baseRunningOnPlayEvents.find(function (b) {
                  var E = f[b.eventId].attributes;
                  return (
                    b.playType === 'out_on_last_play' &&
                    E.base === 1 &&
                    E.defenders.length === 0 &&
                    E.playType === 'out_on_last_play' &&
                    E.runnerId === P
                  );
                });
              if (I !== void 0) return f[I.eventId];
            }
          }
          i.getSacBuntWithOutEvent = u;
          function y(d, f, _, S) {
            var P = d.baseRunningOnPlayEvents.find(function (I) {
              var b = f[I.eventId].attributes;
              return b.base === S && b.runnerId === _;
            });
            if (P !== void 0) return f[P.eventId];
          }
          function o(d, f, _) {
            var S = (0, p.firstWithRoleToJS)(f.participants, 'batter');
            if (S !== void 0) {
              if (S.scored) {
                var P = y(f, _, S.playerId, 2),
                  I = y(f, _, S.playerId, 3),
                  b = y(f, _, S.playerId, 4);
                switch (d) {
                  case 'home_run':
                    {
                      var E = _[f.result.eventId];
                      if (
                        E !== void 0 &&
                        E.attributes.playResult === 'home_run' &&
                        E.attributes.hrLocation === 'in_the_park'
                      )
                        return h.InsideTheParkHomerun;
                    }
                    break;
                  case 'triple':
                    switch (b.attributes.playType) {
                      case 'on_same_error':
                      case 'advanced_on_error':
                        return h.TriplePlusError;
                      default:
                        return h.OtherAdvanceToHome;
                    }
                  case 'double':
                    switch (b.attributes.playType) {
                      case 'on_same_error':
                      case 'advanced_on_error':
                        return h.DoublePlusTwoBaseError;
                      default:
                        return h.OtherAdvanceToHome;
                    }
                  case 'fielders_choice':
                  case 'single':
                    return b.attributes.playType === 'on_same_error' ||
                      b.attributes.playType === 'advanced_on_error'
                      ? d === 'fielders_choice'
                        ? h.FieldersChoicePlusThreeBaseError
                        : h.SinglePlusThreeBaseError
                      : h.OtherAdvanceToHome;
                  case 'error':
                    return b.attributes.playType === 'on_same_error' &&
                      (I === void 0 || I.attributes.playType === 'on_same_error') &&
                      (P === void 0 || P.attributes.playType === 'on_same_error')
                      ? h.FourBaseError
                      : h.OtherAdvanceToHome;
                }
              }
              if (f.result.situation.bases[3] === S.playerId)
                switch (d) {
                  case 'triple':
                    return h.Triple;
                  case 'double':
                    {
                      var T = y(f, _, S.playerId, 3);
                      switch (T.attributes.playType) {
                        case 'on_same_error':
                        case 'advanced_on_error':
                          return h.DoublePlusError;
                        default:
                          return h.OtherAdvanceToThird;
                      }
                    }
                    break;
                  case 'fielders_choice':
                  case 'single': {
                    var I = y(f, _, S.playerId, 3);
                    return (I == null ? void 0 : I.attributes.playType) === 'on_same_error' ||
                      (I == null ? void 0 : I.attributes.playType) === 'advanced_on_error'
                      ? d === 'fielders_choice'
                        ? h.FieldersChoicePlusTwoBaseError
                        : h.SinglePlusTwoBaseError
                      : h.OtherAdvanceToThird;
                  }
                  case 'error': {
                    var P = y(f, _, S.playerId, 2),
                      I = y(f, _, S.playerId, 3);
                    return (I == null ? void 0 : I.attributes.playType) === 'on_same_error' &&
                      (P === void 0 || P.attributes.playType === 'on_same_error')
                      ? h.ThreeBaseError
                      : h.OtherAdvanceToThird;
                  }
                }
              if (f.result.situation.bases[2] === S.playerId) {
                var T = y(f, _, S.playerId, 2);
                switch (d) {
                  case 'double':
                    return h.Double;
                  case 'single':
                    switch (T == null ? void 0 : T.attributes.playType) {
                      case 'on_same_error':
                      case 'advanced_on_error':
                        return h.SinglePlusError;
                      default:
                        return h.OtherAdvanceToSecond;
                    }
                  case 'error':
                    switch (T == null ? void 0 : T.attributes.playType) {
                      case 'on_same_error':
                        return h.TwoBaseError;
                      default:
                        return h.OtherAdvanceToSecond;
                    }
                  case 'fielders_choice':
                    switch (T == null ? void 0 : T.attributes.playType) {
                      case 'on_same_error':
                      case 'advanced_on_error':
                        return h.FieldersChoicePlusError;
                      default:
                        return h.OtherAdvanceToSecond;
                    }
                }
              }
              switch (d) {
                case 'single':
                  return h.Single;
                case 'error':
                  return h.Error;
                case 'fielders_choice':
                  return h.FieldersChoice;
                case 'batter_out_advance_runners':
                  return h.GroundOut;
                case 'sacrifice_bunt':
                  return l(f, _) ? h.SacBuntBatterOut : void 0;
                default:
                  return;
              }
            }
          }
          i.getEquivalentPlayTypeForPbpPlayType = o;
          function a(d) {
            switch (d) {
              case 'stole_base':
                return h.StolenBase;
              case 'defensive_indifference':
                return h.DefensiveIndifference;
              case 'wild_pitch':
                return h.WildPitch;
              case 'passed_ball':
                return h.PassedBall;
              case 'advanced_on_error':
                return h.AdvancedOnError;
              default:
                return;
            }
          }
          i.getEquivalentPlayTypeForBaseRunningPlayType = a;
          function n(d) {
            for (var f = 0, _ = s.ALL; f < _.length; f++) {
              var S = _[f];
              if (d && S.includes(d))
                return S === s.DOUBLE
                  ? d === h.OtherAdvanceToSecond
                    ? S
                    : S.filter(function (P) {
                        return P !== h.OtherAdvanceToSecond;
                      })
                  : S === s.TRIPLE
                    ? d === h.OtherAdvanceToThird
                      ? S
                      : S.filter(function (P) {
                          return P !== h.OtherAdvanceToThird;
                        })
                    : S === s.HOMERUN
                      ? d === h.OtherAdvanceToHome
                        ? S
                        : S.filter(function (P) {
                            return P !== h.OtherAdvanceToHome;
                          })
                      : S;
            }
            return [];
          }
          i.getEquivalentPlays = n;
          function e(d) {
            switch (d) {
              case h.SinglePlusThreeBaseError:
              case h.SinglePlusTwoBaseError:
              case h.SinglePlusError:
              case h.Single:
                return 'single';
              case h.FourBaseError:
              case h.ThreeBaseError:
              case h.TwoBaseError:
              case h.Error:
                return 'error';
              case h.FieldersChoicePlusThreeBaseError:
              case h.FieldersChoicePlusTwoBaseError:
              case h.FieldersChoicePlusError:
              case h.FieldersChoice:
                return 'fielders_choice';
              case h.GroundOut:
                return 'batter_out_advance_runners';
              case h.SacBuntBatterOut:
                return 'sacrifice_bunt';
              case h.DoublePlusTwoBaseError:
              case h.DoublePlusError:
              case h.Double:
                return 'double';
              case h.TriplePlusError:
              case h.Triple:
                return 'triple';
              default:
                return;
            }
          }
          i.getBallInPlayResult = e;
          function t(d) {
            switch (d) {
              case h.StolenBase:
                return 'stole_base';
              case h.DefensiveIndifference:
                return 'defensive_indifference';
              case h.WildPitch:
                return 'wild_pitch';
              case h.PassedBall:
                return 'passed_ball';
              case h.SinglePlusError:
              case h.FieldersChoicePlusError:
              case h.DoublePlusError:
              case h.SinglePlusTwoBaseError:
              case h.FieldersChoicePlusTwoBaseError:
              case h.SinglePlusThreeBaseError:
              case h.FieldersChoicePlusThreeBaseError:
              case h.DoublePlusTwoBaseError:
              case h.TriplePlusError:
              case h.AdvancedOnError:
                return 'advanced_on_error';
              case h.FourBaseError:
              case h.ThreeBaseError:
              case h.TwoBaseError:
                return 'on_same_error';
              default:
                return;
            }
          }
          i.getBaseRunningPlayType = t;
        })(fo)),
      fo
    );
  }
  var Ed;
  function Zy() {
    if (Ed) return jn;
    (Ed = 1),
      Object.defineProperty(jn, '__esModule', { value: !0 }),
      (jn.renderForPlayDetail = void 0);
    var i = bd();
    function c(p) {
      var v = {};
      return (
        p.forEach(function (h, s) {
          return (v[h.id] = s);
        }),
        v
      );
    }
    function r(p, v, h) {
      var s = [],
        l = (0, i.lookupMapForEvents)(p),
        u = c(p),
        y = function (t) {
          var d = u[t],
            f = h.situation.stateBeforeEvent(d).atBatTeamId;
          return h.stateBeforeEvent(d).currentBatter(f);
        },
        o = v.pitches
          .map(function (t) {
            return y(t.eventId);
          })
          .concat([y(v.result.eventId)]),
        a = !1;
      if (!o.isEmpty) {
        var n = o[0];
        a = o.reduce(function (t, d) {
          return t || n !== d;
        }, !1);
      }
      v.childEvents.forEach(function (t) {
        if (t.code === 'base_running') {
          var d = l[t.eventId],
            f = (0, i.getEquivalentPlayTypeForBaseRunningPlayType)(d.attributes.playType);
          s.push({
            eventId: t.eventId,
            playType: d.attributes.playType,
            equivalentPlayType: f,
            equivalentPlays: (0, i.getEquivalentPlays)(f),
            participants: t.participants,
            headline: t.headline,
            template: t.template,
            writeInDescription: t.writeInDescription,
            situation: t.situation,
          });
        }
      });
      var e = (0, i.getEquivalentPlayTypeForPbpPlayType)(v.result.playType, v, l);
      return {
        atBat: v,
        equivalentPlayType: e,
        equivalentPlays: (0, i.getEquivalentPlays)(e),
        baseRunningEvents: s,
        containsBatterSubstitution: a,
      };
    }
    return (jn.renderForPlayDetail = r), jn;
  }
  var qn = {},
    Tt = {},
    Bd;
  function po() {
    if (Bd) return Tt;
    (Bd = 1),
      Object.defineProperty(Tt, '__esModule', { value: !0 }),
      (Tt.makeReplaceMetaEvent =
        Tt.makeInsertAfterMetaEvent =
        Tt.makeInsertBeforeMetaEvent =
        Tt.makeEditGroupMetaEvent =
          void 0);
    var i = Me(),
      c = co();
    function r(s) {
      return { id: (0, i.uuid4)(), code: 'edit_group', events: (0, c.stripNulls)(s) };
    }
    Tt.makeEditGroupMetaEvent = r;
    function p(s, l) {
      return { id: (0, i.uuid4)(), code: 'insert', beforeId: s, events: (0, c.stripNulls)([l]) };
    }
    Tt.makeInsertBeforeMetaEvent = p;
    function v(s, l) {
      return { id: (0, i.uuid4)(), code: 'insert', afterId: s, events: (0, c.stripNulls)([l]) };
    }
    Tt.makeInsertAfterMetaEvent = v;
    function h(s, l) {
      return { id: (0, i.uuid4)(), code: 'replace', deleteIds: s, events: (0, c.stripNulls)(l) };
    }
    return (Tt.makeReplaceMetaEvent = h), Tt;
  }
  var Td;
  function ev() {
    if (Td) return qn;
    (Td = 1), Object.defineProperty(qn, '__esModule', { value: !0 }), (qn.ResultPlayEdit = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(er()),
      p = er(),
      v = bd(),
      h = Me(),
      s = po(),
      l;
    (function (y) {
      (y.ImplicitlyScores = 'implicitly_scores'),
        (y.NeedsManualAdvancement = 'needs_manual_advancement'),
        (y.PreviouslyManuallyScored = 'previously_manually_scored');
    })(l || (l = {}));
    var u = (function () {
      function y() {}
      return (
        (y.makeReplacementEvent = function (o, a, n, e) {
          var t,
            d = (0, v.lookupMapForEvents)(e),
            f =
              (t = r.firstWithRoleToJS(n.participants, 'batter')) === null || t === void 0
                ? void 0
                : t.playerId;
          return v.EquivalentPlays.DOUBLE.includes(a)
            ? this.getDoubleReplacementMetaEvent(d, o, f, a, n)
            : v.EquivalentPlays.TRIPLE.includes(a)
              ? this.getTripleReplacementMetaEvent(d, o, f, a, n)
              : v.EquivalentPlays.HOMERUN.includes(a)
                ? this.getHomerunReplacementMetaEvent(d, o, f, a, n)
                : (0, s.makeEditGroupMetaEvent)([
                    this.getSingleEventReplacementMetaEvent(d, o, f, a, n),
                  ]);
        }),
        (y.getSingleEventReplacementMetaEvent = function (o, a, n, e, t) {
          var d = o[a],
            f = y.makeEvents(d, e, n);
          if (f !== void 0) {
            var _ = y.getDeleteEventIds(d, t, o);
            return {
              id: (0, h.uuid4)(),
              code: 'replace',
              deleteIds: _,
              events: f,
              compactorAttributes: { stream: 'main' },
            };
          }
        }),
        (y.getRunnerResult = function (o, a) {
          var n = a.initialSituation.bases;
          a.childEvents.length > 0 && (n = a.childEvents[a.childEvents.length - 1].situation.bases);
          var e = n[o];
          if (e !== void 0) {
            var t = (0, p.firstParticipantWithIdToJS)(a.participants, e);
            if (t === void 0) throw 'was not able to find participant record for '.concat(e);
            return { playerId: e, base: t.base, out: t.out, scored: t.scored };
          }
        }),
        (y.lastBaserunningEvent = function (o, a, n, e, t) {
          var d = i
            .__spreadArray([], a.baseRunningOnPlayEvents, !0)
            .reverse()
            .find(function (_) {
              var S = (0, p.firstWithRoleToJS)(_.participants, 'runner');
              return _.eventId !== t && S !== void 0 && S.playerId === o;
            });
          if (d === void 0) {
            if (e === void 0) return;
            throw 'Could not find baserunning event for runner '.concat(o);
          }
          var f = n[d.eventId];
          if (f === void 0)
            throw 'Could not find baserunning event '.concat(d.eventId, ' for runner ').concat(o);
          if (e !== void 0 && f.attributes.playType !== e)
            throw 'BaserunningEvent had playType '
              .concat(f.attributes.playType, ' instead of expected ')
              .concat(e);
          return f;
        }),
        (y.lastBaserunningEventIdNotInvolvingBatter = function (o, a) {
          var n = i
            .__spreadArray([], a.baseRunningOnPlayEvents, !0)
            .reverse()
            .find(function (e) {
              var t = (0, p.firstWithRoleToJS)(e.participants, 'runner');
              return t === void 0 || t.playerId !== o;
            });
          return n == null ? void 0 : n.eventId;
        }),
        (y.getDoubleReplacementMetaEvent = function (o, a, n, e, t) {
          var d = this.getRunnerResult(1, t),
            f = this.getRunnerResult(2, t),
            _ = this.getRunnerResult(3, t),
            S = [],
            P = [];
          if (e === v.EquivalentPlayType.OtherAdvanceToSecond)
            throw 'Can only change from an otherAdvanceToSecond. Changing to is not permitted.';
          if (e === v.EquivalentPlayType.Double) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (M) {
                  return M.eventId;
                })
              );
            var I = o[a];
            if (
              (P.push(this.cloneBallInPlayEvent(I, I.attributes.playType, 'double')), _ !== void 0)
            )
              if (_.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: _,
                    implicitEndingBase: 4,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: _,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            if (f !== void 0)
              if (f.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: f,
                    implicitEndingBase: 4,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            if (d !== void 0)
              if (d.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: d,
                    implicitEndingBase: 3,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.PreviouslyManuallyScored,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            return (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)]);
          } else if (t.result.playType === 'double') {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (J) {
                  return J.eventId;
                })
              );
            var I = o[a];
            if (
              (P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              ),
              _ !== void 0)
            )
              if (_.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: _,
                    implicitEndingBase: 4,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: _,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            if (f !== void 0)
              if (f.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: f,
                    implicitEndingBase: 3,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            if (d !== void 0)
              if (d.base === 3)
                P.push.apply(
                  P,
                  this.getEventsForRunnerAtThird({
                    createdAt: I.createdAt,
                    runnerResult: d,
                    implicitEndingBase: 2,
                    baseEventsMap: o,
                    atBat: t,
                  })
                );
              else {
                var b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.PreviouslyManuallyScored,
                  baseEventsMap: o,
                  atBat: t,
                });
                b !== void 0 && P.push(b);
              }
            return (
              P.push(
                this.makeBaseRunningEvent({
                  runnerId: n,
                  base: 2,
                  playType: (0, v.getBaseRunningPlayType)(e),
                  createdAt: I.createdAt,
                })
              ),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else {
            S.push(a), S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
            var I = o[a],
              E = this.cloneBallInPlayEvent(
                I,
                I.attributes.playType,
                (0, v.getBallInPlayResult)(e)
              ),
              T = this.lastBaserunningEvent(n, t, o);
            if (T === void 0) throw 'Could not find baserunnerEvent for '.concat(n, '.');
            var F = this.getBaserunningEventToAdvanceBatter(n, e, 2, o, t),
              R = this.lastBaserunningEventIdNotInvolvingBatter(n, t);
            if (R === void 0) {
              var L = (0, s.makeReplaceMetaEvent)(S, [E, F]);
              return (0, s.makeEditGroupMetaEvent)([L]);
            } else {
              var x = (0, s.makeReplaceMetaEvent)(S, [E]),
                N = (0, s.makeInsertAfterMetaEvent)(R, F);
              return (0, s.makeEditGroupMetaEvent)([x, N]);
            }
          }
        }),
        (y.getEventsForRunnerAtThird = function (o) {
          var a = o.createdAt,
            n = o.runnerResult,
            e = o.implicitEndingBase,
            t = o.baseEventsMap,
            d = o.atBat,
            f = [],
            _;
          if (
            (n.out &&
              ((_ = this.lastBaserunningEvent(n.playerId, d, t, 'out_on_last_play')), f.push(_)),
            e === 4)
          ) {
            var S = this.lastBaserunningEvent(n.playerId, d, t, void 0, _ == null ? void 0 : _.id);
            S !== void 0 && S.attributes.playType === 'remained_on_last_play'
              ? f.unshift(S)
              : f.unshift(
                  this.makeRemainedOnLastPlay({ base: 3, runnerId: n.playerId, createdAt: a })
                );
          } else
            e === 2 &&
              (n.out ||
                f.unshift(
                  this.makeAdvancedOnLastPlay({ base: 3, runnerId: n.playerId, createdAt: a })
                ));
          return f;
        }),
        (y.getNewEventForRunnerAtHome = function (o) {
          var a = o.createdAt,
            n = o.runnerResult,
            e = o.newRunnerState,
            t = o.baseEventsMap,
            d = o.atBat;
          if (n !== void 0) {
            if (n.out) return this.lastBaserunningEvent(n.playerId, d, t, 'out_on_last_play');
            if (n.scored)
              switch (e) {
                case l.ImplicitlyScores:
                  break;
                case l.NeedsManualAdvancement:
                  return this.makeAdvancedOnLastPlay({
                    base: 4,
                    runnerId: n.playerId,
                    createdAt: a,
                  });
                case l.PreviouslyManuallyScored:
                  var f = this.lastBaserunningEvent(n.playerId, d, t);
                  if (f !== void 0 && f.attributes.base === 4) return f;
                  throw 'Illegal state. runner supposedly scored, but could not find previousEvent at home.';
              }
            else {
              var _ = this.lastBaserunningEvent(n.playerId, d, t);
              if (_ !== void 0 && _.attributes.playType === 'did_not_score') return _;
              throw 'Illegal state. runner was on '.concat(n.base, ' was safe and did not score.');
            }
          }
        }),
        (y.getTripleReplacementMetaEvent = function (o, a, n, e, t) {
          var d = this.getRunnerResult(1, t),
            f = this.getRunnerResult(2, t),
            _ = this.getRunnerResult(3, t),
            S = [],
            P = [];
          if (e === v.EquivalentPlayType.OtherAdvanceToThird)
            throw 'Can only change from an otherAdvanceToThird. Changing to is not permitted.';
          if (e === v.EquivalentPlayType.Triple) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (M) {
                  return M.eventId;
                })
              );
            var I = o[a];
            P.push(this.cloneBallInPlayEvent(I, I.attributes.playType, 'triple'));
            var b = this.getNewEventForRunnerAtHome({
              createdAt: I.createdAt,
              runnerResult: _,
              newRunnerState: l.ImplicitlyScores,
              baseEventsMap: o,
              atBat: t,
            });
            return (
              b !== void 0 && P.push(b),
              (b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: f,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              b !== void 0 && P.push(b),
              (b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: d,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              b !== void 0 && P.push(b),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else if (t.result.playType === 'triple') {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (J) {
                  return J.eventId;
                })
              );
            var I = o[a];
            if (
              (P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              ),
              e === v.EquivalentPlayType.DoublePlusError)
            ) {
              var b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b);
            } else {
              var b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b);
            }
            return (
              P.push(
                this.makeBaseRunningEvent({
                  runnerId: n,
                  base: 3,
                  playType: (0, v.getBaseRunningPlayType)(e),
                  createdAt: I.createdAt,
                })
              ),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else if (t.result.playType === 'double') {
            if (e === v.EquivalentPlayType.DoublePlusError) {
              S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
              var E = this.lastBaserunningEvent(n, t, o);
              if (E === void 0) throw 'Could not find baserunnerEvent for '.concat(n, '.');
              var T = void 0;
              E.attributes.playType === 'advanced_on_error' ||
              E.attributes.playType === 'on_same_error'
                ? (T = E)
                : (T = this.makeAdvancedOnError({ base: 3, runnerId: n, createdAt: E.createdAt }));
              var F = (0, s.makeReplaceMetaEvent)(S, [T]);
              return (0, s.makeEditGroupMetaEvent)([F]);
            } else {
              S.push(a),
                S.push.apply(
                  S,
                  t.baseRunningOnPlayEvents.map(function (D) {
                    return D.eventId;
                  })
                );
              var I = o[a];
              P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              );
              var b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b),
                (b = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.PreviouslyManuallyScored,
                  baseEventsMap: o,
                  atBat: t,
                })),
                b !== void 0 && P.push(b),
                P.push(this.getBaserunningEventToAdvanceBatter(n, e, 3, o, t));
            }
            return (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)]);
          } else if (e === v.EquivalentPlayType.DoublePlusError) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (D) {
                  return D.eventId;
                })
              );
            var I = o[a];
            P.push(
              this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
            );
            var b = this.getNewEventForRunnerAtHome({
              createdAt: I.createdAt,
              runnerResult: _,
              newRunnerState: l.ImplicitlyScores,
              baseEventsMap: o,
              atBat: t,
            });
            return (
              b !== void 0 && P.push(b),
              (b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: f,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              b !== void 0 && P.push(b),
              (b = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: d,
                newRunnerState: l.PreviouslyManuallyScored,
                baseEventsMap: o,
                atBat: t,
              })),
              b !== void 0 && P.push(b),
              P.push(this.getBaserunningEventToAdvanceBatter(n, e, 3, o, t)),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else {
            S.push(a), S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
            var I = o[a],
              R = this.cloneBallInPlayEvent(
                I,
                I.attributes.playType,
                (0, v.getBallInPlayResult)(e)
              ),
              E = this.lastBaserunningEvent(n, t, o);
            if (E === void 0) throw 'Could not find baserunnerEvent for '.concat(n, '.');
            var T = this.getBaserunningEventToAdvanceBatter(n, e, 3, o, t),
              L = this.lastBaserunningEventIdNotInvolvingBatter(n, t);
            if (L === void 0) {
              var F = (0, s.makeReplaceMetaEvent)(S, [R, T]);
              return (0, s.makeEditGroupMetaEvent)([F]);
            } else {
              var x = (0, s.makeReplaceMetaEvent)(S, [R]),
                N = (0, s.makeInsertAfterMetaEvent)(L, T);
              return (0, s.makeEditGroupMetaEvent)([x, N]);
            }
          }
        }),
        (y.getHomerunReplacementMetaEvent = function (o, a, n, e, t) {
          var d = this.getRunnerResult(1, t),
            f = this.getRunnerResult(2, t),
            _ = this.getRunnerResult(3, t),
            S = [],
            P = [];
          if (e === v.EquivalentPlayType.OtherAdvanceToHome)
            throw 'Can only change from an otherAdvanceToHome. Changing to is not permitted.';
          if (e === v.EquivalentPlayType.InsideTheParkHomerun) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (J) {
                  return J.eventId;
                })
              );
            var I = o[a],
              b = this.cloneBallInPlayEvent(I, I.attributes.playType, 'home_run');
            (b.attributes.hrLocation = 'in_the_park'), P.push(b);
            var E = this.getNewEventForRunnerAtHome({
              createdAt: I.createdAt,
              runnerResult: _,
              newRunnerState: l.ImplicitlyScores,
              baseEventsMap: o,
              atBat: t,
            });
            return (
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: f,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: d,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else if (t.result.playType === 'home_run') {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function (D) {
                  return D.eventId;
                })
              );
            var I = o[a];
            if (
              (P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              ),
              e === v.EquivalentPlayType.TriplePlusError)
            ) {
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E);
            } else if (e === v.EquivalentPlayType.DoublePlusTwoBaseError) {
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E);
            } else {
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E);
            }
            return (
              P.push(
                this.makeBaseRunningEvent({
                  runnerId: n,
                  base: 4,
                  playType: (0, v.getBaseRunningPlayType)(e),
                  createdAt: I.createdAt,
                })
              ),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else if (t.result.playType === 'triple') {
            if (e === v.EquivalentPlayType.TriplePlusError) {
              S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
              var T = this.lastBaserunningEvent(n, t, o);
              if (T === void 0) throw 'Could not find baserunnerEvent for '.concat(n, '.');
              var F = void 0;
              T.attributes.playType === 'advanced_on_error' ||
              T.attributes.playType === 'on_same_error'
                ? (F = T)
                : (F = this.makeAdvancedOnError({ base: 4, runnerId: n, createdAt: T.createdAt }));
              var R = (0, s.makeReplaceMetaEvent)(S, [F]);
              return (0, s.makeEditGroupMetaEvent)([R]);
            } else if (e === v.EquivalentPlayType.DoublePlusTwoBaseError) {
              S.push(a),
                S.push.apply(
                  S,
                  t.baseRunningOnPlayEvents.map(function ($) {
                    return $.eventId;
                  })
                );
              var I = o[a];
              P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              );
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t));
            } else {
              S.push(a),
                S.push.apply(
                  S,
                  t.baseRunningOnPlayEvents.map(function ($) {
                    return $.eventId;
                  })
                );
              var I = o[a];
              P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              );
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t));
            }
            return (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)]);
          } else if (t.result.playType === 'double') {
            if (e === v.EquivalentPlayType.TriplePlusError) {
              S.push(a),
                S.push.apply(
                  S,
                  t.baseRunningOnPlayEvents.map(function ($) {
                    return $.eventId;
                  })
                );
              var I = o[a];
              P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              );
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.ImplicitlyScores,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t));
            } else if (e === v.EquivalentPlayType.DoublePlusTwoBaseError) {
              S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
              var T = this.lastBaserunningEvent(n, t, o);
              if (T === void 0) throw 'Could not find baserunnerEvent for '.concat(n, '.');
              var F = void 0;
              T.attributes.playType === 'advanced_on_error' ||
              T.attributes.playType === 'on_same_error'
                ? (F = T)
                : (F = this.makeAdvancedOnError({ base: 4, runnerId: n, createdAt: T.createdAt }));
              var R = (0, s.makeReplaceMetaEvent)(S, [F]);
              return (0, s.makeEditGroupMetaEvent)([R]);
            } else {
              S.push(a),
                S.push.apply(
                  S,
                  t.baseRunningOnPlayEvents.map(function ($) {
                    return $.eventId;
                  })
                );
              var I = o[a];
              P.push(
                this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
              );
              var E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: _,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              });
              E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: f,
                  newRunnerState: l.NeedsManualAdvancement,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                (E = this.getNewEventForRunnerAtHome({
                  createdAt: I.createdAt,
                  runnerResult: d,
                  newRunnerState: l.PreviouslyManuallyScored,
                  baseEventsMap: o,
                  atBat: t,
                })),
                E !== void 0 && P.push(E),
                P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t));
            }
            return (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)]);
          } else if (e === v.EquivalentPlayType.TriplePlusError) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function ($) {
                  return $.eventId;
                })
              );
            var I = o[a];
            P.push(
              this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
            );
            var E = this.getNewEventForRunnerAtHome({
              createdAt: I.createdAt,
              runnerResult: _,
              newRunnerState: l.ImplicitlyScores,
              baseEventsMap: o,
              atBat: t,
            });
            return (
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: f,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: d,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t)),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else if (e === v.EquivalentPlayType.DoublePlusTwoBaseError) {
            S.push(a),
              S.push.apply(
                S,
                t.baseRunningOnPlayEvents.map(function ($) {
                  return $.eventId;
                })
              );
            var I = o[a];
            P.push(
              this.cloneBallInPlayEvent(I, I.attributes.playType, (0, v.getBallInPlayResult)(e))
            );
            var E = this.getNewEventForRunnerAtHome({
              createdAt: I.createdAt,
              runnerResult: _,
              newRunnerState: l.ImplicitlyScores,
              baseEventsMap: o,
              atBat: t,
            });
            return (
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: f,
                newRunnerState: l.ImplicitlyScores,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              (E = this.getNewEventForRunnerAtHome({
                createdAt: I.createdAt,
                runnerResult: d,
                newRunnerState: l.PreviouslyManuallyScored,
                baseEventsMap: o,
                atBat: t,
              })),
              E !== void 0 && P.push(E),
              P.push(this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t)),
              (0, s.makeEditGroupMetaEvent)([(0, s.makeReplaceMetaEvent)(S, P)])
            );
          } else {
            S.push(a), S.push.apply(S, this.getBaserunningEventIdsInvolvingPlayer(t, n));
            var I = o[a],
              L = this.cloneBallInPlayEvent(
                I,
                I.attributes.playType,
                (0, v.getBallInPlayResult)(e)
              ),
              F = this.getBaserunningEventToAdvanceBatter(n, e, 4, o, t),
              x = this.lastBaserunningEventIdNotInvolvingBatter(n, t);
            if (x === void 0) {
              var R = (0, s.makeReplaceMetaEvent)(S, [L, F]);
              return (0, s.makeEditGroupMetaEvent)([R]);
            } else {
              var N = (0, s.makeReplaceMetaEvent)(S, [L]),
                M = (0, s.makeInsertAfterMetaEvent)(x, F);
              return (0, s.makeEditGroupMetaEvent)([N, M]);
            }
          }
        }),
        (y.getBaserunningEventToAdvanceBatter = function (o, a, n, e, t) {
          var d = this.lastBaserunningEvent(o, t, e);
          if (d === void 0) throw 'Could not find baserunnerEvent for '.concat(o, '.');
          var f;
          switch (a) {
            case v.EquivalentPlayType.TriplePlusError:
            case v.EquivalentPlayType.DoublePlusTwoBaseError:
            case v.EquivalentPlayType.SinglePlusThreeBaseError:
            case v.EquivalentPlayType.FieldersChoicePlusThreeBaseError:
            case v.EquivalentPlayType.DoublePlusError:
            case v.EquivalentPlayType.SinglePlusTwoBaseError:
            case v.EquivalentPlayType.FieldersChoicePlusTwoBaseError:
            case v.EquivalentPlayType.SinglePlusError:
            case v.EquivalentPlayType.FieldersChoicePlusError:
              d.attributes.playType === 'advanced_on_error'
                ? (f = d)
                : (f = this.makeAdvancedOnError({ base: n, runnerId: o, createdAt: d.createdAt }));
              break;
            case v.EquivalentPlayType.FourBaseError:
            case v.EquivalentPlayType.ThreeBaseError:
            case v.EquivalentPlayType.TwoBaseError:
              d.attributes.playType === 'on_same_error'
                ? (f = d)
                : (f = this.makeAdvancedOnSameError({
                    base: n,
                    runnerId: o,
                    createdAt: d.createdAt,
                  }));
              break;
            default:
              throw 'Cannot change to '.concat(
                a,
                ' at this point. Should have been taken care of earlier.'
              );
          }
          return f;
        }),
        (y.getDeleteEventIds = function (o, a, n) {
          if (o.code === 'ball_in_play') {
            var e = (0, v.getSacBuntWithOutEvent)(a, n);
            if (e !== void 0) return [o.id, e.id];
          }
          return [o.id];
        }),
        (y.getBaserunningEventIdsInvolvingPlayer = function (o, a) {
          return o.baseRunningOnPlayEvents
            .filter(function (n) {
              return (0, p.firstParticipantWithIdToJS)(n.participants, a) !== void 0;
            })
            .map(function (n) {
              return n.eventId;
            });
        }),
        (y.makeEvents = function (o, a, n) {
          switch (o.code) {
            case 'ball_in_play':
              return y.makeBallInPlayReplacement(o, a, n);
            case 'base_running':
              return y.makeBaseRunningReplacement(o, a);
            default:
              return;
          }
        }),
        (y.makeBallInPlayReplacement = function (o, a, n) {
          var e = (0, v.getBallInPlayResult)(a);
          if (e !== void 0) {
            var t = (0, v.getEquivalentPlays)(a),
              d = o.attributes.playResult;
            if (!(d === e || !c.contains(t, a)))
              switch (a) {
                case v.EquivalentPlayType.Single:
                case v.EquivalentPlayType.Error:
                case v.EquivalentPlayType.FieldersChoice:
                  return [y.cloneBallInPlayEvent(o, o.attributes.playType, e)];
                case v.EquivalentPlayType.GroundOut:
                  return [y.cloneBallInPlayEvent(o, 'ground_ball', e)];
                case v.EquivalentPlayType.SacBuntBatterOut:
                  return [
                    y.cloneBallInPlayEvent(o, 'bunt', e),
                    y.makeOutOnLastPlayEventAtFirst({ batter: n, createdAt: o.createdAt }),
                  ];
                default:
                  return;
              }
          }
        }),
        (y.cloneBallInPlayEvent = function (o, a, n) {
          return {
            id: (0, h.uuid4)(),
            code: 'ball_in_play',
            createdAt: o.createdAt,
            attributes: {
              playType: a,
              playResult: n,
              defenders: o.attributes.defenders,
              playFlavor: o.attributes.playFlavor,
              ballWasCaught: o.attributes.ballWasCaught,
            },
          };
        }),
        (y.makeBaseRunningEvent = function (o) {
          var a = o.runnerId,
            n = o.base,
            e = o.playType,
            t = o.createdAt;
          return {
            id: (0, h.uuid4)(),
            code: 'base_running',
            createdAt: t,
            attributes: { base: n, defenders: [], playType: e, runnerId: a },
          };
        }),
        (y.makeOutOnLastPlayEventAtFirst = function (o) {
          var a = o.batter,
            n = o.createdAt;
          return this.makeBaseRunningEvent({
            runnerId: a,
            base: 1,
            playType: 'out_on_last_play',
            createdAt: n,
          });
        }),
        (y.makeAdvancedOnLastPlay = function (o) {
          var a = o.base,
            n = o.runnerId,
            e = o.createdAt;
          return this.makeBaseRunningEvent({
            runnerId: n,
            base: a,
            playType: 'advanced_on_last_play',
            createdAt: e,
          });
        }),
        (y.makeRemainedOnLastPlay = function (o) {
          var a = o.base,
            n = o.runnerId,
            e = o.createdAt;
          return this.makeBaseRunningEvent({
            runnerId: n,
            base: a,
            playType: 'remained_on_last_play',
            createdAt: e,
          });
        }),
        (y.makeAdvancedOnError = function (o) {
          var a = o.base,
            n = o.runnerId,
            e = o.createdAt;
          return this.makeBaseRunningEvent({
            runnerId: n,
            base: a,
            playType: 'advanced_on_error',
            createdAt: e,
          });
        }),
        (y.makeAdvancedOnSameError = function (o) {
          var a = o.base,
            n = o.runnerId,
            e = o.createdAt;
          return this.makeBaseRunningEvent({
            runnerId: n,
            base: a,
            playType: 'on_same_error',
            createdAt: e,
          });
        }),
        (y.makeBaseRunningReplacement = function (o, a) {
          var n = (0, v.getBaseRunningPlayType)(a);
          if (n !== void 0) {
            var e = (0, v.getEquivalentPlays)(a),
              t = o.attributes.playType;
            if (!(t === n || !c.contains(e, a)))
              return [
                {
                  id: (0, h.uuid4)(),
                  code: 'base_running',
                  createdAt: o.createdAt,
                  attributes: {
                    playType: n,
                    playFlavor: o.attributes.playFlavor,
                    base: o.attributes.base,
                    runnerId: o.attributes.runnerId,
                    defenders: o.attributes.defenders,
                  },
                },
              ];
          }
        }),
        y
      );
    })();
    return (qn.ResultPlayEdit = u), qn;
  }
  var ho = {},
    Un = {},
    Od;
  function Ad() {
    if (Od) return Un;
    (Od = 1), Object.defineProperty(Un, '__esModule', { value: !0 }), (Un.asTuple = void 0);
    var i = function (c) {
      return c;
    };
    return (Un.asTuple = i), Un;
  }
  var Rd;
  function tv() {
    return (
      Rd ||
        ((Rd = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.calculateGameResult =
              i.Frame =
              i.prepareStats =
              i.prepareScore =
              i.generateFrameEnd =
              i.generateLineup =
              i.generateGameState =
              i.generateBatterIntro =
              i.generateInningEnd =
              i.generateGameEnd =
              i.generateInningIntro =
              i.generateGameIntro =
              i.generateScore =
              i.generateSituation =
              i.generateCount =
              i.generateAnnouncements =
                void 0);
          var c = Q,
            r = c.__importStar(Mi()),
            p = c.__importStar(Se),
            v = c.__importStar(Qc()),
            h = Ad(),
            s = _r();
          function l(T) {
            return {
              count: u(T),
              situation: y(T),
              score: o(T) + '.',
              gameIntro: a(T),
              inningIntro: n(T),
              gameEnd: e(T),
              inningEnd: t(T),
              batterIntro: d(T),
              gameState: f(T),
            };
          }
          i.generateAnnouncements = l;
          function u(T) {
            var F = T.balls === 0 ? 'oh' : T.balls.toString(),
              R = T.strikes === 0 ? 'oh' : T.strikes.toString();
            return 'The count is '.concat(F, ' and ').concat(R, '.');
          }
          i.generateCount = u;
          function y(T) {
            var F =
                T.runnersOnBase === 0 ? 'The bases are empty' : ''.concat(T.runnersOnBase, ' on'),
              R = T.outs === 0 ? 'no-one out' : ''.concat(T.outs, ' out');
            return ''.concat(F, ', ').concat(R, '.');
          }
          i.generateSituation = y;
          function o(T) {
            var F = (0, i.prepareScore)(T);
            return ''
              .concat(F[0].stub, ', ')
              .concat(F[0].runs, '; ')
              .concat(F[1].stub, ', ')
              .concat(F[1].runs);
          }
          i.generateScore = o;
          function a(T) {
            var F = r.stubbify(T.awayTeamId),
              R = r.stubbify(T.homeTeamId);
            return "Top of the 1st, it's ".concat(F, ' vs. ').concat(R, '.');
          }
          i.generateGameIntro = a;
          function n(T) {
            var F = T.half,
              R = r.ordinalNumber(T.inning),
              L = o(T);
            return "It's the ".concat(F, ' of the ').concat(R, ', ').concat(L, '.');
          }
          i.generateInningIntro = n;
          function e(T) {
            var F = (0, i.calculateGameResult)(T) === 'tie',
              R = p.sortBy((0, i.prepareScore)(T), function (L) {
                return -1 * L.runs;
              });
            return F
              ? "That's the end of the game, "
                  .concat(R[0].stub, ' and ')
                  .concat(R[1].stub, ' tie ')
                  .concat(R[0].runs, ' to ')
                  .concat(R[1].runs, '.')
              : "That's the end of the game, "
                  .concat(R[0].stub, ' get the win over ')
                  .concat(R[1].stub, ' ')
                  .concat(R[0].runs, ' to ')
                  .concat(R[1].runs, '.');
          }
          i.generateGameEnd = e;
          function t(T) {
            var F = new b(T.inning, T.half).predecessor;
            if (!v.maybeIsSet(F)) return '';
            var R = v.valueFromMaybe(F),
              L = [S(R, T), o(T), _(T)];
            return p.compact(L).join('; ') + '.';
          }
          i.generateInningEnd = t;
          function d(T) {
            var F = T.currentBatter;
            if (F.playerId === void 0) return '';
            var R = ''.concat(r.stubbify(F.playerId), ' steps up to the plate');
            if (F.statAtBats !== void 0) {
              var L = F.statHits === 0 ? 'oh' : F.statHits.toString(),
                x = F.statAtBats === 0 ? 'oh' : F.statAtBats.toString();
              R += ", they're ".concat(L, ' for ').concat(x, ' today');
            }
            return R + '.';
          }
          i.generateBatterIntro = d;
          function f(T) {
            var F = n(T);
            return (
              T.currentBatter &&
                T.currentBatter.playerId &&
                (F += ' '.concat(r.stubbify(T.currentBatter.playerId), ' is at bat.')),
              T.currentPitcherId && (F += ' '.concat(r.stubbify(T.currentPitcherId), ' pitching;')),
              (F += ' ' + y(T)),
              F
            );
          }
          i.generateGameState = f;
          function _(T) {
            if (T.nextBatters.indexOf(void 0) > -1) return '';
            var F = r.stubbify(T.half === 'top' ? T.awayTeamId : T.homeTeamId),
              R = r.stubbify(T.nextBatters[0]),
              L = r.stubbify(T.nextBatters[1]),
              x = r.stubbify(T.nextBatters[2]);
            return 'Leading off for '
              .concat(F, ' will be ')
              .concat(R, ', then ')
              .concat(L, ', then ')
              .concat(x);
          }
          i.generateLineup = _;
          function S(T, F) {
            var R = r.ordinalNumber(T.inning),
              L = I(T, F),
              x = r.pluralSuffix(L.runs, 'run'),
              N = r.pluralSuffix(L.hits, 'hit'),
              M = r.pluralSuffix(L.errors, 'error');
            return 'That ends the '
              .concat(T.half, ' of the ')
              .concat(R, '; ')
              .concat(x, ', ')
              .concat(N, ', ')
              .concat(M);
          }
          i.generateFrameEnd = S;
          var P = function (T) {
            return (0, h.asTuple)([
              { stub: r.stubbify(T.awayTeamId), runs: T.scores[T.awayTeamId] },
              { stub: r.stubbify(T.homeTeamId), runs: T.scores[T.homeTeamId] },
            ]);
          };
          i.prepareScore = P;
          function I(T, F) {
            var R = F.stats || {},
              L = function (x, N) {
                var M = (0, s.xor)(x === 'offense', T.half === 'top') ? F.homeTeamId : F.awayTeamId,
                  J = (R[M] || {})[x] || {},
                  D = J[T.inning - 1] || {};
                return D[N] || 0;
              };
            return {
              runs: L('offense', 'runs'),
              hits: L('offense', 'hits'),
              errors: L('defense', 'errors'),
            };
          }
          i.prepareStats = I;
          var b = (function () {
            function T(F, R) {
              (this.inning = F), (this.half = R);
            }
            return (
              Object.defineProperty(T.prototype, 'predecessor', {
                get: function () {
                  return this.half === 'top' && this.inning > 1
                    ? v.maybeWithValue(new T(this.inning - 1, 'bottom'))
                    : this.half === 'bottom'
                      ? v.maybeWithValue(new T(this.inning, 'top'))
                      : v.unsetMaybe();
                },
                enumerable: !1,
                configurable: !0,
              }),
              T
            );
          })();
          i.Frame = b;
          var E = function (T) {
            var F = T.scores[T.homeTeamId] - T.scores[T.awayTeamId];
            return F === 0 ? 'tie' : F > 0 ? 'homeWin' : 'homeLoss';
          };
          i.calculateGameResult = E;
        })(ho)),
      ho
    );
  }
  var Fd;
  function rv() {
    if (Fd) return Nn;
    (Fd = 1), Object.defineProperty(Nn, '__esModule', { value: !0 }), (Nn.StateAccessor = void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(dt()),
      p = Zy(),
      v = ev(),
      h = tv(),
      s = co(),
      l = (function (u) {
        i.__extends(y, u);
        function y(o, a) {
          var n = u.call(this, o, a) || this;
          return (n.controller = a), n;
        }
        return (
          Object.defineProperty(y.prototype, 'inputContext', {
            get: function () {
              return this.controller.context;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'scores', {
            get: function () {
              return this.get('scores', this.controller.baserunners);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'strikes', {
            get: function () {
              return this.get('strikes', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'balls', {
            get: function () {
              return this.get('balls', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'outs', {
            get: function () {
              return this.get('outs', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'atBatTeamId', {
            get: function () {
              return this.get('atBatTeamId', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'inFieldTeamId', {
            get: function () {
              return this.get('inFieldTeamId', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'inning', {
            get: function () {
              return this.get('inning', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'half', {
            get: function () {
              return this.get('half', this.controller.situation);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'baserunners', {
            get: function () {
              return this.get('baserunners', this.controller.baserunners);
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.currentBatter = function (o) {
            return this.call('currentBatter', [o], this.controller.lineup);
          }),
          (y.prototype.lineupIndexOfPlayer = function (o, a) {
            return this.call('indexOfPlayer', [o, a], this.controller.lineup);
          }),
          (y.prototype.playerForPosition = function (o, a) {
            return this.call('playerForPosition', [o, a], this.controller.fielders);
          }),
          (y.prototype.playerStat = function (o, a, n, e, t) {
            return (
              t === void 0 && (t = !0),
              this.call('playerStat', [o, a, n, e, t], this.controller.stats)
            );
          }),
          (y.prototype.teamStat = function (o, a, n, e) {
            return (
              e === void 0 && (e = !0), this.call('teamStat', [o, a, n, e], this.controller.stats)
            );
          }),
          (y.prototype.pitchingStatsPerInning = function (o, a) {
            var n = this.fullPerInningStats[o];
            return n === void 0
              ? []
              : n.defense.map(function (e) {
                  return e.pitchers[a];
                });
          }),
          Object.defineProperty(y.prototype, 'currentFieldSituation', {
            get: function () {
              var o = this.call('currentBatter', [this.atBatTeamId], this.controller.lineup),
                a = this.call(
                  'positionsMapForTeam',
                  [this.inFieldTeamId],
                  this.controller.fielders
                ).P,
                n = this.playerStat(this.inFieldTeamId, a, 'defense', '#P', !1) || 0,
                e = this.playerStat(this.inFieldTeamId, a, 'defense', 'IP', !0) || 0,
                t = this.call(
                  'statsForInning',
                  [this.currentGameSituation.inning],
                  this.controller.perInning
                ),
                d = t[this.inFieldTeamId].defense,
                f = d ? d.pitchers[a] : void 0,
                _ = f ? f.pitches : 0,
                S = this.playerStat(this.atBatTeamId, o, 'offense', 'AB', !1) || 0,
                P = this.playerStat(this.atBatTeamId, o, 'offense', 'H', !1) || 0,
                I = this.get('lastPitchDetail', this.controller.situation);
              return {
                batter: o,
                baserunners: this.get('baserunners', this.controller.baserunners),
                fielders: this.call(
                  'positionsMapForTeam',
                  [this.inFieldTeamId],
                  this.controller.fielders
                ),
                atBatTeamId: this.atBatTeamId,
                inFieldTeamId: this.inFieldTeamId,
                stats: {
                  batter: { atBats: S, hits: P },
                  pitcher: {
                    cumulativePitches: n,
                    currentInningPitches: _,
                    inningsPitched: e,
                    lastPitchDetail: I,
                  },
                },
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'allStats', {
            get: function () {
              return this.get('rendered', this.controller.stats).teams;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'payloadForGameAccount', {
            get: function () {
              var o = {};
              return (
                this.inFieldTeamId !== '' &&
                  (o[this.inFieldTeamId] = this.boxscoreSituation(this.inFieldTeamId)),
                this.atBatTeamId !== '' &&
                  (o[this.atBatTeamId] = this.boxscoreSituation(this.atBatTeamId)),
                {
                  stats: this.get('pivotStatsForOutput', this.controller.stats),
                  sportSpecificData: {
                    pitchData: this.get('pitchData', this.controller.pitchData),
                    sprayChartsData: this.call(
                      'fullSprayChartData',
                      [],
                      this.controller.sprayChart
                    ),
                    linescore: this.linescoreWithStatTotals,
                    boxscoreTeams: o,
                    currentState: {
                      batter: this.currentBatter(this.atBatTeamId),
                      pitcher: this.playerForPosition(this.inFieldTeamId, 'P'),
                      inning: this.inning,
                      inningHalf: this.half,
                      baserunners: this.baserunners,
                      scores: this.scores,
                      balls: this.balls,
                      strikes: this.strikes,
                      outs: this.outs,
                    },
                  },
                }
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.gameStatsForTeam = function (o) {
            return this.get('statsForOutput', this.controller.stats)[o];
          }),
          (y.prototype.sprayChartDataForTeam = function (o) {
            return this.call('sprayChartDataForTeam', [o], this.controller.sprayChart);
          }),
          Object.defineProperty(y.prototype, 'fullSprayCharts', {
            get: function () {
              return this.call('fullSprayChartData', [], this.controller.sprayChart);
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.playerSprayChart = function (o, a, n) {
            return {
              atBats: this.call('completedAtBatsForBatter', [o], this.controller.playByPlay),
              ballsInPlay: this.call(
                'sprayChartDataForPlayer',
                [a, o, n],
                this.controller.sprayChart
              ),
            };
          }),
          Object.defineProperty(y.prototype, 'currentGameSituation', {
            get: function () {
              return {
                inning: this.inning,
                inningHalf: this.half,
                baserunners: this.baserunners,
                scores: this.scores,
                balls: this.balls,
                strikes: this.strikes,
                outs: this.outs,
                atBatTeamId: this.get('atBatTeamId', this.controller.situation),
                batters: this.call(
                  'positionsMapForTeam',
                  [this.atBatTeamId],
                  this.controller.fielders
                ),
                remainingOuts: 3 - this.outs,
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'currentGameSituationAsPlayByPlaySituationRecord', {
            get: function () {
              return {
                inning: this.inning,
                half: this.half,
                balls: this.balls,
                strikes: this.strikes,
                outs: this.outs,
                bases: this.get('baserunners', this.controller.baserunners),
                homeScore: this.scores[this.get('homeId', this.controller.situation)],
                awayScore: this.scores[this.get('awayId', this.controller.situation)],
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'linescore', {
            get: function () {
              return this.get('linescore', this.controller.perInning);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'fullPerInningStats', {
            get: function () {
              return this.get('fullPerInningStats', this.controller.perInning);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'linescoreWithStatTotals', {
            get: function () {
              for (
                var o = this.get('linescore', this.controller.perInning),
                  a = this.get('summedPerInningStats', this.controller.perInning),
                  n = {},
                  e = 0,
                  t = c.keys(o);
                e < t.length;
                e++
              ) {
                var d = t[e];
                n[d] = {
                  runsPerInning: o[d],
                  totalRuns: a[d].totalRuns,
                  totalHits: a[d].totalHits,
                  totalErrors: a[d].totalErrors,
                };
              }
              return n;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'fullAnnotatedAtBats', {
            get: function () {
              return this.get('completedAnnotatedAtBats', this.controller.playByPlay);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'fullPlayByPlay', {
            get: function () {
              return {
                completedAtBats: this.get('completedAtBats', this.controller.playByPlay),
                currentAtBat: this.get('currentAtBat', this.controller.playByPlay),
                currentBatter: this.call(
                  'currentBatter',
                  [this.atBatTeamId],
                  this.controller.lineup
                ),
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.partialPlayByPlay = function (o) {
            return {
              recentCompletedAtBats: this.call(
                'recentCompletedAtBats',
                [o],
                this.controller.playByPlay
              ),
              currentAtBat: this.get('currentAtBat', this.controller.playByPlay),
            };
          }),
          Object.defineProperty(y.prototype, 'aggregateInningTransitionData', {
            get: function () {
              return {
                lineups: this.fullLineups,
                stats: this.allStats,
                atBatTeamId: this.atBatTeamId,
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.possiblyMutatedAtBats = function (o) {
            return this.call('possiblyMutatedAtBats', [o], this.controller.playByPlay);
          }),
          (y.prototype.possiblyMutatedAtBatsWithPerInningStats = function (o) {
            return {
              possiblyMutatedAtBats: this.call(
                'possiblyMutatedAtBats',
                [o],
                this.controller.playByPlay
              ),
              fullPerInningStats: this.get('fullPerInningStats', this.controller.perInning),
            };
          }),
          (y.prototype.completedAtBat = function (o) {
            return this.call('completedAtBatAtIndex', [o], this.controller.playByPlay);
          }),
          (y.prototype.completedAtBatContainingEvent = function (o) {
            return this.call('completedAtBatContainingEvent', [o], this.controller.playByPlay);
          }),
          (y.prototype.atBatContainingEvent = function (o) {
            return this.call('atBatContainingEvent', [o], this.controller.playByPlay);
          }),
          (y.prototype.nextCompletedAtBatAfterEvent = function (o) {
            var a = this.completedAtBatContainingEvent(o);
            return a ? this.completedAtBat(a.index + 1) : void 0;
          }),
          Object.defineProperty(y.prototype, 'positionsMap', {
            get: function () {
              return this.get('positionsMap', this.controller.fielders);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'fullLineups', {
            get: function () {
              return this.get('fullLineups', this.controller.lineup);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'dhsMap', {
            get: function () {
              return this.get('dhsMap', this.controller.lineup);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'dpFlexMap', {
            get: function () {
              return this.get('dpFlexMap', this.controller.lineup);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'scorekeepingState', {
            get: function () {
              return {
                gameSituation: this.currentGameSituation,
                fieldSituation: this.currentFieldSituation,
                lineups: this.fullLineups,
                fielders: this.positionsMap,
                dhs: this.dhsMap,
                dpFlex: this.dpFlexMap,
                scoredOnLastEvent: this.get(
                  'runnersScoredOnLastEvent',
                  this.controller.baserunners
                ),
                homeTeamId: this.get('homeId', this.controller.situation),
                awayTeamId: this.get('awayId', this.controller.situation),
                pitchActionContext: this.pitchActionContext,
                lastEventInfo: {
                  endedInningHalf: this.get('lastEventEndedInning', this.controller.situation),
                },
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'pitchActionContext', {
            get: function () {
              return this.call(
                'pitchActionContext',
                [this.controller.context, this.controller.situation, this.controller.baserunners],
                this.controller.actionContext
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.runnerSafeActionContext = function (o, a) {
            return this.call(
              'runnerSafeActionContext',
              [
                this.controller.outputStream(),
                this.controller.situation,
                this.controller.baserunners,
                o,
                a,
              ],
              this.controller.actionContext
            );
          }),
          (y.prototype.runnerOutActionContext = function (o, a) {
            return this.call(
              'runnerOutActionContext',
              [this.controller.outputStream(), this.controller.baserunners, o, a],
              this.controller.actionContext
            );
          }),
          (y.prototype.inningStats = function (o) {
            return this.call('statsForInning', [o], this.controller.perInning);
          }),
          (y.prototype.boxscoreSituation = function (o) {
            var a = this.call('fielderHistory', [o], this.controller.history);
            for (var n in a) a.hasOwnProperty(n) && (a[n] = c.pluck(a[n], 'position'));
            var e = this.call(
                'playerOrderForBoxscore',
                [this.controller.lineup, o],
                this.controller.history
              ),
              t = e.reduce(function (d, f) {
                return d.concat(f);
              }, []);
            return {
              battingOrder: e,
              pitcherHistory: this.call('orderedPitchersForBoxscore', [o], this.controller.history),
              fielderHistory: a,
              courtesyRunners: this.call(
                'courtesyRunnerOrderForBoxscore',
                [t, o],
                this.controller.history
              ),
            };
          }),
          Object.defineProperty(y.prototype, 'aggregateBoxscoreSituation', {
            get: function () {
              var o = { stats: this.allStats, teams: {} };
              return (
                (o.teams[this.inFieldTeamId] = this.boxscoreSituation(this.inFieldTeamId)),
                (o.teams[this.atBatTeamId] = this.boxscoreSituation(this.atBatTeamId)),
                o
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'boxscorePDF', {
            get: function () {
              var o = this,
                a = {};
              return (
                [this.atBatTeamId, this.inFieldTeamId].forEach(function (n) {
                  a[n] = o.boxscorePDFRecord(n);
                }),
                a
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.boxscorePDFRecord = function (o) {
            return {
              boxscore: this.boxscoreSituation(o),
              linescore: this.linescoreWithStatTotals[o],
              score: this.scores[o],
              stats: this.allStats[o],
            };
          }),
          Object.defineProperty(y.prototype, 'scorebook', {
            get: function () {
              var o = [
                  this.get('homeId', this.controller.situation),
                  this.get('awayId', this.controller.situation),
                ],
                a = o[0],
                n = o[1],
                e = {};
              (e[a] = this.call('battingHistory', [a], this.controller.history)),
                (e[n] = this.call('battingHistory', [n], this.controller.history));
              var t = {};
              c.extend(t, this.call('fielderHistory', [a], this.controller.history)),
                c.extend(t, this.call('fielderHistory', [n], this.controller.history));
              var d = this.call(
                'renderForScorebook',
                [this.controller.outputStream(), this.controller.situation, this.controller.lineup],
                this.controller.playByPlay
              );
              return {
                battingHistories: e,
                fieldingHistories: t,
                atBatProgressMap: d.atBatProgressMap,
                atBatsByInningColumnSlot: d.atBatsByInningColumnSlot,
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'tabular_data', {
            get: function () {
              return this.call(
                'exportTabularPlayByPlay',
                [this.controller.outputStream()],
                this.controller.playByPlay
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'pitchCountData', {
            get: function () {
              var o = {};
              return (
                (o[this.inFieldTeamId] = this.call(
                  'pitcherHistory',
                  [this.inFieldTeamId],
                  this.controller.history
                )),
                (o[this.atBatTeamId] = this.call(
                  'pitcherHistory',
                  [this.atBatTeamId],
                  this.controller.history
                )),
                { stats: this.allStats, pitcherHistories: o }
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'aggregateGameStreamData', {
            get: function () {
              return {
                gameSituation: this.currentGameSituation,
                playByPlay: this.fullPlayByPlay,
                linescore: this.linescoreWithStatTotals,
                boxscore: this.aggregateBoxscoreSituation,
                fieldSituation: {
                  batter: this.call('currentBatter', [this.atBatTeamId], this.controller.lineup),
                  baserunners: this.get('baserunners', this.controller.baserunners),
                  fielders: this.call(
                    'positionsMapForTeam',
                    [this.inFieldTeamId],
                    this.controller.fielders
                  ),
                  atBatTeamId: this.atBatTeamId,
                  inFieldTeamId: this.inFieldTeamId,
                },
                scorebook: this.scorebook,
                tabular_data: this.tabular_data,
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'gameStatHighlights', {
            get: function () {
              var o = [0],
                a = [
                  {
                    returnKey: 'hits',
                    category: 'offense',
                    stat: 'H',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'walks',
                    category: 'offense',
                    stat: 'BB',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'rbis',
                    category: 'offense',
                    stat: 'RBI',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'qabs',
                    category: 'offense',
                    stat: 'QAB',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'innings',
                    category: 'defense',
                    stat: 'IP',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'firstPitchStrikes',
                    category: 'defense',
                    stat: 'FPS',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'strikeouts',
                    category: 'defense',
                    stat: 'SO',
                    excludeValues: o,
                    numberOfPlayers: 3,
                    sortOrder: 'descending',
                  },
                  {
                    returnKey: 'whip',
                    category: 'defense',
                    stat: 'WHIP',
                    numberOfPlayers: 3,
                    sortOrder: 'ascending',
                  },
                ];
              return this.call('statHighlights', [a], this.controller.stats);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'payloadForNarrativeScienceRecaps', {
            get: function () {
              return {
                outputStream: this.controller.outputStream(),
                playByPlay: this.fullPlayByPlay,
                linescore: this.linescoreWithStatTotals,
                allStats: this.allStats,
                perInningStats: this.fullPerInningStats,
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'payloadForStatCrewExport', {
            get: function () {
              var o = [
                  this.get('homeId', this.controller.situation),
                  this.get('awayId', this.controller.situation),
                ],
                a = o[0],
                n = o[1],
                e = {};
              (e[a] = this.call('battingHistory', [a], this.controller.history)),
                (e[n] = this.call('battingHistory', [n], this.controller.history));
              var t = {};
              c.extend(t, this.call('fielderHistory', [a], this.controller.history)),
                c.extend(t, this.call('fielderHistory', [n], this.controller.history));
              var d = {};
              (d[a] = this.call('pitcherHistory', [a], this.controller.history)),
                (d[n] = this.call('pitcherHistory', [n], this.controller.history));
              var f = {};
              return (
                (f[a] = this.call(
                  'playerOrderForBoxscore',
                  [this.controller.lineup, a],
                  this.controller.history
                )),
                (f[n] = this.call(
                  'playerOrderForBoxscore',
                  [this.controller.lineup, n],
                  this.controller.history
                )),
                {
                  playByPlay: this.fullPlayByPlay,
                  linescore: this.linescoreWithStatTotals,
                  allStats: this.allStats,
                  perInningStats: this.fullPerInningStats,
                  battingHistories: e,
                  fieldingHistories: t,
                  pitcherHistories: d,
                  boxscoreOrder: f,
                }
              );
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.playDetail = function (o) {
            var a = this.completedAtBat(o);
            if (a !== void 0)
              return {
                atBat: a,
                playDetail: (0, p.renderForPlayDetail)(
                  this.controller.outputStream(),
                  a,
                  this.controller.lineup
                ),
              };
          }),
          (y.prototype.makeReplacementEvent = function (o, a) {
            var n = this.completedAtBatContainingEvent(o);
            return v.ResultPlayEdit.makeReplacementEvent(o, a, n, this.controller.outputStream());
          }),
          Object.defineProperty(y.prototype, 'announcements', {
            get: function () {
              var o = this.call('currentBatter', [this.atBatTeamId], this.controller.lineup),
                a = {
                  playerId: o,
                  statAtBats: this.playerStat(this.atBatTeamId, o, 'offense', 'AB', !1),
                  statHits: this.playerStat(this.atBatTeamId, o, 'offense', 'H', !1),
                },
                n = this.call('batters', [this.atBatTeamId], this.controller.lineup),
                e = this.call('lineupIndex', [this.atBatTeamId], this.controller.lineup),
                t = {
                  balls: this.balls,
                  strikes: this.strikes,
                  outs: this.outs,
                  runnersOnBase: this.get('runnersOnBase', this.controller.baserunners),
                  scores: this.scores,
                  homeTeamId: this.get('homeId', this.controller.situation),
                  awayTeamId: this.get('awayId', this.controller.situation),
                  inning: this.inning,
                  half: this.half,
                  stats: this.fullPerInningStats,
                  nextBatters: (0, s.modularSlice)(n, e, 3),
                  currentBatter: a,
                  currentPitcherId: this.call(
                    'positionsMapForTeam',
                    [this.inFieldTeamId],
                    this.controller.fielders
                  ).P,
                };
              return (0, h.generateAnnouncements)(t);
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(r.EngineStateAccessor);
    return (Nn.StateAccessor = l), Nn;
  }
  var Wn = {},
    kd;
  function nv() {
    if (kd) return Wn;
    (kd = 1),
      Object.defineProperty(Wn, '__esModule', { value: !0 }),
      (Wn.DefensivePlayEdit = void 0);
    var i = Me(),
      c = po(),
      r = (function () {
        function p(v, h, s, l, u, y, o) {
          (this.eventId = v),
            (this.eventIndexMap = h),
            (this.events = s),
            (this.teamId = l),
            (this.position = u),
            (this.positionHistory = y),
            (this.outgoingPlayerId = o);
        }
        return (
          (p.prototype.makeEditResult = function (v, h) {
            var s = this.makeSummary(v, h);
            return { summary: s, event: this.makeDefensiveEditEvent(v, s) };
          }),
          (p.prototype.makeFillPosition = function (v, h) {
            return {
              id: (0, i.uuid4)(),
              code: 'fill_position',
              createdAt: v.createdAt,
              attributes: { teamId: this.teamId, playerId: h, position: this.position },
            };
          }),
          (p.prototype.makeDefensiveEditEvent = function (v, h) {
            var s = [],
              l = this.events[this.eventIndexMap[this.eventId]];
            if (
              (s.push((0, c.makeInsertBeforeMetaEvent)(this.eventId, this.makeFillPosition(l, v))),
              h.positionRecord !== void 0)
            ) {
              var u = h.positionRecord.eventId,
                y = this.events[this.eventIndexMap[u]];
              if (y.code === 'sub_players') {
                var o = h.positionRecord.fielderId;
                s.push((0, c.makeInsertAfterMetaEvent)(u, this.makeFillPosition(y, o)));
              }
            }
            return (0, c.makeEditGroupMetaEvent)(s);
          }),
          (p.prototype.makeSummary = function (v, h) {
            var s = this.eventIndexMap[this.eventId],
              l = this.nextFieldingRecordAfterEventIndex(h, s),
              u = this.nextPositionRecordAfterEventIndex(s),
              y = {
                incomingId: v,
                outgoingId: this.outgoingPlayerId,
                position: this.position,
                playerRecord: void 0,
                positionRecord: void 0,
              };
            return (
              l !== void 0 && u !== void 0
                ? this.eventIndexMap[l.eventId] < this.eventIndexMap[u.eventId]
                  ? (y.playerRecord = l)
                  : (y.positionRecord = u)
                : l !== void 0
                  ? (y.playerRecord = l)
                  : u !== void 0 && (y.positionRecord = u),
              y
            );
          }),
          (p.prototype.nextFieldingRecordAfterEventIndex = function (v, h) {
            var s = this;
            return (
              v === void 0 && (v = []),
              v.filter(function (l) {
                var u = s.eventIndexMap[l.eventId];
                return u >= h;
              })[0]
            );
          }),
          (p.prototype.nextPositionRecordAfterEventIndex = function (v) {
            var h = this;
            if (this.positionHistory !== void 0)
              return this.positionHistory.filter(function (s) {
                var l = h.eventIndexMap[s.eventId];
                return l >= v;
              })[0];
          }),
          p
        );
      })();
    return (Wn.DefensivePlayEdit = r), Wn;
  }
  var yo = {},
    wd;
  function Cd() {
    return (
      wd ||
        ((wd = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.OffensivePlayEdit = i.getIneligiblePlayers = i.IneligibilityReason = void 0);
          var c = Q,
            r = c.__importStar(Se),
            p = de(),
            v = Pt(),
            h = Me(),
            s = er(),
            l = po(),
            u;
          (function (n) {
            (n.IsBatter = 'is_batter'),
              (n.OnFirst = 'on_first'),
              (n.OnSecond = 'on_second'),
              (n.OnThird = 'on_third'),
              (n.InLineup = 'in_lineup');
          })((u = i.IneligibilityReason || (i.IneligibilityReason = {})));
          function y(n, e, t, d) {
            d && !r.contains(t, d) && (e.push({ playerId: d, reason: n }), t.push(d));
          }
          function o(n, e, t, d, f, _) {
            for (var S = [], P = [], I = n; I <= e; I++) {
              var b = f.stateBeforeEvent(I).currentBatter(d),
                E = _.stateBeforeEvent(I).baserunners;
              y(u.IsBatter, P, S, b),
                y(u.OnFirst, P, S, E[1]),
                y(u.OnSecond, P, S, E[2]),
                y(u.OnThird, P, S, E[3]);
            }
            for (var I = e + 1; I <= t; I++) {
              var E = _.stateBeforeEvent(I).baserunners;
              y(u.OnFirst, P, S, E[1]), y(u.OnSecond, P, S, E[2]), y(u.OnThird, P, S, E[3]);
            }
            return P;
          }
          i.getIneligiblePlayers = o;
          var a = (function () {
            function n(e, t, d, f, _, S, P, I) {
              (this.targetEvent = e),
                (this.events = t),
                (this.eventIndexMap = d),
                (this.atBat = f),
                (this.teamId = _),
                (this.location = S),
                (this.outgoingPlayerId = P),
                (this.incomingPlayerId = I);
            }
            return (
              (n.prototype.makeEditResult = function () {
                return { summary: this.makeSummary(), event: this.makeEditGroupEvent() };
              }),
              (n.prototype.makeSummary = function () {
                return {
                  incomingId: this.incomingPlayerId,
                  outgoingId: this.outgoingPlayerId,
                  location: this.location,
                };
              }),
              (n.prototype.makeEditGroupEvent = function () {
                switch (this.location) {
                  case v.BaseballOffensiveLocation.Batter:
                    return this.handleBatter();
                  case v.BaseballOffensiveLocation.RunnerOnFirst:
                  case v.BaseballOffensiveLocation.RunnerOnSecond:
                  case v.BaseballOffensiveLocation.RunnerOnThird:
                    return this.handleBaseRunner();
                  default:
                    throw 'Unknown location '.concat(this.location);
                }
              }),
              (n.prototype.handleBatter = function () {
                var e = [];
                return (
                  e.push(
                    (0, l.makeInsertBeforeMetaEvent)(
                      this.targetEvent.id,
                      this.makeReplaceBatterEvent(this.incomingPlayerId)
                    )
                  ),
                  this.isPlayerStillOnBase(this.outgoingPlayerId) &&
                    !this.didHalfInningEnd() &&
                    e.push(
                      (0, l.makeInsertAfterMetaEvent)(
                        this.getTerminatingEventId(),
                        this.makeReplaceRunnerEvent(this.incomingPlayerId, this.outgoingPlayerId)
                      )
                    ),
                  (e = e.concat(this.replaceRunnerInBaserunningEvents())),
                  (0, l.makeEditGroupMetaEvent)(e)
                );
              }),
              (n.prototype.handleBaseRunner = function () {
                switch (this.targetEvent.code) {
                  case 'base_running':
                    return this.handleBaseRunnerManualAdvance();
                  default:
                    return this.handleBaseRunnerBatterAdvance();
                }
              }),
              (n.prototype.handleBaseRunnerManualAdvance = function () {
                var e = this.targetEvent,
                  t = e.attributes.playType,
                  d = v.baseRunningPlayTypeConfigs[t];
                if (d === void 0) throw 'Could not find a play type config for '.concat(t);
                var f = !d.runnerOut && e.attributes.base !== 4,
                  _ = [];
                return (
                  _.push(
                    (0, l.makeInsertBeforeMetaEvent)(
                      e.id,
                      this.makeReplaceRunnerEvent(this.outgoingPlayerId, this.incomingPlayerId)
                    )
                  ),
                  _.push(
                    this.replaceRunnerInBaserunningEvent(
                      this.outgoingPlayerId,
                      this.incomingPlayerId,
                      e,
                      f
                    )
                  ),
                  (0, l.makeEditGroupMetaEvent)(_)
                );
              }),
              (n.prototype.getTerminatingEventId = function () {
                return this.atBat.orderedEventIds[this.atBat.orderedEventIds.length - 1];
              }),
              (n.prototype.findParticipantRecordForPlayer = function (e) {
                var t = (0, s.firstParticipantWithIdToJS)(
                  p.List.of.apply(p.List, this.atBat.participants),
                  e
                );
                if (t === void 0) throw 'was not able to find participant record for '.concat(e);
                return t;
              }),
              (n.prototype.isPlayerStillOnBase = function (e) {
                var t = this.findParticipantRecordForPlayer(e);
                return !t.out && !t.scored;
              }),
              (n.prototype.didHalfInningEnd = function () {
                return (
                  this.atBat.initialSituation.inning < this.atBat.result.situation.inning ||
                  (this.atBat.initialSituation.half === 'top' &&
                    this.atBat.result.situation.half === 'bottom')
                );
              }),
              (n.prototype.handleBaseRunnerBatterAdvance = function () {
                var e = [];
                return (
                  e.push(
                    (0, l.makeInsertBeforeMetaEvent)(
                      this.targetEvent.id,
                      this.makeReplaceRunnerEvent(this.outgoingPlayerId, this.incomingPlayerId)
                    )
                  ),
                  this.isPlayerStillOnBase(this.outgoingPlayerId) &&
                    !this.didHalfInningEnd() &&
                    e.push(
                      (0, l.makeInsertAfterMetaEvent)(
                        this.getTerminatingEventId(),
                        this.makeReplaceRunnerEvent(this.incomingPlayerId, this.outgoingPlayerId)
                      )
                    ),
                  (e = e.concat(this.replaceRunnerInBaserunningEvents())),
                  (0, l.makeEditGroupMetaEvent)(e)
                );
              }),
              (n.prototype.makeReplaceBatterEvent = function (e) {
                return {
                  id: (0, h.uuid4)(),
                  code: 'replace_batter',
                  attributes: { teamId: this.teamId, incomingPlayerId: e },
                };
              }),
              (n.prototype.makeReplaceRunnerEvent = function (e, t) {
                return {
                  id: (0, h.uuid4)(),
                  code: 'replace_runner',
                  attributes: {
                    teamId: this.teamId,
                    incomingPlayerId: t,
                    outgoingPlayerId: e,
                    flavor: v.ReplaceRunnerFlavor.RetroactiveSubstitution,
                  },
                };
              }),
              (n.prototype.replaceRunnerInBaserunningEvent = function (e, t, d, f) {
                if (d.attributes.runnerId !== e)
                  throw 'outgoingId '
                    .concat(e, ' did not match runner ')
                    .concat(d.attributes.runnerId, ' in event ')
                    .concat(d.id);
                var _ = [];
                return (
                  _.push({
                    id: (0, h.uuid4)(),
                    code: 'base_running',
                    createdAt: d.createdAt,
                    attributes: {
                      playType: d.attributes.playType,
                      playFlavor: d.attributes.playFlavor,
                      base: d.attributes.base,
                      runnerId: t,
                      defenders: d.attributes.defenders,
                    },
                  }),
                  f && _.push(this.makeReplaceRunnerEvent(t, e)),
                  (0, l.makeReplaceMetaEvent)([d.id], _)
                );
              }),
              (n.prototype.replaceRunnerInBaserunningEvents = function () {
                var e = this,
                  t = [];
                return (
                  this.atBat.baseRunningOnPlayEvents.forEach(function (d) {
                    var f = e.events[e.eventIndexMap[d.eventId]];
                    f.attributes.runnerId === e.outgoingPlayerId &&
                      t.push(
                        e.replaceRunnerInBaserunningEvent(
                          e.outgoingPlayerId,
                          e.incomingPlayerId,
                          f,
                          !1
                        )
                      );
                  }),
                  t
                );
              }),
              n
            );
          })();
          i.OffensivePlayEdit = a;
        })(yo)),
      yo
    );
  }
  var $n = {},
    Md;
  function av() {
    if (Md) return $n;
    (Md = 1),
      Object.defineProperty($n, '__esModule', { value: !0 }),
      ($n.getIllegalEvents = void 0);
    var i = Cd();
    function c(l, u, y, o, a, n) {
      return v(l, u, y, o, a).concat(s(u, y, o, n));
    }
    $n.getIllegalEvents = c;
    function r(l, u, y) {
      if (l === u) return { playerId: l, reason: i.IneligibilityReason.IsBatter };
      if (l === y[1]) return { playerId: l, reason: i.IneligibilityReason.OnFirst };
      if (l === y[2]) return { playerId: l, reason: i.IneligibilityReason.OnSecond };
      if (l === y[3]) return { playerId: l, reason: i.IneligibilityReason.OnThird };
    }
    function p(l, u) {
      if (u.includes(l)) return { playerId: l, reason: i.IneligibilityReason.InLineup };
    }
    function v(l, u, y, o, a) {
      for (var n = o.baseEvents.length, e = [], t = 0; t < n; t++) {
        var d = [],
          f = o.stateAfterEvent(t).currentBatter(l),
          _ = a.stateAfterEvent(t).baserunners,
          S = r(u, f, _),
          P = r(y, f, _);
        S && P && d.push(S, P);
        var I = o.stateAfterEvent(t).batters(l),
          b = p(u, I),
          E = p(y, I);
        b && E && d.push(b, E), d.length && e.push({ eventIndex: t, reason: d });
      }
      return e;
    }
    function h(l, u, y) {
      var o = y.positionForPlayer(l);
      if (o === 'EH')
        for (var a = u.dhsMap, n = 0, e = Object.keys(a); n < e.length; n++) {
          var t = e[n];
          if (Object.keys(a[t]).includes(l)) return 'DH';
        }
      else return o;
    }
    function s(l, u, y, o) {
      for (var a = o.baseEvents.length, n = [], e = 0; e < a; e++) {
        var t = y.stateAfterEvent(e),
          d = o.stateAfterEvent(e),
          f = h(l, t, d),
          _ = h(u, t, d);
        f &&
          _ &&
          n.push({
            eventIndex: e,
            reason: [
              { playerId: l, reason: f },
              { playerId: u, reason: _ },
            ],
          });
      }
      return n;
    }
    return $n;
  }
  var zn = {},
    xd;
  function iv() {
    if (xd) return zn;
    (xd = 1),
      Object.defineProperty(zn, '__esModule', { value: !0 }),
      (zn.PlayerReplacementEdit = void 0);
    var i = Me(),
      c = (function () {
        function r(p, v, h) {
          (this.events = p), (this.existingPlayerId = v), (this.replacementPlayerId = h);
        }
        return (
          (r.prototype.makeEditEvent = function () {
            return {
              summary: {
                existingPlayerId: this.existingPlayerId,
                replacementPlayerId: this.replacementPlayerId,
              },
              events: this.makeEditGroupEvents(),
            };
          }),
          (r.prototype.makeEditGroupEvents = function () {
            for (var p, v, h = [], s = [], l = [], u = 0, y = this.events; u < y.length; u++) {
              var o = y[u],
                a = this.replacePlayerInEvent(o);
              if (a) {
                var n = this.makeReplaceMetaEvent(o.id, [a]);
                ((p = o.compactorAttributes) === null || p === void 0 ? void 0 : p.stream) ===
                'head'
                  ? h.push(n)
                  : ((v = o.compactorAttributes) === null || v === void 0 ? void 0 : v.stream) ===
                      'tail'
                    ? l.push(n)
                    : s.push(n);
              }
            }
            var e = [];
            return (
              h.length > 0 && e.push(this.makeEditGroupMetaEvent(h, 'head')),
              s.length > 0 && e.push(this.makeEditGroupMetaEvent(s, 'main')),
              l.length > 0 && e.push(this.makeEditGroupMetaEvent(l, 'tail')),
              e
            );
          }),
          (r.prototype.replacePlayerInEvent = function (p) {
            var v = JSON.stringify(p),
              h = new RegExp('"'.concat(this.existingPlayerId, '"'), 'gi'),
              s = v.replace(h, '"'.concat(this.replacementPlayerId, '"'));
            if (v !== s) {
              var l = JSON.parse(s);
              return (l.id = (0, i.uuid4)()), l;
            }
          }),
          (r.prototype.makeEditGroupMetaEvent = function (p, v) {
            return {
              id: (0, i.uuid4)(),
              code: 'edit_group',
              events: p,
              compactorAttributes: { stream: v },
            };
          }),
          (r.prototype.makeReplaceMetaEvent = function (p, v) {
            return { id: (0, i.uuid4)(), code: 'replace', deleteIds: [p], events: v };
          }),
          r
        );
      })();
    return (zn.PlayerReplacementEdit = c), zn;
  }
  var Vn = {},
    Kn = {},
    Jn = {},
    Yn = {},
    Ld;
  function It() {
    if (Ld) return Yn;
    (Ld = 1),
      Object.defineProperty(Yn, '__esModule', { value: !0 }),
      (Yn.BasePlayResolver = void 0);
    var i = (function () {
      function c() {}
      return (
        (c.prototype.isBackwardsCompatibleResolver = function () {
          return !1;
        }),
        (c.prototype.firstUpdate = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        (c.prototype.handleUpdate = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        (c.prototype.markResolution = function (r, p, v) {
          switch (r) {
            case 'safe':
              return this.markSafe(p, v);
            case 'out':
              return this.markOut(p, v);
            case 'sent_back':
              return this.markSentBack(p, v);
            case 'violation':
              return this.markViolation(p, v);
            default:
              return { animationOperations: v, events: [] };
          }
        }),
        (c.prototype.markSafe = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        (c.prototype.markOut = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        (c.prototype.markSentBack = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        (c.prototype.markViolation = function (r, p) {
          return { animationOperations: p, events: [] };
        }),
        c
      );
    })();
    return (Yn.BasePlayResolver = i), Yn;
  }
  var xe = {},
    Dd;
  function Ue() {
    if (Dd) return xe;
    (Dd = 1),
      Object.defineProperty(xe, '__esModule', { value: !0 }),
      (xe.getPossibleScorers =
        xe.makeBaseRunningEvent =
        xe.numberOfRunnersOnBase =
        xe.isPlayerNotAtBase =
        xe.getPendingOperationForBase =
        xe.getUnresolvedOperationForBase =
        xe.getOperationForBase =
        xe.getOperationForRunnerId =
        xe.changeOperationForRunnerId =
          void 0);
    var i = Q,
      c = Me();
    function r(a, n, e) {
      var t = p(a, n);
      if (t === void 0)
        throw 'Could not find runner '.concat(n, ' in operations ').concat(JSON.stringify(a));
      return a.map(function (d) {
        return d.playerId === n ? i.__assign(i.__assign({}, d), e) : d;
      });
    }
    xe.changeOperationForRunnerId = r;
    function p(a, n) {
      return a.find(function (e) {
        return e.playerId === n;
      });
    }
    xe.getOperationForRunnerId = p;
    function v(a, n) {
      return a.find(function (e) {
        return e.toBase === n;
      });
    }
    xe.getOperationForBase = v;
    function h(a, n, e) {
      return a.find(function (t) {
        var d = e.has(t.playerId);
        return t.toBase === n && !d;
      });
    }
    xe.getUnresolvedOperationForBase = h;
    function s(a, n, e) {
      return a.find(function (t) {
        var d = e.has(t.playerId);
        return t.toBase === n && d;
      });
    }
    xe.getPendingOperationForBase = s;
    function l(a, n, e) {
      var t = p(a, n);
      return t === void 0
        ? (console.log('Tried to find('.concat(n, ') but they were not present in operations.')),
          !0)
        : t.toBase !== e
          ? (console.log(
              'Tried to find('
                .concat(n, ') but they were at ')
                .concat(t.toBase, ' instead of ')
                .concat(e, '.')
            ),
            !0)
          : !1;
    }
    xe.isPlayerNotAtBase = l;
    function u(a) {
      return a.filter(function (n) {
        return (
          (n.result === 'safe' ||
            n.result === 'resolution_set_violation' ||
            n.result === 'resolution_set_back' ||
            n.result === 'resolution_set_standard') &&
          (n.toBase === 1 || n.toBase === 2 || n.toBase === 3 || n.toBase === -3)
        );
      }).length;
    }
    xe.numberOfRunnersOnBase = u;
    function y(a, n, e, t) {
      return {
        id: (0, c.uuid4)(),
        code: 'base_running',
        attributes: { playType: a, base: n, runnerId: e, playFlavor: t, defenders: [] },
      };
    }
    xe.makeBaseRunningEvent = y;
    function o(a) {
      return a
        .filter(function (n) {
          return n.toBase === 4 && n.result === 'scored';
        })
        .sort(function (n, e) {
          return n.fromBase - e.fromBase;
        });
    }
    return (xe.getPossibleScorers = o), xe;
  }
  var Gd;
  function Hd() {
    if (Gd) return Jn;
    (Gd = 1), Object.defineProperty(Jn, '__esModule', { value: !0 }), (Jn.SingleResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h(s) {
          var l = v.call(this) || this;
          return (l.isViolationAvailable = s), l;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u = l.find(function (o) {
              return o.toBase === 4 && o.result === 'scored';
            });
            if (u === void 0) return v.prototype.firstUpdate.call(this, s, l);
            var y = (0, r.numberOfRunnersOnBase)(l) === 3;
            return y && this.isViolationAvailable
              ? {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                    result: 'resolution_set_violation',
                  }),
                  events: [],
                }
              : y
                ? {
                    animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                      result: 'resolution_set_standard',
                    }),
                    events: [],
                  }
                : {
                    animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                      result: 'resolution_set_back',
                    }),
                    events: [],
                  };
          }),
          (h.prototype.markSafe = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'scored',
                  }),
                  events: [],
                };
          }),
          (h.prototype.markOut = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                };
          }),
          (h.prototype.markSentBack = function (s, l) {
            if ((0, r.numberOfRunnersOnBase)(l) === 3)
              return { animationOperations: l, events: [] };
            var u = [],
              y = (0, r.getOperationForBase)(l, 3);
            return (
              y && u.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 2, y.playerId)),
              u.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 3, s.playerId)),
              {
                animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                  result: 'safe',
                }),
                events: u,
              }
            );
          }),
          (h.prototype.markViolation = function (s, l) {
            return {
              animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                result: 'safe',
              }),
              events: [(0, r.makeBaseRunningEvent)('did_not_score', 4, s.playerId)],
            };
          }),
          h
        );
      })(c.BasePlayResolver);
    return (Jn.SingleResolver = p), Jn;
  }
  var Qn = {},
    Nd;
  function sv() {
    if (Nd) return Qn;
    (Nd = 1), Object.defineProperty(Qn, '__esModule', { value: !0 }), (Qn.DoubleResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = uo(),
      v = (function (h) {
        i.__extends(s, h);
        function s() {
          var l = (h !== null && h.apply(this, arguments)) || this;
          return (l.playerAtHomeQueue = new p.Queue(1)), l;
        }
        return (
          (s.prototype.firstUpdate = function (l, u) {
            this.remainingOuts = l.gameSituation.remainingOuts;
            var y = (0, r.getPossibleScorers)(u);
            if (y.length === 0) return h.prototype.firstUpdate.call(this, l, u);
            var o = y.length > 1;
            if (o) {
              var a = y[0].playerId;
              (u = (0, r.changeOperationForRunnerId)(u, a, { toBase: -4, result: 'safe' })),
                this.playerAtHomeQueue.enqueue(a);
            }
            var n = (0, r.getOperationForBase)(u, 3) === void 0,
              e = y[y.length - 1].playerId;
            return n && !o
              ? {
                  animationOperations: (0, r.changeOperationForRunnerId)(u, e, {
                    result: 'resolution_set_back',
                  }),
                  events: [],
                }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(u, e, {
                    result: 'resolution_set_standard',
                  }),
                  events: [],
                };
          }),
          (s.prototype.handleUpdate = function (l, u) {
            if (
              ((this.remainingOuts = l.gameSituation.remainingOuts),
              !this.playerAtHomeQueue.isEmpty() &&
                (0, r.getOperationForRunnerId)(u, this.playerAtHomeQueue.peek()) === void 0)
            ) {
              var y = (0, r.getOperationForBase)(u, 3) === void 0;
              l.lastEventInfo.endedInningHalf
                ? u.push({
                    playerId: this.playerAtHomeQueue.dequeue(),
                    result: 'removed',
                    fromBase: -4,
                    toBase: -4,
                  })
                : u.push({
                    playerId: this.playerAtHomeQueue.dequeue(),
                    result: y ? 'resolution_set_back' : 'resolution_set_standard',
                    fromBase: -4,
                    toBase: 4,
                  });
            }
            return { animationOperations: u, events: [] };
          }),
          (s.prototype.markSafe = function (l, u) {
            if (l.toBase !== 4) return { animationOperations: u, events: [] };
            var y = (0, r.getOperationForBase)(u, -4),
              o = (0, r.getOperationForBase)(u, 3) === void 0;
            if (y !== void 0) {
              var a = y.playerId;
              (u = (0, r.changeOperationForRunnerId)(u, a, {
                fromBase: -4,
                toBase: 4,
                result: o ? 'resolution_set_back' : 'resolution_set_standard',
              })),
                this.playerAtHomeQueue.dequeue();
            }
            return {
              animationOperations: (0, r.changeOperationForRunnerId)(u, l.playerId, {
                result: 'scored',
              }),
              events: [],
            };
          }),
          (s.prototype.markOut = function (l, u) {
            if (l.toBase !== 4) return { animationOperations: u, events: [] };
            var y = [];
            return (
              this.remainingOuts === 1 &&
                !this.playerAtHomeQueue.isEmpty() &&
                y.push(
                  (0, r.makeBaseRunningEvent)(
                    'did_not_score',
                    4,
                    this.playerAtHomeQueue.dequeue(),
                    'inning_ended'
                  )
                ),
              y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 4, l.playerId)),
              {
                animationOperations: (0, r.changeOperationForRunnerId)(u, l.playerId, {
                  result: 'safe',
                }),
                events: y,
              }
            );
          }),
          (s.prototype.markSentBack = function (l, u) {
            var y = (0, r.getOperationForBase)(u, 3) !== void 0,
              o = !this.playerAtHomeQueue.isEmpty();
            if (y || o) return { animationOperations: u, events: [] };
            var a = [(0, r.makeBaseRunningEvent)('remained_on_last_play', 3, l.playerId)];
            return {
              animationOperations: (0, r.changeOperationForRunnerId)(u, l.playerId, {
                result: 'safe',
              }),
              events: a,
            };
          }),
          s
        );
      })(c.BasePlayResolver);
    return (Qn.DoubleResolver = v), Qn;
  }
  var Xn = {},
    jd;
  function ov() {
    if (jd) return Xn;
    (jd = 1),
      Object.defineProperty(Xn, '__esModule', { value: !0 }),
      (Xn.FieldersChoiceResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          var s = (v !== null && v.apply(this, arguments)) || this;
          return (s.resolvedRunnerIds = new Set()), s;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            return this.handleUpdate(s, l);
          }),
          (h.prototype.handleUpdate = function (s, l) {
            var u = l.find(function (n) {
                return n.toBase === 4 && n.result === 'scored';
              }),
              y = (0, r.getUnresolvedOperationForBase)(l, 2, this.resolvedRunnerIds),
              o = (0, r.getUnresolvedOperationForBase)(l, 3, this.resolvedRunnerIds);
            if (
              (u === void 0 || this.resolvedRunnerIds.has(u.playerId)) &&
              y === void 0 &&
              o === void 0
            )
              return v.prototype.handleUpdate.call(this, s, l);
            if (s.lastEventInfo.endedInningHalf) return v.prototype.handleUpdate.call(this, s, l);
            if (u && !this.resolvedRunnerIds.has(u.playerId))
              return {
                animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                  result: 'resolution_set_back',
                }),
                events: [],
              };
            var a = l;
            return (
              y &&
                (a = (0, r.changeOperationForRunnerId)(a, y.playerId, {
                  result: 'resolution_set_standard',
                })),
              o &&
                (a = (0, r.changeOperationForRunnerId)(a, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              { animationOperations: a, events: [] }
            );
          }),
          (h.prototype.markSafeAtHome = function (s, l, u) {
            var y = (0, r.getUnresolvedOperationForBase)(l, 3, this.resolvedRunnerIds),
              o = (0, r.getUnresolvedOperationForBase)(l, 2, this.resolvedRunnerIds);
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.resolvedRunnerIds.add(s.playerId);
            var a = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'scored' });
            return (
              y &&
                (a = (0, r.changeOperationForRunnerId)(a, y.playerId, {
                  result: 'resolution_set_standard',
                })),
              o &&
                (a = (0, r.changeOperationForRunnerId)(a, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              { animationOperations: a, events: [] }
            );
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase === 1 || this.resolvedRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.resolvedRunnerIds.add(s.playerId);
            var u = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = [],
              o = (0, r.getUnresolvedOperationForBase)(l, 3, this.resolvedRunnerIds),
              a = (0, r.getUnresolvedOperationForBase)(l, 2, this.resolvedRunnerIds),
              n = l.filter(function (e) {
                return e.toBase === 3;
              }).length;
            if (s.toBase === 3 && n === 2)
              y.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 2, s.playerId)),
                a &&
                  (this.resolvedRunnerIds.add(a.playerId),
                  (u = (0, r.changeOperationForRunnerId)(u, a.playerId, { result: 'safe' })),
                  y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, a.playerId)));
            else if (s.toBase === 2 && n === 2) {
              if (!o)
                throw Error(
                  'Fielders choice: There are two runners on 3rd and both are resolved. Unable to proceed.'
                );
              this.resolvedRunnerIds.add(o.playerId),
                (u = (0, r.changeOperationForRunnerId)(u, o.playerId, { result: 'safe' })),
                y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, o.playerId));
            }
            return { animationOperations: u, events: y };
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markSafeAtHome(s, l, u) : this.markSafeOnBase(s, l);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            return u.playerId !== s.playerId
              ? { animationOperations: l, events: [] }
              : (this.resolvedRunnerIds.add(s.playerId),
                {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                });
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            return s.toBase === 1 || this.resolvedRunnerIds.has(s.playerId)
              ? { animationOperations: l, events: [] }
              : (this.resolvedRunnerIds.add(s.playerId),
                {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', s.toBase, s.playerId)],
                });
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            return (
              this.resolvedRunnerIds.add(s.playerId),
              {
                animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                  result: 'safe',
                }),
                events: [(0, r.makeBaseRunningEvent)('remained_on_last_play', 3, s.playerId)],
              }
            );
          }),
          h
        );
      })(c.BasePlayResolver);
    return (Xn.FieldersChoiceResolver = p), Xn;
  }
  var Zn = {},
    qd;
  function uv() {
    if (qd) return Zn;
    (qd = 1),
      Object.defineProperty(Zn, '__esModule', { value: !0 }),
      (Zn.FieldersChoiceDoublePlayResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          var s = (v !== null && v.apply(this, arguments)) || this;
          return (s.outsCollected = 0), s;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            if (l.length < 3 || s.gameSituation.remainingOuts < 2)
              throw new Error('There are not enough operations and/or outs to do a FC DP.');
            return l.length === 3
              ? this.firstUpdateFor2Baserunners(l)
              : this.firstUpdateFor3Baserunners(l);
          }),
          (h.prototype.firstUpdateFor2Baserunners = function (s) {
            var l = s,
              u = [],
              y = (0, r.getOperationForBase)(s, 4),
              o = (0, r.getOperationForBase)(s, 3),
              a = (0, r.getOperationForBase)(s, 2);
            return (
              y &&
                ((l = (0, r.changeOperationForRunnerId)(l, y.playerId, { result: 'safe' })),
                u.push((0, r.makeBaseRunningEvent)('out_on_last_play', 4, y.playerId))),
              o && u.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, o.playerId)),
              a && u.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, a.playerId)),
              (this.outsCollected = 2),
              { animationOperations: l, events: u }
            );
          }),
          (h.prototype.firstUpdateFor3Baserunners = function (s) {
            var l = (0, r.getOperationForBase)(s, 4);
            if (l === void 0)
              throw new Error(
                'FC DP should have a runner at home, but it was not present in animation operations.'
              );
            return {
              animationOperations: (0, r.changeOperationForRunnerId)(s, l.playerId, {
                result: 'resolution_set_back',
              }),
              events: [],
            };
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (this.outsCollected === 2) return v.prototype.handleUpdate.call(this, s, l);
            var u = (0, r.getOperationForBase)(l, 3),
              y = (0, r.getOperationForBase)(l, 2);
            if (u === void 0 || y === void 0)
              throw new Error(
                'FC DP: Expected runners on 2nd and 3rd, but one or both was missing.'
              );
            var o = (0, r.changeOperationForRunnerId)(l, u.playerId, {
              result: 'resolution_set_standard',
            });
            return (
              (o = (0, r.changeOperationForRunnerId)(o, y.playerId, {
                result: 'resolution_set_standard',
              })),
              { animationOperations: o, events: [] }
            );
          }),
          (h.prototype.markSafeOrSentBackAtHome = function (s, l, u, y) {
            if (y.playerId !== l.playerId) return { animationOperations: u, events: [] };
            var o = (0, r.getOperationForBase)(u, 3),
              a = (0, r.getOperationForBase)(u, 2);
            if (o === void 0 || a === void 0)
              throw new Error('FC DP: Did not have runners on 2nd and/or 3rd to get out');
            var n = u,
              e = [];
            return (
              s === 'safe'
                ? (n = (0, r.changeOperationForRunnerId)(n, l.playerId, { result: 'scored' }))
                : ((n = (0, r.changeOperationForRunnerId)(n, l.playerId, { result: 'safe' })),
                  e.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 3, l.playerId))),
              e.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, o.playerId)),
              e.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, a.playerId)),
              (this.outsCollected = 2),
              { animationOperations: n, events: e }
            );
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase !== 2 && s.toBase !== 3) return { animationOperations: l, events: [] };
            var u = (0, r.getOperationForBase)(l, s.toBase === 2 ? 3 : 2);
            if (u === void 0) throw new Error('FC DP: Could not find other runner.');
            var y = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' });
            y = (0, r.changeOperationForRunnerId)(y, u.playerId, { result: 'safe' });
            var o = [(0, r.makeBaseRunningEvent)('out_on_last_play', u.toBase, u.playerId)];
            return (this.outsCollected = 2), { animationOperations: y, events: o };
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markSafeOrSentBackAtHome('safe', s, l, u) : this.markSafeOnBase(s, l);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            return u.playerId !== s.playerId
              ? { animationOperations: l, events: [] }
              : ((this.outsCollected = 1),
                {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                });
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            if (s.toBase !== 2 && s.toBase !== 3) return { animationOperations: l, events: [] };
            var u = (0, r.getOperationForBase)(l, s.toBase === 2 ? 3 : 2);
            if (u === void 0) throw new Error('FC DP: Could not find other runner.');
            var y = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' });
            y = (0, r.changeOperationForRunnerId)(y, u.playerId, { result: 'safe' });
            var o = [(0, r.makeBaseRunningEvent)('out_on_last_play', s.toBase, s.playerId)];
            return (this.outsCollected = 2), { animationOperations: y, events: o };
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            return this.markSafeOrSentBackAtHome('sent_back', s, l, s);
          }),
          h
        );
      })(c.BasePlayResolver);
    return (Zn.FieldersChoiceDoublePlayResolver = p), Zn;
  }
  var ea = {},
    Ud;
  function lv() {
    if (Ud) return ea;
    (Ud = 1),
      Object.defineProperty(ea, '__esModule', { value: !0 }),
      (ea.FieldersChoiceTriplePlayResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            if (l.length < 4 || s.gameSituation.remainingOuts < 3)
              throw new Error('There are not enough operations and/or outs to do a FC TP.');
            var u = l,
              y = [],
              o = (0, r.getOperationForBase)(l, 4),
              a = (0, r.getOperationForBase)(l, 3),
              n = (0, r.getOperationForBase)(l, 2);
            return (
              o &&
                ((u = (0, r.changeOperationForRunnerId)(u, o.playerId, { result: 'safe' })),
                y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 4, o.playerId))),
              a && y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, a.playerId)),
              n && y.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, n.playerId)),
              { animationOperations: u, events: y }
            );
          }),
          h
        );
      })(c.BasePlayResolver);
    return (ea.FieldersChoiceTriplePlayResolver = p), ea;
  }
  var ta = {},
    Wd;
  function cv() {
    if (Wd) return ta;
    (Wd = 1), Object.defineProperty(ta, '__esModule', { value: !0 }), (ta.TripleResolver = void 0);
    var i = Q,
      c = It(),
      r = uo(),
      p = Ue(),
      v = (function (h) {
        i.__extends(s, h);
        function s() {
          var l = (h !== null && h.apply(this, arguments)) || this;
          return (l.playerAtHomeQueue = new r.Queue(2)), l;
        }
        return (
          (s.prototype.firstUpdate = function (l, u) {
            this.remainingOuts = l.gameSituation.remainingOuts;
            var y = (0, p.getPossibleScorers)(u);
            if (y.length === 0) return h.prototype.firstUpdate.call(this, l, u);
            var o = y.length > 1;
            if (o)
              for (
                var a = y.slice(0, y.length - 1), n = a.length === 2 ? -5 : -4, e = 0;
                e < a.length;
                e++
              ) {
                var t = a[e].playerId;
                (u = (0, p.changeOperationForRunnerId)(u, t, { toBase: n++, result: 'safe' })),
                  this.playerAtHomeQueue.enqueue(a[a.length - 1 - e].playerId);
              }
            var d = y[y.length - 1].playerId;
            return {
              animationOperations: (0, p.changeOperationForRunnerId)(u, d, {
                result: 'resolution_set_standard',
              }),
              events: [],
            };
          }),
          (s.prototype.handleUpdate = function (l, u) {
            return (
              (this.remainingOuts = l.gameSituation.remainingOuts),
              !this.playerAtHomeQueue.isEmpty() &&
                (0, p.getOperationForRunnerId)(u, this.playerAtHomeQueue.peek()) === void 0 &&
                u.push({
                  playerId: this.playerAtHomeQueue.dequeue(),
                  result: 'resolution_set_standard',
                  fromBase: -4,
                  toBase: 4,
                }),
              !this.playerAtHomeQueue.isEmpty() &&
                (0, p.getOperationForRunnerId)(u, this.playerAtHomeQueue.peek()) === void 0 &&
                u.push({
                  playerId: this.playerAtHomeQueue.peek(),
                  result: 'safe',
                  fromBase: -5,
                  toBase: -4,
                }),
              h.prototype.handleUpdate.call(this, l, u)
            );
          }),
          (s.prototype.markSafe = function (l, u) {
            if (l.toBase !== 4) return { animationOperations: u, events: [] };
            if (!this.playerAtHomeQueue.isEmpty()) {
              var y = this.playerAtHomeQueue.dequeue();
              u = (0, p.changeOperationForRunnerId)(u, y, {
                fromBase: -4,
                toBase: 4,
                result: 'resolution_set_standard',
              });
            }
            if (!this.playerAtHomeQueue.isEmpty()) {
              var y = this.playerAtHomeQueue.peek();
              u = (0, p.changeOperationForRunnerId)(u, y, {
                fromBase: -5,
                toBase: -4,
                result: 'safe',
              });
            }
            return {
              animationOperations: (0, p.changeOperationForRunnerId)(u, l.playerId, {
                result: 'scored',
              }),
              events: [],
            };
          }),
          (s.prototype.markOut = function (l, u) {
            if (l.toBase !== 4) return { animationOperations: u, events: [] };
            for (var y = []; this.remainingOuts === 1 && !this.playerAtHomeQueue.isEmpty(); )
              y.push(
                (0, p.makeBaseRunningEvent)(
                  'did_not_score',
                  4,
                  this.playerAtHomeQueue.dequeue(),
                  'inning_ended'
                )
              );
            return (
              y.push((0, p.makeBaseRunningEvent)('out_on_last_play', 4, l.playerId)),
              {
                animationOperations: (0, p.changeOperationForRunnerId)(u, l.playerId, {
                  result: 'safe',
                }),
                events: y,
              }
            );
          }),
          s
        );
      })(c.BasePlayResolver);
    return (ta.TripleResolver = v), ta;
  }
  var ra = {},
    $d;
  function dv() {
    if ($d) return ra;
    ($d = 1), Object.defineProperty(ra, '__esModule', { value: !0 }), (ra.AirOutResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h(s) {
          var l = v.call(this) || this;
          return (
            (l.requiredOuts = s),
            (l.initialOuts = 0),
            (l.outsNeeded = 0),
            (l.resolvedRunnerIds = new Set()),
            l
          );
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            return (this.initialOuts = s.gameSituation.outs - 1), this.handleUpdate(s, l);
          }),
          (h.prototype.handleUpdate = function (s, l) {
            var u = s.gameSituation.outs - this.initialOuts;
            if (((this.outsNeeded = this.requiredOuts - u), this.outsNeeded <= 0))
              return v.prototype.handleUpdate.call(this, s, l);
            var y = this.getUnresolvedRunnerOperations(l),
              o = this.getAutomaticOutEvents(y);
            return o.length > 0
              ? { animationOperations: l, events: o }
              : s.lastEventInfo.endedInningHalf
                ? { animationOperations: l, events: [] }
                : {
                    animationOperations: this.changeResultOfUnresolvedOperations(
                      l,
                      y,
                      'resolution_set_standard'
                    ),
                    events: [],
                  };
          }),
          (h.prototype.getUnresolvedRunnerOperations = function (s) {
            var l = (0, r.getUnresolvedOperationForBase)(s, 1, this.resolvedRunnerIds),
              u = (0, r.getUnresolvedOperationForBase)(s, 2, this.resolvedRunnerIds),
              y = (0, r.getUnresolvedOperationForBase)(s, 3, this.resolvedRunnerIds),
              o = [];
            return l && o.push(l), u && o.push(u), y && o.push(y), o;
          }),
          (h.prototype.getAutomaticOutEvents = function (s) {
            var l = this,
              u = s.length;
            return u === this.outsNeeded
              ? (s.forEach(function (y) {
                  return l.resolvedRunnerIds.add(y.playerId);
                }),
                s.map(function (y) {
                  return (0, r.makeBaseRunningEvent)('out_on_last_play', y.toBase, y.playerId);
                }))
              : [];
          }),
          (h.prototype.changeResultOfUnresolvedOperations = function (s, l, u) {
            for (var y = s, o = 0, a = l; o < a.length; o++) {
              var n = a[o];
              y = (0, r.changeOperationForRunnerId)(y, n.playerId, { result: u });
            }
            return y;
          }),
          (h.prototype.markSafe = function (s, l) {
            this.resolvedRunnerIds.add(s.playerId);
            var u = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = this.getUnresolvedRunnerOperations(u),
              o = this.getAutomaticOutEvents(y);
            return o.length > 0
              ? {
                  animationOperations: this.changeResultOfUnresolvedOperations(u, y, 'safe'),
                  events: o,
                }
              : {
                  animationOperations: this.changeResultOfUnresolvedOperations(
                    u,
                    y,
                    'resolution_set_standard'
                  ),
                  events: [],
                };
          }),
          (h.prototype.markOut = function (s, l) {
            this.resolvedRunnerIds.add(s.playerId);
            var u = (0, r.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = [(0, r.makeBaseRunningEvent)('out_on_last_play', s.toBase, s.playerId)],
              o = this.getUnresolvedRunnerOperations(u);
            return (
              (u = this.changeResultOfUnresolvedOperations(
                u,
                o,
                this.outsNeeded <= 1 ? 'safe' : 'resolution_set_standard'
              )),
              { animationOperations: u, events: y }
            );
          }),
          h
        );
      })(c.BasePlayResolver);
    return (ra.AirOutResolver = p), ra;
  }
  var na = {},
    zd;
  function fv() {
    if (zd) return na;
    (zd = 1),
      Object.defineProperty(na, '__esModule', { value: !0 }),
      (na.BatterOutAdvanceRunnersResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            return this.handleUpdate(s, l);
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (s.lastEventInfo.endedInningHalf) return v.prototype.handleUpdate.call(this, s, l);
            var u = l.find(function (y) {
              return y.toBase === 4 && y.result === 'scored';
            });
            return u === void 0
              ? v.prototype.handleUpdate.call(this, s, l)
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                    result: 'resolution_set_back',
                  }),
                  events: [],
                };
          }),
          (h.prototype.markSafe = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'scored',
                  }),
                  events: [],
                };
          }),
          (h.prototype.markOut = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                };
          }),
          (h.prototype.markSentBack = function (s, l) {
            var u = [],
              y = (0, r.getOperationForBase)(l, 3);
            if (y) {
              var o = (0, r.getOperationForBase)(l, 2);
              o && u.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 1, o.playerId)),
                u.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 2, y.playerId));
            }
            return (
              u.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 3, s.playerId)),
              {
                animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                  result: 'safe',
                }),
                events: u,
              }
            );
          }),
          h
        );
      })(c.BasePlayResolver);
    return (na.BatterOutAdvanceRunnersResolver = p), na;
  }
  var aa = {},
    Vd;
  function pv() {
    if (Vd) return aa;
    (Vd = 1),
      Object.defineProperty(aa, '__esModule', { value: !0 }),
      (aa.SacrificeBuntResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u,
              y = (0, r.getOperationForBase)(l, 1);
            if (!y) return v.prototype.firstUpdate.call(this, s, l);
            this.possibleScorer = (0, r.getOperationForBase)(l, 4);
            var o = s.gameSituation.remainingOuts === 1;
            this.possibleScorer &&
              (l = (0, r.changeOperationForRunnerId)(
                l,
                (u = this.possibleScorer) === null || u === void 0 ? void 0 : u.playerId,
                { result: o ? 'safe' : 'resolution_set_back' }
              ));
            var a = [];
            return (
              this.possibleScorer &&
                o &&
                a.push(
                  (0, r.makeBaseRunningEvent)(
                    'did_not_score',
                    4,
                    this.possibleScorer.playerId,
                    'inning_ended'
                  )
                ),
              a.push((0, r.makeBaseRunningEvent)('out_on_last_play', 1, y.playerId)),
              { animationOperations: l, events: a }
            );
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (!this.possibleScorer) return v.prototype.handleUpdate.call(this, s, l);
            var u = this.possibleScorer.playerId,
              y = (0, r.getOperationForRunnerId)(l, u) === void 0;
            return (
              y &&
                !s.lastEventInfo.endedInningHalf &&
                l.push({ playerId: u, result: 'resolution_set_back', fromBase: 4, toBase: 4 }),
              v.prototype.handleUpdate.call(this, s, l)
            );
          }),
          (h.prototype.markSafe = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'scored',
                  }),
                  events: [],
                };
          }),
          (h.prototype.markOut = function (s, l) {
            return s.toBase !== 4
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                };
          }),
          (h.prototype.markSentBack = function (s, l) {
            for (
              var u = [],
                y = 0,
                o = l.sort(function (n, e) {
                  return n.toBase - e.toBase;
                });
              y < o.length;
              y++
            ) {
              var a = o[y];
              u.push(
                (0, r.makeBaseRunningEvent)('remained_on_last_play', a.toBase - 1, a.playerId)
              ),
                (l = (0, r.changeOperationForRunnerId)(l, a.playerId, { result: 'safe' }));
            }
            return { animationOperations: l, events: u };
          }),
          h
        );
      })(c.BasePlayResolver);
    return (aa.SacrificeBuntResolver = p), aa;
  }
  var ia = {},
    Kd;
  function hv() {
    if (Kd) return ia;
    (Kd = 1),
      Object.defineProperty(ia, '__esModule', { value: !0 }),
      (ia.DoublePlayResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          var s = (v !== null && v.apply(this, arguments)) || this;
          return (
            (s.resolvedRunnerIds = new Set()),
            (s.sentBackRunnerOn3rd = !1),
            (s.recordedSecondOut = !1),
            (s.inningWillEndOn2ndOut = !1),
            s
          );
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            return (
              (this.inningWillEndOn2ndOut = s.gameSituation.remainingOuts === 1),
              this.handleUpdate(s, l)
            );
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (this.recordedSecondOut)
              return this.deferredOutBatterId
                ? {
                    animationOperations: i.__spreadArray(
                      i.__spreadArray([], l, !0),
                      [
                        {
                          playerId: this.deferredOutBatterId,
                          toBase: 1,
                          fromBase: 1,
                          result: 'out',
                        },
                      ],
                      !1
                    ),
                    events: [],
                  }
                : v.prototype.handleUpdate.call(this, s, l);
            var u = (0, r.getUnresolvedOperationForBase)(l, 4, this.resolvedRunnerIds),
              y = (0, r.getUnresolvedOperationForBase)(l, 3, this.resolvedRunnerIds),
              o = (0, r.getUnresolvedOperationForBase)(l, 2, this.resolvedRunnerIds);
            if (u)
              return o || y
                ? {
                    animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                      result: 'resolution_set_back',
                    }),
                    events: [],
                  }
                : this.automaticallyMarkOutOtherRunner(l, u);
            if (y && o) {
              var a = l;
              return (
                (a = (0, r.changeOperationForRunnerId)(a, y.playerId, {
                  result: 'resolution_set_standard',
                })),
                (a = (0, r.changeOperationForRunnerId)(a, o.playerId, {
                  result: 'resolution_set_standard',
                })),
                { animationOperations: a, events: [] }
              );
            } else {
              if (o) return this.automaticallyMarkOutOtherRunner(l, o);
              if (y) return this.automaticallyMarkOutOtherRunner(l, y);
            }
            return v.prototype.handleUpdate.call(this, s, l);
          }),
          (h.prototype.automaticallyMarkOutOtherRunner = function (s, l) {
            this.resolvedRunnerIds.add(l.playerId), (this.recordedSecondOut = !0);
            var u = (0, r.getOperationForBase)(s, 1);
            if (!u)
              throw new Error(
                'There should have been an operation for the batter at 1st, but it was missing'
              );
            return (
              (this.deferredOutBatterId = u.playerId),
              (s = (0, r.changeOperationForRunnerId)(s, u.playerId, { result: 'safe' })),
              (s = (0, r.changeOperationForRunnerId)(s, l.playerId, { result: 'safe' })),
              {
                animationOperations: s,
                events: [(0, r.makeBaseRunningEvent)('out_on_last_play', l.toBase, l.playerId)],
              }
            );
          }),
          (h.prototype.markSafeOrSentBackAtHome = function (s, l, u, y) {
            if (y.playerId !== l.playerId) return { animationOperations: u, events: [] };
            this.resolvedRunnerIds.add(l.playerId);
            var o = (0, r.changeOperationForRunnerId)(u, l.playerId, {
                result: s === 'safe' ? 'scored' : 'safe',
              }),
              a = [];
            s === 'sent_back' &&
              ((this.sentBackRunnerOn3rd = !0),
              a.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 3, l.playerId)));
            var n = (0, r.getUnresolvedOperationForBase)(u, 3, this.resolvedRunnerIds),
              e = (0, r.getUnresolvedOperationForBase)(u, 2, this.resolvedRunnerIds);
            return (
              e && n
                ? s === 'safe' &&
                  ((o = (0, r.changeOperationForRunnerId)(o, e.playerId, {
                    result: 'resolution_set_standard',
                  })),
                  (o = (0, r.changeOperationForRunnerId)(o, n.playerId, {
                    result: 'resolution_set_standard',
                  })))
                : e
                  ? (this.resolvedRunnerIds.add(e.playerId),
                    (this.recordedSecondOut = !0),
                    a.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, e.playerId)))
                  : n &&
                    (this.resolvedRunnerIds.add(n.playerId),
                    (this.recordedSecondOut = !0),
                    a.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, n.playerId))),
              { animationOperations: o, events: a }
            );
          }),
          (h.prototype.markSafeOrOutOnBase = function (s, l, u) {
            if (l.toBase !== 2 && l.toBase !== 3) return { animationOperations: u, events: [] };
            var y = (0, r.getUnresolvedOperationForBase)(
              u,
              l.toBase === 2 ? 3 : 2,
              this.resolvedRunnerIds
            );
            if (y === void 0) throw new Error('DP: Could not find other runner.');
            var o = (0, r.changeOperationForRunnerId)(u, l.playerId, { result: 'safe' });
            (o = (0, r.changeOperationForRunnerId)(o, y.playerId, { result: 'safe' })),
              this.resolvedRunnerIds.add(l.playerId),
              this.resolvedRunnerIds.add(y.playerId),
              (this.recordedSecondOut = !0);
            var a = s === 'safe' ? l : y,
              n = s === 'safe' ? y : l,
              e = [(0, r.makeBaseRunningEvent)('out_on_last_play', n.toBase, n.playerId)];
            return (
              this.sentBackRunnerOn3rd &&
                a.toBase === 3 &&
                !this.inningWillEndOn2ndOut &&
                e.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 2, a.playerId)),
              { animationOperations: o, events: e }
            );
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u
              ? this.markSafeOrSentBackAtHome('safe', s, l, u)
              : this.markSafeOrOutOnBase('safe', s, l);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            return u.playerId !== s.playerId
              ? { animationOperations: l, events: [] }
              : ((this.recordedSecondOut = !0),
                this.resolvedRunnerIds.add(s.playerId),
                {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                });
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markSafeOrOutOnBase('out', s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            return this.markSafeOrSentBackAtHome('sent_back', s, l, s);
          }),
          h
        );
      })(c.BasePlayResolver);
    return (ia.DoublePlayResolver = p), ia;
  }
  var sa = {},
    Jd;
  function yv() {
    if (Jd) return sa;
    (Jd = 1),
      Object.defineProperty(sa, '__esModule', { value: !0 }),
      (sa.TriplePlayResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          var s = (v !== null && v.apply(this, arguments)) || this;
          return (s.recordedThirdOut = !1), s;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4),
              y = (0, r.getOperationForBase)(l, 3),
              o = (0, r.getOperationForBase)(l, 2);
            if (u && y && o)
              return {
                animationOperations: (0, r.changeOperationForRunnerId)(l, u.playerId, {
                  result: 'resolution_set_back',
                }),
                events: [],
              };
            var a = (0, r.getOperationForBase)(l, 1);
            if (!a)
              throw new Error(
                'There should have been an operation for the batter at 1st, but it was missing'
              );
            this.deferredOutBatterId = a.playerId;
            var n = [],
              e = l;
            return (
              (e = (0, r.changeOperationForRunnerId)(e, a.playerId, { result: 'safe' })),
              u &&
                (n.push((0, r.makeBaseRunningEvent)('out_on_last_play', 4, u.playerId)),
                (e = (0, r.changeOperationForRunnerId)(e, u.playerId, { result: 'safe' }))),
              y && n.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, y.playerId)),
              o && n.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, o.playerId)),
              (this.recordedThirdOut = !0),
              { animationOperations: e, events: n }
            );
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (this.recordedThirdOut)
              return this.deferredOutBatterId
                ? {
                    animationOperations: i.__spreadArray(
                      i.__spreadArray([], l, !0),
                      [
                        {
                          playerId: this.deferredOutBatterId,
                          toBase: 1,
                          fromBase: 1,
                          result: 'out',
                        },
                      ],
                      !1
                    ),
                    events: [],
                  }
                : v.prototype.handleUpdate.call(this, s, l);
            var u = (0, r.getOperationForBase)(l, 3),
              y = (0, r.getOperationForBase)(l, 2);
            if (!u || !y)
              throw new Error(
                'TP: Should have had two runners in handleUpdate, but one or both is missing.'
              );
            var o = l;
            return (
              (o = (0, r.changeOperationForRunnerId)(o, u.playerId, {
                result: 'resolution_set_standard',
              })),
              (o = (0, r.changeOperationForRunnerId)(o, y.playerId, {
                result: 'resolution_set_standard',
              })),
              { animationOperations: o, events: [] }
            );
          }),
          (h.prototype.markSafeOrSentBackAtHome = function (s, l, u, y) {
            if (y.playerId !== l.playerId) return { animationOperations: u, events: [] };
            var o = (0, r.changeOperationForRunnerId)(u, l.playerId, {
                result: s === 'safe' ? 'scored' : 'safe',
              }),
              a = [];
            s === 'sent_back' &&
              a.push((0, r.makeBaseRunningEvent)('remained_on_last_play', 3, l.playerId));
            var n = (0, r.getOperationForBase)(u, 3),
              e = (0, r.getOperationForBase)(u, 2);
            if (!n || !e)
              throw new Error(
                'TP: Should have had two other runners in markSafeAtHome, but one or both is missing.'
              );
            return (
              (o = (0, r.changeOperationForRunnerId)(o, e.playerId, { result: 'safe' })),
              (o = (0, r.changeOperationForRunnerId)(o, n.playerId, { result: 'safe' })),
              a.push((0, r.makeBaseRunningEvent)('out_on_last_play', 2, e.playerId)),
              a.push((0, r.makeBaseRunningEvent)('out_on_last_play', 3, n.playerId)),
              (this.recordedThirdOut = !0),
              { animationOperations: o, events: a }
            );
          }),
          (h.prototype.markSafeOrOutOnBase = function (s, l, u) {
            if (l.toBase !== 2 && l.toBase !== 3) return { animationOperations: u, events: [] };
            var y = (0, r.getOperationForBase)(u, l.toBase === 2 ? 3 : 2);
            if (y === void 0) throw new Error('TP: Could not find other runner.');
            var o = (0, r.changeOperationForRunnerId)(u, l.playerId, { result: 'safe' });
            (o = (0, r.changeOperationForRunnerId)(o, y.playerId, { result: 'safe' })),
              (this.recordedThirdOut = !0);
            var a = s === 'safe' ? y : l,
              n = [(0, r.makeBaseRunningEvent)('out_on_last_play', a.toBase, a.playerId)];
            return { animationOperations: o, events: n };
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u
              ? this.markSafeOrSentBackAtHome('safe', s, l, u)
              : this.markSafeOrOutOnBase('safe', s, l);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            return u.playerId !== s.playerId
              ? { animationOperations: l, events: [] }
              : {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, s.playerId, {
                    result: 'safe',
                  }),
                  events: [(0, r.makeBaseRunningEvent)('out_on_last_play', 4, s.playerId)],
                };
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, r.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markSafeOrOutOnBase('out', s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            return this.markSafeOrSentBackAtHome('sent_back', s, l, s);
          }),
          h
        );
      })(c.BasePlayResolver);
    return (sa.TriplePlayResolver = p), sa;
  }
  var oa = {},
    Yd;
  function vv() {
    if (Yd) return oa;
    (Yd = 1),
      Object.defineProperty(oa, '__esModule', { value: !0 }),
      (oa.DroppedThirdStrikeResolver = void 0);
    var i = Q,
      c = Hd(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h(s, l) {
          var u = v.call(this, s) || this;
          return (u.cause = l), (u.shouldResolveOtherRunners = !1), u;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            if (l.length <= 1 || this.cause !== 'unspecified')
              return v.prototype.firstUpdate.call(this, s, l);
            var u = [],
              y = l.filter(function (n) {
                return n.toBase > 1;
              });
            if (y.length === 1) {
              var o = y[0];
              return (
                u.push((0, r.makeBaseRunningEvent)('out_on_last_play', o.toBase, o.playerId)),
                {
                  animationOperations: (0, r.changeOperationForRunnerId)(l, o.playerId, {
                    result: 'safe',
                  }),
                  events: u,
                }
              );
            }
            var a =
              l.find(function (n) {
                return n.toBase === 4;
              }) !== void 0;
            return a
              ? v.prototype.firstUpdate.call(this, s, l)
              : {
                  animationOperations: l.map(function (n) {
                    return i.__assign(i.__assign({}, n), {
                      result: n.toBase > 1 ? 'resolution_set_standard' : n.result,
                    });
                  }),
                  events: [],
                };
          }),
          (h.prototype.handleUpdate = function (s, l) {
            return this.cause === 'unspecified' &&
              this.shouldResolveOtherRunners &&
              !s.lastEventInfo.endedInningHalf
              ? {
                  animationOperations: l.map(function (u) {
                    var y = u.toBase < 4 && u.toBase > 1;
                    return i.__assign(i.__assign({}, u), {
                      result: y ? 'resolution_set_standard' : u.result,
                    });
                  }),
                  events: [],
                }
              : v.prototype.handleUpdate.call(this, s, l);
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = v.prototype.markSafe.call(this, s, l);
            if (this.cause === 'unspecified') {
              var y = l.filter(function (a) {
                return a.toBase > 1 && a.toBase < 4 && a.toBase !== s.toBase;
              });
              if (y.length === 1) {
                var o = y[0];
                u.events.push(
                  (0, r.makeBaseRunningEvent)('out_on_last_play', o.toBase, o.playerId)
                ),
                  (u.animationOperations = l.map(function (a) {
                    var n = a.playerId === s.playerId && s.toBase === 4;
                    return i.__assign(i.__assign({}, a), { result: n ? 'scored' : 'safe' });
                  }));
              } else
                u.animationOperations = u.animationOperations.map(function (a) {
                  var n = a.toBase < 4 && a.toBase > 1;
                  return i.__assign(i.__assign({}, a), {
                    result: n ? 'resolution_set_standard' : a.result,
                  });
                });
            }
            return u;
          }),
          (h.prototype.markOut = function (s, l) {
            return {
              animationOperations: l.map(function (u) {
                return i.__assign(i.__assign({}, u), { result: 'safe' });
              }),
              events: [(0, r.makeBaseRunningEvent)('out_on_last_play', s.toBase, s.playerId)],
            };
          }),
          (h.prototype.markSentBack = function (s, l) {
            var u = v.prototype.markSentBack.call(this, s, l),
              y = l.find(function (o) {
                return o.toBase > 1 && o.toBase < 4;
              });
            return (
              y &&
                this.cause === 'unspecified' &&
                u.events.push(
                  (0, r.makeBaseRunningEvent)('out_on_last_play', y.toBase, y.playerId)
                ),
              u
            );
          }),
          (h.prototype.markViolation = function (s, l) {
            var u = v.prototype.markViolation.call(this, s, l);
            if (this.cause === 'unspecified') {
              var y = l.filter(function (a) {
                return a.toBase > 1 && a.toBase < 4 && a.toBase !== s.toBase;
              });
              if (((this.shouldResolveOtherRunners = y.length > 0), y.length === 1)) {
                var o = y[0];
                u.events.push(
                  (0, r.makeBaseRunningEvent)('out_on_last_play', o.toBase, o.playerId)
                );
              }
              u.animationOperations = l.map(function (a) {
                return i.__assign(i.__assign({}, a), { result: 'safe' });
              });
            }
            return u;
          }),
          h
        );
      })(c.SingleResolver);
    return (oa.DroppedThirdStrikeResolver = p), oa;
  }
  var ua = {},
    la = {},
    Qd;
  function xi() {
    if (Qd) return la;
    (Qd = 1),
      Object.defineProperty(la, '__esModule', { value: !0 }),
      (la.BaseBackwardsCompatibleResolver = void 0);
    var i = Q,
      c = It(),
      r = Ue(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          var s = (v !== null && v.apply(this, arguments)) || this;
          return (
            (s.pendingRunnerIds = new Set()),
            (s.remainingOuts = 3),
            (s.cachedOperations = []),
            (s.decisions = { out: [], remained: [] }),
            s
          );
        }
        return (
          (h.prototype.isBackwardsCompatibleResolver = function () {
            return !0;
          }),
          (h.prototype.firstUpdate = function (s, l) {
            var u = l
              .filter(function (a) {
                return a.toBase !== 1;
              })
              .map(function (a) {
                return a.playerId;
              });
            (this.pendingRunnerIds = new Set(u)),
              (this.remainingOuts = s.gameSituation.remainingOuts);
            var y = l.find(function (a) {
              return a.toBase === 4 && a.result === 'scored';
            });
            if (!y)
              throw new Error('base_bc_resolver firstUpdate was called with no runner at home.');
            var o = (0, r.changeOperationForRunnerId)(l, y.playerId, {
              result: 'resolution_set_back',
            });
            return this.cacheAnimationOperations(o), { animationOperations: o, events: [] };
          }),
          (h.prototype.handleUpdate = function (s, l) {
            if (this.pendingRunnerIds.size > 0)
              throw (
                (console.log(this.pendingRunnerIds),
                new Error(
                  'base_bc_resolver handleUpdate was called with pending runners remaining'
                ))
              );
            var u = this.cachedOperations;
            return (
              s.lastEventInfo.endedInningHalf &&
                (u = u.map(function (y) {
                  return i.__assign(i.__assign({}, y), { result: 'removed' });
                })),
              { animationOperations: u, events: [] }
            );
          }),
          (h.prototype.cacheAnimationOperations = function (s) {
            this.cachedOperations = s
              .filter(function (l) {
                return l.result !== 'out' && l.result !== 'scored';
              })
              .map(function (l) {
                return i.__assign(i.__assign({}, l), { fromBase: l.toBase });
              });
          }),
          (h.prototype.generateEventsIfNeeded = function (s) {
            if (this.pendingRunnerIds.size > 0) return { animationOperations: s, events: [] };
            var l = [];
            return (
              this.remainingOuts > 0
                ? (l.push.apply(
                    l,
                    this.decisions.out.map(function (u) {
                      return (0, r.makeBaseRunningEvent)('out_on_last_play', u.toBase, u.playerId);
                    })
                  ),
                  l.push.apply(
                    l,
                    this.decisions.remained
                      .sort(function (u, y) {
                        return u.toBase - y.toBase;
                      })
                      .map(function (u) {
                        return (0, r.makeBaseRunningEvent)(
                          'remained_on_last_play',
                          u.toBase,
                          u.playerId
                        );
                      })
                  ))
                : (l.push.apply(
                    l,
                    this.decisions.remained
                      .filter(function (u) {
                        return u.toBase === 3;
                      })
                      .map(function (u) {
                        return (0, r.makeBaseRunningEvent)('did_not_score', u.toBase, u.playerId);
                      })
                  ),
                  l.push.apply(
                    l,
                    this.decisions.out.map(function (u) {
                      return (0, r.makeBaseRunningEvent)('out_on_last_play', u.toBase, u.playerId);
                    })
                  )),
              { animationOperations: s, events: l }
            );
          }),
          h
        );
      })(c.BasePlayResolver);
    return (la.BaseBackwardsCompatibleResolver = p), la;
  }
  var Xd;
  function gv() {
    if (Xd) return ua;
    (Xd = 1),
      Object.defineProperty(ua, '__esModule', { value: !0 }),
      (ua.BCFieldersChoiceResolver = void 0);
    var i = Q,
      c = Ue(),
      r = xi(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.markSafeAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId);
            var y = (0, c.getOperationForBase)(l, 3),
              o = (0, c.getOperationForBase)(l, 2),
              a = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'scored' });
            return (
              y &&
                (a = (0, c.changeOperationForRunnerId)(a, y.playerId, {
                  result: 'resolution_set_standard',
                })),
              o &&
                (a = (0, c.changeOperationForRunnerId)(a, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              this.cacheAnimationOperations(a),
              { animationOperations: a, events: [] }
            );
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId);
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds),
              a = l.filter(function (n) {
                return n.toBase === 3;
              }).length;
            if (s.toBase === 3 && a === 2)
              o &&
                (this.pendingRunnerIds.delete(o.playerId),
                this.decisions.out.push({ playerId: o.playerId, toBase: 2 }),
                (this.remainingOuts -= 1),
                (u = (0, c.changeOperationForRunnerId)(u, o.playerId, { result: 'out' }))),
                this.decisions.remained.push({ playerId: s.playerId, toBase: 2 }),
                (u = (0, c.changeOperationForRunnerId)(u, s.playerId, { toBase: 2 }));
            else if (s.toBase === 2 && a === 2) {
              if (!y)
                throw Error(
                  'Fielders choice: There are two runners on 3rd and both are resolved. Unable to proceed.'
                );
              this.pendingRunnerIds.delete(y.playerId),
                this.decisions.out.push({ playerId: y.playerId, toBase: 3 }),
                (this.remainingOuts -= 1),
                (u = (0, c.changeOperationForRunnerId)(u, y.playerId, { result: 'out' }));
            }
            return this.cacheAnimationOperations(u), this.generateEventsIfNeeded(u);
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, c.getOperationForBase)(this.cachedOperations, 4);
            return u
              ? this.markSafeAtHome(s, this.cachedOperations, u)
              : this.markSafeOnBase(s, this.cachedOperations);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              (this.remainingOuts -= 1),
              this.decisions.out.push({ playerId: s.playerId, toBase: 4 });
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            if (this.remainingOuts > 0) {
              var o = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
                a = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
              o &&
                (y = (0, c.changeOperationForRunnerId)(y, o.playerId, {
                  result: 'resolution_set_standard',
                })),
                a &&
                  (y = (0, c.changeOperationForRunnerId)(y, a.playerId, {
                    result: 'resolution_set_standard',
                  }));
            } else this.pendingRunnerIds.clear();
            return this.cacheAnimationOperations(y), this.generateEventsIfNeeded(y);
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.out.push({ playerId: s.playerId, toBase: s.toBase }),
              (this.remainingOuts -= 1);
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            return (
              this.remainingOuts === 0 && this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, c.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.remained.push({ playerId: s.playerId, toBase: 3 });
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe', toBase: 3 }),
              y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
            return (
              y &&
                (u = (0, c.changeOperationForRunnerId)(u, y.playerId, {
                  result: 'resolution_set_standard',
                })),
              o &&
                (u = (0, c.changeOperationForRunnerId)(u, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          h
        );
      })(r.BaseBackwardsCompatibleResolver);
    return (ua.BCFieldersChoiceResolver = p), ua;
  }
  var ca = {},
    Zd;
  function _v() {
    if (Zd) return ca;
    (Zd = 1),
      Object.defineProperty(ca, '__esModule', { value: !0 }),
      (ca.BCDoublePlayResolver = void 0);
    var i = Q,
      c = Ue(),
      r = xi(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u = v.prototype.firstUpdate.call(this, s, l),
              y = u.animationOperations,
              o = u.events;
            return this.pendingRunnerIds.size === 1
              ? this.automaticallyMarkOutOtherRunner(l)
              : { animationOperations: y, events: o };
          }),
          (h.prototype.automaticallyMarkOutOtherRunner = function (s) {
            var l = this.pendingRunnerIds.values().next().value,
              u = (0, c.getOperationForRunnerId)(s, l);
            if (!u)
              throw new Error(
                'There should have been an operation for '.concat(l, ', but it was missing')
              );
            return (
              this.pendingRunnerIds.clear(),
              this.decisions.out.push({ playerId: u.playerId, toBase: u.toBase }),
              (this.remainingOuts -= 1),
              (s = (0, c.changeOperationForRunnerId)(s, u.playerId, { result: 'out' })),
              this.cacheAnimationOperations(s),
              this.generateEventsIfNeeded(s)
            );
          }),
          (h.prototype.markSafeAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId);
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'scored' });
            if (this.pendingRunnerIds.size === 1) return this.automaticallyMarkOutOtherRunner(y);
            var o = (0, c.getOperationForBase)(l, 3),
              a = (0, c.getOperationForBase)(l, 2);
            return (
              o &&
                (y = (0, c.changeOperationForRunnerId)(y, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              a &&
                (y = (0, c.changeOperationForRunnerId)(y, a.playerId, {
                  result: 'resolution_set_standard',
                })),
              this.cacheAnimationOperations(y),
              { animationOperations: y, events: [] }
            );
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
            if (!o || !y)
              throw new Error(
                'bc_double_play_resolver: There should have been runners on 2nd and 3rd, but one or both is missing.'
              );
            this.pendingRunnerIds.delete(s.playerId);
            var a;
            if (s.toBase === 2) a = y;
            else if (s.toBase === 3) a = o;
            else
              throw new Error(
                'bc_dp_resolver: markSafeOnBase. runnerOperation should be for 2nd or 3rd, but was '.concat(
                  s.toBase
                )
              );
            this.pendingRunnerIds.delete(a.playerId),
              this.decisions.out.push({ playerId: a.playerId, toBase: a.toBase }),
              (this.remainingOuts -= 1),
              (u = (0, c.changeOperationForRunnerId)(u, a.playerId, { result: 'out' }));
            var n = l.filter(function (e) {
              return e.toBase === 3;
            }).length;
            return (
              s.toBase === 3 &&
                n === 2 &&
                (this.decisions.remained.push({ playerId: s.playerId, toBase: 2 }),
                (u = (0, c.changeOperationForRunnerId)(u, s.playerId, { toBase: 2 }))),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, c.getOperationForBase)(this.cachedOperations, 4);
            return u
              ? this.markSafeAtHome(s, this.cachedOperations, u)
              : this.markSafeOnBase(s, this.cachedOperations);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              (this.remainingOuts -= 1),
              this.decisions.out.push({ playerId: s.playerId, toBase: 4 });
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            return (
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(y),
              this.generateEventsIfNeeded(y)
            );
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.out.push({ playerId: s.playerId, toBase: s.toBase }),
              (this.remainingOuts -= 1);
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            this.pendingRunnerIds.forEach(function (a) {
              return (u = (0, c.changeOperationForRunnerId)(u, a, { result: 'safe' }));
            });
            var y = u.filter(function (a) {
              return a.toBase === 3 && a.result === 'safe';
            }).length;
            if (s.toBase === 2 && y === 2) {
              var o = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds);
              if (!o)
                throw new Error('bc_dp_resolver: Could not find expected pending runner on 3rd');
              this.decisions.remained.push({ playerId: o.playerId, toBase: 2 }),
                (u = (0, c.changeOperationForRunnerId)(u, o.playerId, {
                  toBase: 2,
                  result: 'safe',
                })),
                this.pendingRunnerIds.delete(o.playerId);
            }
            return (
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, c.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.remained.push({ playerId: s.playerId, toBase: 3 });
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe', toBase: 3 });
            if (this.pendingRunnerIds.size === 1) return this.automaticallyMarkOutOtherRunner(u);
            var y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
            return (
              y &&
                (u = (0, c.changeOperationForRunnerId)(u, y.playerId, {
                  result: 'resolution_set_standard',
                })),
              o &&
                (u = (0, c.changeOperationForRunnerId)(u, o.playerId, {
                  result: 'resolution_set_standard',
                })),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          h
        );
      })(r.BaseBackwardsCompatibleResolver);
    return (ca.BCDoublePlayResolver = p), ca;
  }
  var da = {},
    ef;
  function Sv() {
    if (ef) return da;
    (ef = 1),
      Object.defineProperty(da, '__esModule', { value: !0 }),
      (da.BCTriplePlayResolver = void 0);
    var i = Q,
      c = Ue(),
      r = xi(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u = v.prototype.firstUpdate.call(this, s, l),
              y = u.animationOperations,
              o = u.events;
            return this.pendingRunnerIds.size === 2
              ? this.automaticallyMarkOutOtherRunners(l)
              : { animationOperations: y, events: o };
          }),
          (h.prototype.automaticallyMarkOutOtherRunners = function (s) {
            var l = this;
            return (
              this.pendingRunnerIds.forEach(function (u) {
                var y = (0, c.getOperationForRunnerId)(s, u);
                if (!y)
                  throw new Error(
                    'There should have been an operation for '.concat(u, ', but it was missing')
                  );
                l.decisions.out.push({ playerId: y.playerId, toBase: y.toBase }),
                  (s = (0, c.changeOperationForRunnerId)(s, y.playerId, { result: 'out' })),
                  (l.remainingOuts -= 1);
              }),
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(s),
              this.generateEventsIfNeeded(s)
            );
          }),
          (h.prototype.markSafeAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId);
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'scored' });
            if (this.pendingRunnerIds.size === 2) return this.automaticallyMarkOutOtherRunners(y);
            throw new Error('bc_tp_resolver. Should have been two other pending runners.');
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
            if (!o || !y)
              throw new Error(
                'bc_triple_play_resolver: There should have been runners on 2nd and 3rd, but one or both is missing.'
              );
            this.pendingRunnerIds.delete(s.playerId);
            var a;
            if (s.toBase === 2) a = y;
            else if (s.toBase === 3) a = o;
            else
              throw new Error(
                'bc_tp_resolver: markSafeOnBase. runnerOperation should be for 2nd or 3rd, but was '.concat(
                  s.toBase
                )
              );
            return (
              this.pendingRunnerIds.delete(a.playerId),
              this.decisions.out.push({ playerId: a.playerId, toBase: a.toBase }),
              (this.remainingOuts -= 1),
              (u = (0, c.changeOperationForRunnerId)(u, a.playerId, { result: 'out' })),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, c.getOperationForBase)(this.cachedOperations, 4);
            return u
              ? this.markSafeAtHome(s, this.cachedOperations, u)
              : this.markSafeOnBase(s, this.cachedOperations);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              (this.remainingOuts -= 1),
              this.decisions.out.push({ playerId: s.playerId, toBase: 4 });
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            return (
              this.pendingRunnerIds.forEach(function (o) {
                y = (0, c.changeOperationForRunnerId)(y, o, { result: 'resolution_set_standard' });
              }),
              this.cacheAnimationOperations(y),
              this.generateEventsIfNeeded(y)
            );
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.out.push({ playerId: s.playerId, toBase: s.toBase }),
              (this.remainingOuts -= 1);
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            return (
              this.pendingRunnerIds.forEach(function (y) {
                return (u = (0, c.changeOperationForRunnerId)(u, y, { result: 'safe' }));
              }),
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, c.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.remained.push({ playerId: s.playerId, toBase: 3 });
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe', toBase: 3 });
            return this.automaticallyMarkOutOtherRunners(u);
          }),
          h
        );
      })(r.BaseBackwardsCompatibleResolver);
    return (da.BCTriplePlayResolver = p), da;
  }
  var fa = {},
    tf;
  function Pv() {
    if (tf) return fa;
    (tf = 1),
      Object.defineProperty(fa, '__esModule', { value: !0 }),
      (fa.BCFCDoublePlayResolver = void 0);
    var i = Q,
      c = Ue(),
      r = xi(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.firstUpdate = function (s, l) {
            var u = v.prototype.firstUpdate.call(this, s, l),
              y = u.animationOperations,
              o = u.events;
            return this.pendingRunnerIds.size === 2
              ? this.automaticallyMarkOutOtherRunners(l)
              : { animationOperations: y, events: o };
          }),
          (h.prototype.automaticallyMarkOutOtherRunners = function (s) {
            var l = this;
            return (
              this.pendingRunnerIds.forEach(function (u) {
                var y = (0, c.getOperationForRunnerId)(s, u);
                if (!y)
                  throw new Error(
                    'There should have been an operation for '.concat(u, ', but it was missing')
                  );
                l.decisions.out.push({ playerId: y.playerId, toBase: y.toBase }),
                  (s = (0, c.changeOperationForRunnerId)(s, y.playerId, { result: 'out' })),
                  (l.remainingOuts -= 1);
              }),
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(s),
              this.generateEventsIfNeeded(s)
            );
          }),
          (h.prototype.markSafeAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId);
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'scored' });
            if (this.pendingRunnerIds.size === 2) return this.automaticallyMarkOutOtherRunners(y);
            throw new Error('bc_fc_dp_resolver. Should have been two other pending runners.');
          }),
          (h.prototype.markSafeOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe' }),
              y = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds),
              o = (0, c.getPendingOperationForBase)(l, 2, this.pendingRunnerIds);
            if (!o || !y)
              throw new Error(
                'bc_fc_double_play_resolver: There should have been runners on 2nd and 3rd, but one or both is missing.'
              );
            this.pendingRunnerIds.delete(s.playerId);
            var a;
            if (s.toBase === 2) a = y;
            else if (s.toBase === 3) a = o;
            else
              throw new Error(
                'bc_fc_dp_resolver: markSafeOnBase. runnerOperation should be for 2nd or 3rd, but was '.concat(
                  s.toBase
                )
              );
            this.pendingRunnerIds.delete(a.playerId),
              this.decisions.out.push({ playerId: a.playerId, toBase: a.toBase }),
              (this.remainingOuts -= 1),
              (u = (0, c.changeOperationForRunnerId)(u, a.playerId, { result: 'out' }));
            var n = l.filter(function (e) {
              return e.toBase === 3;
            }).length;
            return (
              s.toBase === 3 &&
                n === 2 &&
                (this.decisions.remained.push({ playerId: s.playerId, toBase: 2 }),
                (u = (0, c.changeOperationForRunnerId)(u, s.playerId, { toBase: 2 }))),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markSafe = function (s, l) {
            var u = (0, c.getOperationForBase)(this.cachedOperations, 4);
            return u
              ? this.markSafeAtHome(s, this.cachedOperations, u)
              : this.markSafeOnBase(s, this.cachedOperations);
          }),
          (h.prototype.markOutAtHome = function (s, l, u) {
            if (u.playerId !== s.playerId) return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              (this.remainingOuts -= 1),
              this.decisions.out.push({ playerId: s.playerId, toBase: 4 });
            var y = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            return (
              this.pendingRunnerIds.forEach(function (o) {
                y = (0, c.changeOperationForRunnerId)(y, o, { result: 'resolution_set_standard' });
              }),
              this.cacheAnimationOperations(y),
              this.generateEventsIfNeeded(y)
            );
          }),
          (h.prototype.markOutOnBase = function (s, l) {
            if (s.toBase === 1 || !this.pendingRunnerIds.has(s.playerId))
              return { animationOperations: l, events: [] };
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.out.push({ playerId: s.playerId, toBase: s.toBase }),
              (this.remainingOuts -= 1);
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'out' });
            this.pendingRunnerIds.forEach(function (a) {
              return (u = (0, c.changeOperationForRunnerId)(u, a, { result: 'safe' }));
            });
            var y = u.filter(function (a) {
              return a.toBase === 3 && a.result === 'safe';
            }).length;
            if (s.toBase === 2 && y === 2) {
              var o = (0, c.getPendingOperationForBase)(l, 3, this.pendingRunnerIds);
              if (!o)
                throw new Error('bc_dp_resolver: Could not find expected pending runner on 3rd');
              this.decisions.remained.push({ playerId: o.playerId, toBase: 2 }),
                (u = (0, c.changeOperationForRunnerId)(u, o.playerId, {
                  toBase: 2,
                  result: 'safe',
                })),
                this.pendingRunnerIds.delete(o.playerId);
            }
            return (
              this.pendingRunnerIds.clear(),
              this.cacheAnimationOperations(u),
              this.generateEventsIfNeeded(u)
            );
          }),
          (h.prototype.markOut = function (s, l) {
            var u = (0, c.getOperationForBase)(l, 4);
            return u ? this.markOutAtHome(s, l, u) : this.markOutOnBase(s, l);
          }),
          (h.prototype.markSentBack = function (s, l) {
            this.pendingRunnerIds.delete(s.playerId),
              this.decisions.remained.push({ playerId: s.playerId, toBase: 3 });
            var u = (0, c.changeOperationForRunnerId)(l, s.playerId, { result: 'safe', toBase: 3 });
            if (this.pendingRunnerIds.size === 2) return this.automaticallyMarkOutOtherRunners(u);
            throw new Error('bc_fc_dp_resolver. Could not find expected two other base runners');
          }),
          h
        );
      })(r.BaseBackwardsCompatibleResolver);
    return (fa.BCFCDoublePlayResolver = p), fa;
  }
  var rf;
  function Iv() {
    if (rf) return Kn;
    (rf = 1),
      Object.defineProperty(Kn, '__esModule', { value: !0 }),
      (Kn.BasePlayResolverFactory = void 0);
    var i = Hd(),
      c = sv(),
      r = ov(),
      p = uv(),
      v = lv(),
      h = cv(),
      s = dv(),
      l = fv(),
      u = pv(),
      y = hv(),
      o = yv(),
      a = vv(),
      n = gv(),
      e = _v(),
      t = Sv(),
      d = Pv(),
      f = (function () {
        function _() {}
        return (
          (_.create = function (S, P, I, b, E) {
            var T = S;
            switch (T.attributes.playResult) {
              case 'single':
              case 'sacrifice_bunt_error':
              case 'sacrifice_fly_error':
              case 'error':
                return new i.SingleResolver(b);
              case 'double':
                return new c.DoubleResolver();
              case 'triple':
                return new h.TripleResolver();
              case 'sacrifice_bunt':
                return new u.SacrificeBuntResolver();
              case 'dropped_third_strike':
                var F = S;
                return new a.DroppedThirdStrikeResolver(b, F.attributes.cause);
              case 'fielders_choice':
                switch (T.attributes.extendedPlayResult) {
                  case 'double_play':
                    if (this.isValidFieldersChoiceDoublePlayState(P, I))
                      return this.shouldUseBackwardsCompatibleResolver(P, E)
                        ? new d.BCFCDoublePlayResolver()
                        : new p.FieldersChoiceDoublePlayResolver();
                    break;
                  case 'triple_play':
                    if (this.isValidFieldersChoiceTriplePlayState(P, I))
                      return new v.FieldersChoiceTriplePlayResolver();
                    break;
                }
                return this.shouldUseBackwardsCompatibleResolver(P, E)
                  ? new n.BCFieldersChoiceResolver()
                  : new r.FieldersChoiceResolver();
              case 'batter_out':
                var R = 1;
                switch (T.attributes.extendedPlayResult) {
                  case 'double_play':
                    this.isValidDoublePlayState(P, I) && (R = 2);
                    break;
                  case 'triple_play':
                    this.isValidTriplePlayState(P, I) && (R = 3);
                    break;
                }
                return new s.AirOutResolver(R);
              case 'batter_out_advance_runners':
                switch (T.attributes.extendedPlayResult) {
                  case 'double_play':
                    if (this.isValidDoublePlayState(P, I))
                      return this.shouldUseBackwardsCompatibleResolver(P, E)
                        ? new e.BCDoublePlayResolver()
                        : new y.DoublePlayResolver();
                    break;
                  case 'triple_play':
                    if (this.isValidTriplePlayState(P, I))
                      return this.shouldUseBackwardsCompatibleResolver(P, E)
                        ? new t.BCTriplePlayResolver()
                        : new o.TriplePlayResolver();
                    break;
                }
                return new l.BatterOutAdvanceRunnersResolver();
              default:
                return;
            }
          }),
          (_.isValidFieldersChoiceDoublePlayState = function (S, P) {
            return S.gameSituation.remainingOuts >= 2 && P.length >= 3;
          }),
          (_.isValidFieldersChoiceTriplePlayState = function (S, P) {
            return S.gameSituation.remainingOuts >= 3 && P.length >= 4;
          }),
          (_.isValidDoublePlayState = function (S, P) {
            return (
              (S.gameSituation.remainingOuts === 1 || S.gameSituation.remainingOuts === 2) &&
              P.length >= 2
            );
          }),
          (_.isValidTriplePlayState = function (S, P) {
            return S.gameSituation.remainingOuts === 2 && P.length >= 3;
          }),
          (_.shouldUseBackwardsCompatibleResolver = function (S, P) {
            return S.scoredOnLastEvent.length !== 0 && P;
          }),
          _
        );
      })();
    return (Kn.BasePlayResolverFactory = f), Kn;
  }
  var nf;
  function mv() {
    if (nf) return Vn;
    (nf = 1),
      Object.defineProperty(Vn, '__esModule', { value: !0 }),
      (Vn.BaserunnerResolver = void 0);
    var i = Q,
      c = Iv(),
      r = Ue(),
      p = (function () {
        function v(h, s) {
          (this.isViolationAvailable = h),
            (this.backwardsCompatibleSentBackRunner = s),
            (this.cachedAnimationOperations = []);
        }
        return (
          (v.prototype.isUsingBackwardsCompatibleResolver = function () {
            var h, s;
            return (s =
              (h = this.resolver) === null || h === void 0
                ? void 0
                : h.isBackwardsCompatibleResolver()) !== null && s !== void 0
              ? s
              : !1;
          }),
          (v.prototype.pushScratchEvents = function (h, s, l) {
            var u, y;
            if (this.resolver !== void 0) {
              var o = this.resolver.handleUpdate(s, l);
              return this.updateCachedAnimationOperations(o.animationOperations), o;
            }
            var a = h.find(function (e) {
              return e.code === 'ball_in_play';
            });
            if (a === void 0) return { animationOperations: l, events: [] };
            this.resolver = c.BasePlayResolverFactory.create(
              a,
              s,
              l,
              this.isViolationAvailable,
              this.backwardsCompatibleSentBackRunner
            );
            var n =
              (y = (u = this.resolver) === null || u === void 0 ? void 0 : u.firstUpdate(s, l)) !==
                null && y !== void 0
                ? y
                : { animationOperations: l, events: [] };
            return this.updateCachedAnimationOperations(n.animationOperations), n;
          }),
          (v.prototype.updateCachedAnimationOperations = function (h) {
            this.cachedAnimationOperations = h
              .filter(function (s) {
                switch (s.result) {
                  case 'removed':
                  case 'out':
                  case 'scored':
                  case 'subbedOut':
                  case 'poof':
                    return !1;
                  case 'resolution_set_back':
                  case 'resolution_set_standard':
                  case 'resolution_set_violation':
                  case 'safe':
                  case 'subbedIn':
                    return !0;
                  default:
                    throw 'Unknown operation result '.concat(s.result);
                }
              })
              .map(function (s) {
                return i.__assign(i.__assign({}, s), { fromBase: s.toBase });
              });
          }),
          (v.prototype.markResolution = function (h, s) {
            var l,
              u,
              y = (0, r.getOperationForRunnerId)(this.cachedAnimationOperations, s);
            if (!this.isValidResolution(h, y))
              return { animationOperations: this.cachedAnimationOperations, events: [] };
            var o =
              (u =
                (l = this.resolver) === null || l === void 0
                  ? void 0
                  : l.markResolution(h, y, this.cachedAnimationOperations)) !== null && u !== void 0
                ? u
                : { animationOperations: [], events: [] };
            return this.updateCachedAnimationOperations(o.animationOperations), o;
          }),
          (v.prototype.isValidResolution = function (h, s) {
            return s === void 0 ? !1 : h === 'violation' || h === 'sent_back' ? s.toBase === 4 : !0;
          }),
          v
        );
      })();
    return (Vn.BaserunnerResolver = p), Vn;
  }
  var af;
  function bv() {
    if (af) return Gt;
    (af = 1),
      Object.defineProperty(Gt, '__esModule', { value: !0 }),
      (Gt.BaseballCompactorController =
        Gt.BaseballTranscoderController =
        Gt.BaseballControllerMixin =
          void 0);
    var i = Q,
      c = i.__importStar(Se),
      r = i.__importStar(dt()),
      p = dt(),
      v = Nt,
      h = Cy(),
      s = My(),
      l = xy(),
      u = Ly(),
      y = Dy(),
      o = Gy(),
      a = Hy(),
      n = Ny(),
      e = jy(),
      t = qy(),
      d = Uy(),
      f = Vy(),
      _ = Jy(),
      S = Qy(),
      P = He(),
      I = Pt(),
      b = i.__importStar(at()),
      E = i.__importStar(Tr()),
      T = Xy(),
      F = rv(),
      R = nv(),
      L = Cd(),
      x = av(),
      N = iv(),
      M = mv(),
      J = (function () {
        function z() {}
        return (
          (z.prototype.initializeEngines = function (q) {
            (this.context = this.transformInputContext(q)),
              (this.situation = new h.SituationEngine([])),
              (this.plays = new e.PlaysEngine([], this.situation)),
              (this.fielders = new y.FieldersEngine([], this.situation)),
              (this.lineup = new s.LineupEngine([], this.situation)),
              (this.sprayChart = new l.SprayChartEngine(
                [],
                this.situation,
                this.lineup,
                this.fielders
              )),
              (this.pitchData = new u.PitchDataEngine([], this.situation, this.fielders)),
              (this.baserunners = new o.BaserunnerEngine([], this.situation, this.lineup)),
              (this.actionContext = new a.ActionContextEngine(
                [],
                this.situation,
                this.lineup,
                this.baserunners
              )),
              (this.earnedRuns = new n.EarnedRunEngine(
                [],
                this.situation,
                this.lineup,
                this.fielders,
                this.baserunners
              )),
              (this.playByPlay = new f.PlayByPlayEngine(
                [],
                this.context,
                this.situation,
                this.lineup,
                this.fielders,
                this.baserunners
              )),
              (this.statEvents = new S.StatEventsEngine(
                [],
                this.context,
                this.baserunners,
                this.situation,
                this.lineup,
                this.fielders,
                this.plays
              )),
              (this.perInning = new d.PerInningEngine(
                [],
                this.situation,
                this.baserunners,
                this.fielders
              )),
              (this.stats = new _.StatsEngine(
                [],
                this.context,
                this.baserunners,
                this.situation,
                this.lineup,
                this.fielders,
                this.earnedRuns,
                this.statEvents
              )),
              (this.history = new t.HistoryEngine([], this.situation, this.lineup, this.fielders)),
              (this.engines = [
                this.plays,
                this.situation,
                this.fielders,
                this.lineup,
                this.sprayChart,
                this.pitchData,
                this.baserunners,
                this.actionContext,
                this.earnedRuns,
                this.playByPlay,
                this.statEvents,
                this.perInning,
                this.stats,
                this.history,
              ]);
          }),
          (z.prototype.unpivotSeasonStats = function (q) {
            if (q !== void 0) {
              for (
                var V = { players: {}, stats: { offense: {}, defense: {}, general: {} } },
                  U = 0,
                  j = q.player;
                U < j.length;
                U++
              ) {
                var re = j[U];
                V.players[re.id] = { stats: { offense: {}, defense: {}, general: {} } };
              }
              return (
                ['offense', 'defense', 'general'].map(function (se) {
                  q.team[se].map(function (ce) {
                    var ae = ce;
                    V.stats[se][ae.s] = ae.v;
                  }),
                    q.player.map(function (ce) {
                      ce[se].map(function (ae) {
                        var ue = ae;
                        V.players[ce.id].stats[se][ue.s] = ue.v;
                      });
                    });
                }),
                V
              );
            }
          }),
          (z.prototype.transformInputContext = function (q) {
            var V,
              U,
              j = {};
            if (
              ((j.playerNames = q.playerNames),
              (j.inningsPerGame = q.inningsPerGame),
              (j.seasonStatsTeamId = q.seasonStatsTeamId),
              (j.seasonStats = this.unpivotSeasonStats(q.seasonStats)),
              (j.playByPlayMetadataKeys = q.playByPlayMetadataKeys),
              (j.sport = q.sport),
              (j.backwardsCompatibleSentBackRunner =
                (V = q.backwardsCompatibleSentBackRunner) !== null && V !== void 0 ? V : !1),
              (j.sanityCheckEvents = (U = q.sanityCheckEvents) !== null && U !== void 0 ? U : !1),
              (j.isLLViolationAvailable = q.ageGroup === 'youth'),
              q.sport === 'baseball')
            )
              switch (((j.defaultPickOffPosition = 'P'), (j.enableIllegalPitch = !1), q.ageGroup)) {
                case 'youth':
                  (j.enableIllegalPitch = !0),
                    (j.FIPConstant = 3.5),
                    (j.FIPHRValue = 1.48),
                    (j.FIPBBValue = 0.4),
                    (j.FIPIncludeHBPWithBB = !0),
                    (j.FIPSOValue = 0.36);
                  break;
                case 'prep':
                  (j.FIPConstant = 3.2),
                    (j.FIPHRValue = 1.45),
                    (j.FIPBBValue = 0.38),
                    (j.FIPIncludeHBPWithBB = !0),
                    (j.FIPSOValue = 0.31);
                  break;
                case 'college':
                  (j.FIPConstant = 3.2),
                    (j.FIPHRValue = 1.44),
                    (j.FIPBBValue = 0.37),
                    (j.FIPIncludeHBPWithBB = !0),
                    (j.FIPSOValue = 0.29);
                  break;
                case 'adult':
                  (j.FIPConstant = 3.2),
                    (j.FIPHRValue = 1.4),
                    (j.FIPBBValue = 0.34),
                    (j.FIPIncludeHBPWithBB = !0),
                    (j.FIPSOValue = 0.23);
                  break;
              }
            else
              switch (((j.defaultPickOffPosition = 'C'), (j.enableIllegalPitch = !0), q.ageGroup)) {
                case 'youth':
                case 'prep':
                case 'college':
                  (j.FIPConstant = 3.3),
                    (j.FIPHRValue = 1.44),
                    (j.FIPBBValue = 0.36),
                    (j.FIPIncludeHBPWithBB = !1),
                    (j.FIPSOValue = 0.27);
                  break;
                case 'adult':
                  (j.FIPConstant = 3.5),
                    (j.FIPHRValue = 1.47),
                    (j.FIPBBValue = 0.42),
                    (j.FIPIncludeHBPWithBB = !1),
                    (j.FIPSOValue = 0.39);
                  break;
              }
            return j;
          }),
          (z.prototype.getDerivedMultiGamePivotedStatsWithBaseStats = function (q) {
            return this.stats.getDerivedMultiGamePivotedStatsWithBaseStats(q);
          }),
          (z.prototype.getDerivedMultiGameStatsWithBaseStats = function (q) {
            return this.stats.getDerivedMultiGameStatsWithBaseStats(q);
          }),
          z
        );
      })();
    Gt.BaseballControllerMixin = J;
    var D = (function (z) {
      i.__extends(q, z);
      function q(V, U) {
        var j = z.call(this) || this;
        (j.stateAccessorClass = F.StateAccessor),
          (j.numberOfDecisionEvents = 0),
          j.initializeEngines(U),
          (j.transcoder = new v.Transcoder(
            V,
            j.legacyEvents,
            j.situation,
            j.lineup,
            j.fielders,
            j.baserunners
          ));
        for (var re = 0, se = j.engines; re < se.length; re++) {
          var ce = se[re];
          ce.baseEvents = j.transcoder.outStream;
        }
        return (
          (j.stateAccessorClass = F.StateAccessor),
          j.push({
            code: 'set_teams',
            id: 'auto_generated_set_teams',
            passThrough: !0,
            attributes: { homeId: V.homeTeamId, awayId: V.awayTeamId },
          }),
          j
        );
      }
      return (
        (q.prototype.pushEventsFromCompletedStream = function (V) {
          this.numberOfDecisionEvents > 0 && this.rollbackDecisionEvents();
          var U = this.transcoder.outStream.length;
          this.transcoder.pushEventsFromCompletedStream(V),
            (this.numberOfDecisionEvents = this.transcoder.outStream.length - U);
        }),
        (q.prototype.rollbackDecisionEvents = function () {
          this.transcoder.outStream.splice(
            this.transcoder.outStream.length - this.numberOfDecisionEvents,
            this.numberOfDecisionEvents
          ),
            this.setEngineOutStreamAndIndex(this.transcoder.outStream.length),
            (this.numberOfDecisionEvents = 0);
        }),
        (q.prototype.push = function (V) {
          return (
            this.numberOfDecisionEvents > 0 && this.rollbackDecisionEvents(),
            z.prototype.push.call(this, V)
          );
        }),
        (q.prototype.updateFromPushPayload = function (V, U) {
          return (
            this.numberOfDecisionEvents > 0 && this.rollbackDecisionEvents(),
            z.prototype.updateFromPushPayload.call(this, V, U)
          );
        }),
        q
      );
    })(r.TranscoderController);
    Gt.BaseballTranscoderController = D;
    var $ = (function (z) {
      i.__extends(q, z);
      function q(V) {
        var U = z.call(this) || this;
        (U.stateAccessorClass = F.StateAccessor),
          U.initializeEngines(V),
          (U.compactor = new E.SabertoothEventCompactor());
        for (var j = 0, re = c.values(U.compactor.componentStreams); j < re.length; j++) {
          var se = re[j];
          se.eventBlacklistedForUndo = function (pe) {
            return pe.code === 'set_teams';
          };
        }
        for (var ce = 0, ae = U.engines; ce < ae.length; ce++) {
          var ue = ae[ce];
          ue.baseEvents = U.compactor.outStream;
        }
        return U;
      }
      return (
        (q.prototype.pushAndFetch = function (V) {
          this.sanityCheckPushedEvent(V);
          var U,
            j = { sequenceNumber: this.inStreamLength(), eventId: V.id };
          if (V.code === 'undo')
            (U = this.getAnimationOperationsForLatestInStreamEvent(!0)),
              (U = this.invertAnimationOperations(U)),
              this.pushBatch(
                [V],
                this.context.sanityCheckEvents ? 'strictlyCheckUndoRedo' : 'looselyCheckUndoRedo'
              );
          else {
            var re = this.shouldSkipAnimationOperations(V);
            this.pushBatch(
              [V],
              this.context.sanityCheckEvents ? 'strictlyCheckUndoRedo' : 'looselyCheckUndoRedo'
            ),
              (U = re ? [] : this.getAnimationOperationsForLatestInStreamEvent(!1));
          }
          return (
            (U = this.coalesceAnimationOperations(U)),
            i.__assign(i.__assign({}, this.internalGetLatestScorekeepingState(U)), {
              sequenceNumberPair: j,
            })
          );
        }),
        (q.prototype.sanityCheckPushedEvent = function (V) {
          if (this.context.sanityCheckEvents) {
            var U = V,
              j = this.firstScratchEventId();
            if (U.code === 'base_running') {
              var re = j ? this.stateBeforeEvent(j) : this.latestState(),
                se = U,
                ce = se.attributes.runnerId,
                ae = se.attributes.base,
                ue = re.baserunners;
              if (
                (ae === 1 && ue[1] !== void 0) ||
                (ae === 2 && ue[2] !== void 0) ||
                (ae === 3 && ue[3] !== void 0)
              )
                throw new p.SabertoothError(
                  'illegal_base_running',
                  'base_running event had destination base that was not empty'
                );
              if (ue[1] !== ce && ue[2] !== ce && ue[3] !== ce && ue[-2] !== ce && ue[-3] !== ce)
                throw new p.SabertoothError(
                  'illegal_base_running',
                  'base_running event had runnerId that was not on base'
                );
              return;
            }
            if (U.code === 'transaction') {
              var pe = U;
              if (pe.events.length === 0) return;
              U = pe.events[0];
            }
            if (U.code === 'pitch') {
              var De = this.situation.stateBeforeEventIdOrLatest(j).atBatTeamId,
                W = this.lineup.stateBeforeEventIdOrLatest(j).currentBatter(De);
              if (W === void 0)
                throw new p.SabertoothError('unset_batter', 'event received with no batter set');
              return;
            }
          }
        }),
        (q.prototype.shouldSkipAnimationOperations = function (V) {
          var U = this.scratch;
          if (U.length === 0) return !1;
          if (V.code === 'transaction') {
            var j = V.events;
            return U.length !== j.length
              ? !1
              : c.zip(U, j).every(function (re) {
                  return re[0].id === re[1].id;
                });
          } else return U.length !== 1 ? !1 : U[0].id === V.id;
        }),
        (q.prototype.pushBatchAndFetch = function (V) {
          return this.pushBatch(V), this.internalGetLatestScorekeepingState([]);
        }),
        (q.prototype.pushBatchToScratchAndFetch = function (V) {
          var U = this.scratch.length > 0;
          this.pushBatchToScratch(V);
          var j = this.getAnimationOperationsForScratchEvents(V);
          j = this.coalesceAnimationOperations(j);
          var re = this.internalGetLatestScorekeepingState(j);
          (!U || this.baserunnerResolver === void 0) &&
            (this.baserunnerResolver = new M.BaserunnerResolver(
              this.context.isLLViolationAvailable,
              this.context.backwardsCompatibleSentBackRunner
            ));
          var se = this.baserunnerResolver.pushScratchEvents(
            V,
            re.scorekeepingState,
            re.animationOperations
          );
          return i.__assign(i.__assign({}, re), se);
        }),
        (q.prototype.markSafe = function (V) {
          return this.markResolution('safe', V);
        }),
        (q.prototype.markOut = function (V) {
          return this.markResolution('out', V);
        }),
        (q.prototype.markSentBack = function (V) {
          return this.markResolution('sent_back', V);
        }),
        (q.prototype.markViolation = function (V) {
          return this.markResolution('violation', V);
        }),
        (q.prototype.markResolution = function (V, U) {
          var j,
            re,
            se,
            ce,
            ae =
              (re =
                (j = this.baserunnerResolver) === null || j === void 0
                  ? void 0
                  : j.markResolution(V, U)) !== null && re !== void 0
                ? re
                : { animationOperations: [], events: [] },
            ue =
              (ce =
                (se = this.baserunnerResolver) === null || se === void 0
                  ? void 0
                  : se.isUsingBackwardsCompatibleResolver()) !== null && ce !== void 0
                ? ce
                : !1,
            pe = this.internalGetLatestScorekeepingState(ae.animationOperations, ue);
          return { animationOperations: pe.animationOperations, events: ae.events };
        }),
        (q.prototype.clearScratchAndFetch = function () {
          var V = this.getAnimationOperationsForScratchEvents(this.scratch);
          return (
            (V = this.invertAnimationOperations(V)),
            (V = this.coalesceAnimationOperations(V)),
            this.clearScratch(),
            this.internalGetLatestScorekeepingState(V)
          );
        }),
        (q.prototype.getLatestScorekeepingState = function () {
          return this.internalGetLatestScorekeepingState([]);
        }),
        (q.prototype.internalGetLatestScorekeepingState = function (V, U) {
          U === void 0 && (U = !1);
          var j = this.outputStream(),
            re = j.length > 0 ? j[j.length - 1] : void 0,
            se = this.latestState().scorekeepingState,
            ce = [];
          return (
            U ? (ce = V) : (ce = this.addStationaryBaserunnersToAnimationOperations(V, se)),
            {
              scorekeepingState: se,
              undoRedoAvailability: this.undoRedoAvailability('main'),
              lastEventId: re === void 0 ? void 0 : re.id,
              animationOperations: ce,
            }
          );
        }),
        (q.prototype.getAnimationOperationsForLatestInStreamEvent = function (V) {
          var U,
            j,
            re,
            se,
            ce,
            ae = this.compactor.inStream;
          if (ae.length === 0) return [];
          var ue = this.compactor.componentStreams.main,
            pe = V
              ? this.compactor.eventTargetedByUndoSubjectToBlacklist('main')
              : ae[ae.length - 1];
          if (
            pe === void 0 ||
            ((j = (U = pe.compactorAttributes) === null || U === void 0 ? void 0 : U.stream) !==
              null && j !== void 0
              ? j
              : 'main') !== 'main' ||
            ['insert', 'delete', 'replace', 'edit_group'].indexOf(pe.code) >= 0
          )
            return [];
          var De = ue.inEventIdToOutEventIdMap[pe.id],
            W = (re = this.compactor.outIndexMap[De]) !== null && re !== void 0 ? re : -1,
            te = -1,
            ee = (se = ue.inIndexMap[pe.id]) !== null && se !== void 0 ? se : -1;
          if (ee > 0) {
            var C = ue.inStream[ee - 1],
              G = ue.inEventIdToOutEventIdMap[C.id];
            te = (ce = this.compactor.outIndexMap[G]) !== null && ce !== void 0 ? ce : -1;
          }
          return this.collectAnimationOperations(te, W);
        }),
        (q.prototype.getAnimationOperationsForScratchEvents = function (V) {
          if (V.length === 0) return [];
          var U = this.compactor.outStream.length - 1,
            j = U - V.length;
          return this.collectAnimationOperations(j, U);
        }),
        (q.prototype.collectAnimationOperations = function (V, U) {
          for (var j = [], re = V + 1; re <= U; re++) {
            var se = this.baserunners.stateAfterEvent(re).animationOperations();
            j.push.apply(j, se);
          }
          return j;
        }),
        (q.prototype.coalesceAnimationOperations = function (V) {
          for (var U, j = {}, re = 0, se = V; re < se.length; re++) {
            var ce = se[re],
              ae = (U = j[ce.playerId]) !== null && U !== void 0 ? U : ce;
            j[ce.playerId] = {
              playerId: ce.playerId,
              result: ce.result,
              toBase: ce.toBase,
              fromBase: ae.fromBase,
            };
          }
          return Object.values(j);
        }),
        (q.prototype.invertAnimationOperations = function (V) {
          var U = this;
          return V.reverse().map(function (j) {
            var re,
              se = (re = j.inverseResult) !== null && re !== void 0 ? re : U.invertResult(j.result);
            return {
              playerId: j.playerId,
              result: se === 'safe' && j.fromBase === 0 ? 'removed' : se,
              fromBase: j.toBase,
              toBase: j.fromBase,
            };
          });
        }),
        (q.prototype.invertResult = function (V) {
          switch (V) {
            case 'removed':
              return 'safe';
            case 'safe':
              return 'safe';
            case 'scored':
              return 'safe';
            case 'out':
              return 'safe';
            case 'poof':
              return 'safe';
            case 'subbedOut':
              return 'subbedIn';
            case 'subbedIn':
              return 'subbedOut';
            default:
              return V;
          }
        }),
        (q.prototype.addStationaryBaserunnersToAnimationOperations = function (V, U) {
          for (
            var j = i.__spreadArray([], V, !0),
              re = function (ue) {
                var pe = U.fieldSituation.baserunners[ue],
                  De = ue === -3 ? 3 : ue;
                if (pe) {
                  var W = V.find(function (te) {
                    return te.playerId === pe;
                  });
                  if (!W) j.push({ playerId: pe, fromBase: De, toBase: De, result: 'safe' });
                  else if (W.toBase !== De)
                    throw 'Runner '
                      .concat(pe, ' on ')
                      .concat(ue, ' has an operation that ends at base ')
                      .concat(W.toBase);
                }
              },
              se = 0,
              ce = [1, 2, 3, -3];
            se < ce.length;
            se++
          ) {
            var ae = ce[se];
            re(ae);
          }
          return j;
        }),
        (q.prototype.undoRedoAvailabilityWithDescription = function (V) {
          var U = this.undoRedoAvailability(V),
            j = U.undoEvent;
          return (
            (0, P.isMetaEvent)(j)
              ? (0, P.isTransactionMetaEvent)(j)
                ? (U.undoEventDescription = b.codeForEvent(c.first(j.events)))
                : (U.undoEventDescription = j.code)
              : (U.undoEventDescription = b.codeForEvent(j)),
            U
          );
        }),
        (q.prototype.getPitcherDecisionEventIds = function () {
          return c
            .chain(this.outputStream())
            .filter(function (V) {
              return (V == null ? void 0 : V.code) === 'pitcher_decision';
            })
            .pluck('id')
            .value();
        }),
        (q.prototype.getDefensiveEditResult = function (V, U, j) {
          var re = this.compactor.outIndexMap[V],
            se = this.situation.stateBeforeEvent(re).inFieldTeamId,
            ce = this.fielders.stateBeforeEvent(re).playerForPosition(se, j);
          if (c.contains(['EH', 'DH'], j))
            throw 'Cannot make replace a player who does not have a fielding position';
          var ae = this.history.latestState.positionHistory(se)[j],
            ue = new R.DefensivePlayEdit(
              V,
              this.compactor.outIndexMap,
              this.compactor.outStream,
              se,
              j,
              ae,
              ce
            ),
            pe = this.history.latestState.fielderHistory(se)[U];
          return ue.makeEditResult(U, pe);
        }),
        (q.prototype.getOffensiveEditIneligiblePlayers = function (V, U) {
          var j = this.playByPlay.getLatestState().completedAtBatContainingEvent(V);
          if (j === void 0 || j.index === void 0)
            throw 'Cannot edit an event from an atBat that is in progress.';
          var re = this.compactor.outIndexMap[V],
            se = this.situation.stateBeforeEvent(re).atBatTeamId;
          switch (U) {
            case I.BaseballOffensiveRole.Batter:
              var ce = this.compactor.outIndexMap[j.result.eventId],
                ae = j.orderedEventIds[j.orderedEventIds.length - 1],
                ue = this.compactor.outIndexMap[ae];
              return (0, L.getIneligiblePlayers)(re, ce, ue, se, this.lineup, this.baserunners);
            case I.BaseballOffensiveRole.Runner:
              return (0, L.getIneligiblePlayers)(re, re, re, se, this.lineup, this.baserunners);
            default:
              throw 'Unhandled role '.concat(U);
          }
        }),
        (q.prototype.getOffensiveEditResult = function (V, U, j) {
          var re = this.playByPlay.getLatestState().completedAtBatContainingEvent(V);
          if (re === void 0 || re.index === void 0)
            throw 'Cannot edit an event from an atBat that is in progress.';
          var se = this.compactor.outIndexMap[V],
            ce = this.compactor.outStream[se],
            ae = this.situation.stateBeforeEvent(se).atBatTeamId,
            ue = this.lineup.stateBeforeEvent(se).currentBatter(ae),
            pe = this.baserunners.stateBeforeEvent(se).baserunners,
            De;
          if (U === ue) De = I.BaseballOffensiveLocation.Batter;
          else if (U === pe[1]) De = I.BaseballOffensiveLocation.RunnerOnFirst;
          else if (U === pe[2]) De = I.BaseballOffensiveLocation.RunnerOnSecond;
          else if (U === pe[3]) De = I.BaseballOffensiveLocation.RunnerOnThird;
          else throw 'Could not find outgoingPlayerId among batters or runners.';
          var W = new L.OffensivePlayEdit(
            ce,
            this.compactor.outStream,
            this.compactor.outIndexMap,
            re,
            ae,
            De,
            U,
            j
          );
          return W.makeEditResult();
        }),
        (q.prototype.getIllegalPlayerReplacementEvents = function (V, U, j) {
          return (0, x.getIllegalEvents)(V, U, j, this.lineup, this.baserunners, this.fielders);
        }),
        (q.prototype.getPlayerReplacementEvents = function (V, U) {
          var j = new N.PlayerReplacementEdit(this.compactor.outStream, V, U);
          return j.makeEditEvent();
        }),
        q
      );
    })(r.CompactorController);
    return (
      (Gt.BaseballCompactorController = $),
      (0, T.applyMixins)(D, [J]),
      (0, T.applyMixins)($, [J]),
      Gt
    );
  }
  var pa = {},
    Or = {},
    vo = {},
    sf;
  function Ut() {
    return (
      sf ||
        ((sf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.onValidPlayCode = i.isValidPlayCode = i.PlayCode = i.BasketballEventCode = void 0);
          var c;
          (function (h) {
            (h.SetTeams = 'set_teams'),
              (h.Play = 'play'),
              (h.ActivatePlayer = 'activate_player'),
              (h.DeactivatePlayer = 'deactivate_player'),
              (h.EndPeriod = 'end_period'),
              (h.AssignPlayer = 'assign_player'),
              (h.AdjustScore = 'adjust_score'),
              (h.OverrideScore = 'override_score');
          })((c = i.BasketballEventCode || (i.BasketballEventCode = {})));
          var r;
          (function (h) {
            (h.Made2 = 'made2'),
              (h.Made3 = 'made3'),
              (h.Missed2 = 'missed2'),
              (h.Missed3 = 'missed3'),
              (h.MadeFreeThrow = 'madeFreeThrow'),
              (h.MissedFreeThrow = 'missedFreeThrow'),
              (h.Foul = 'foul'),
              (h.Turnover = 'turnover'),
              (h.Rebound = 'rebound'),
              (h.Assist = 'assist'),
              (h.Steal = 'steal'),
              (h.Block = 'block');
          })((r = i.PlayCode || (i.PlayCode = {})));
          function p(h) {
            return Object.values(r).includes(h);
          }
          i.isValidPlayCode = p;
          function v(h, s, l) {
            if (s.code !== c.Play) return h;
            var u = s;
            return p(u.attributes.play_code) ? l(h, u) : h;
          }
          i.onValidPlayCode = v;
        })(vo)),
      vo
    );
  }
  var ha = {},
    of;
  function tr() {
    if (of) return ha;
    (of = 1),
      Object.defineProperty(ha, '__esModule', { value: !0 }),
      (ha.assertUnreachable = void 0);
    function i(c) {
      throw new Error('Unhandled case value '.concat(c));
    }
    return (ha.assertUnreachable = i), ha;
  }
  var uf;
  function Ev() {
    if (uf) return Or;
    (uf = 1),
      Object.defineProperty(Or, '__esModule', { value: !0 }),
      (Or.ActivePlayerEngine = Or.ActivePlayerState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = Ut(),
      h = tr(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'activePlayersImmutable', {
            get: function () {
              return this.get('teams');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.isPlayerActive = function (o, a) {
            var n = this.getIn(['teams', o]);
            return n === void 0 ? !1 : a !== void 0 && n.contains(a);
          }),
          Object.defineProperty(y.prototype, 'activePlayers', {
            get: function () {
              return this.activePlayersImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.activatePlayer = function (o, a) {
            return this.updateIn(['teams', o], function (n) {
              return a === void 0 || n.contains(a) ? n : n.push(a);
            });
          }),
          y
        );
      })(p.ImmutableState);
    Or.ActivePlayerState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o) {
        var a = u.call(this, o) || this;
        return (a.baseEvents = o), a;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ teams: {}, teamIdForPlayId: {} }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          var n = this;
          switch (a.code) {
            case v.BasketballEventCode.SetTeams:
              return this.handleSetTeams(o, a);
            case v.BasketballEventCode.ActivatePlayer:
              return this.handleActivatePlayer(o, a);
            case v.BasketballEventCode.DeactivatePlayer:
              return this.handleDeactivatePlayer(o, a);
            case v.BasketballEventCode.Play:
              return (0, v.onValidPlayCode)(o, a, function (e, t) {
                return n.handlePlay(e, t);
              });
            case v.BasketballEventCode.AssignPlayer:
              return this.handleAssignPlayer(o, a);
            case v.BasketballEventCode.AdjustScore:
            case v.BasketballEventCode.OverrideScore:
            case v.BasketballEventCode.EndPeriod:
              return o;
            default:
              (0, h.assertUnreachable)(a.code);
          }
        }),
        (y.prototype.handleSetTeams = function (o, a) {
          var n = a.attributes.homeId,
            e = a.attributes.awayId;
          return o.setIn(['teams', n], c.List()).setIn(['teams', e], c.List());
        }),
        (y.prototype.handleActivatePlayer = function (o, a) {
          var n = a.attributes.team_id,
            e = a.attributes.player_id;
          return o.activatePlayer(n, e);
        }),
        (y.prototype.handleDeactivatePlayer = function (o, a) {
          var n = a.attributes.team_id,
            e = a.attributes.player_id;
          return o.updateIn(['teams', n], function (t) {
            var d = t.indexOf(e);
            return d >= 0 ? t.delete(d) : t;
          });
        }),
        (y.prototype.handlePlay = function (o, a) {
          var n = a.id,
            e = a.attributes.team_id;
          return o.setIn(['teamIdForPlayId', n], e);
        }),
        (y.prototype.handleAssignPlayer = function (o, a) {
          var n = a.attributes.play_event_id,
            e = a.attributes.player_id,
            t = o.getIn(['teamIdForPlayId', n]);
          return t === void 0 ? o : o.activatePlayer(t, e);
        }),
        y
      );
    })(r.VersionedStateEngine);
    return (Or.ActivePlayerEngine = l), Or;
  }
  var ya = {},
    it = {},
    lf;
  function go() {
    if (lf) return it;
    (lf = 1),
      Object.defineProperty(it, '__esModule', { value: !0 }),
      (it.makeOverrideScore =
        it.makeAdjustScore =
        it.makeAssignPlayer =
        it.makePlay =
        it.makeDeactivatePlayer =
        it.makeActivatePlayer =
          void 0);
    var i = Ut(),
      c = Me();
    function r(u) {
      var y = u.teamId,
        o = u.playerId,
        a = u.pbpEntryId,
        n = u.createdAt,
        e = n === void 0 ? void 0 : n;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.ActivatePlayer,
        createdAt: e,
        attributes: { pbp_entry_id: a || (0, c.uuid4)(), team_id: y, player_id: o },
        compactorAttributes: { stream: 'main' },
      };
    }
    it.makeActivatePlayer = r;
    function p(u) {
      var y = u.teamId,
        o = u.playerId,
        a = u.pbpEntryId,
        n = u.createdAt,
        e = n === void 0 ? void 0 : n;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.DeactivatePlayer,
        createdAt: e,
        attributes: { pbp_entry_id: a || (0, c.uuid4)(), team_id: y, player_id: o },
        compactorAttributes: { stream: 'main' },
      };
    }
    it.makeDeactivatePlayer = p;
    function v(u) {
      var y = u.teamId,
        o = u.playCode,
        a = u.pbpEntryId,
        n = u.createdAt,
        e = n === void 0 ? void 0 : n;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.Play,
        createdAt: e,
        attributes: { pbp_entry_id: a || (0, c.uuid4)(), team_id: y, play_code: o },
        compactorAttributes: { stream: 'main' },
      };
    }
    it.makePlay = v;
    function h(u) {
      var y = u.playId,
        o = u.playerId,
        a = u.isEdit,
        n = a === void 0 ? !1 : a,
        e = u.createdAt,
        t = e === void 0 ? void 0 : e;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.AssignPlayer,
        createdAt: t,
        attributes: { play_event_id: y, player_id: o, is_edit: n },
        compactorAttributes: { stream: 'main' },
      };
    }
    it.makeAssignPlayer = h;
    function s(u) {
      var y = u.teamId,
        o = u.adjustment,
        a = u.pbpEntryId,
        n = u.createdAt,
        e = n === void 0 ? void 0 : n;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.AdjustScore,
        createdAt: e,
        attributes: { pbp_entry_id: a || (0, c.uuid4)(), team_id: y, adjustment: o },
        compactorAttributes: { stream: 'main' },
      };
    }
    it.makeAdjustScore = s;
    function l(u) {
      var y = u.teamId,
        o = u.points,
        a = u.pbpEntryId,
        n = u.createdAt,
        e = n === void 0 ? void 0 : n;
      return {
        id: (0, c.uuid4)(),
        code: i.BasketballEventCode.OverrideScore,
        createdAt: e,
        attributes: { pbp_entry_id: a || (0, c.uuid4)(), team_id: y, points: o },
        compactorAttributes: { stream: 'main' },
      };
    }
    return (it.makeOverrideScore = l), it;
  }
  var _o = {},
    cf;
  function Li() {
    return (
      cf ||
        ((cf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.PlayByPlayEngine =
              i.PlayByPlayEntry =
              i.playByPlayEntry =
              i.PlayByPlayState =
              i.PlayByPlayType =
                void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Ie()),
            v = c.__importStar(be()),
            h = Ut(),
            s = c.__importStar(tr()),
            l = dt(),
            u;
          (function (n) {
            (n.Play = 'play'),
              (n.StartPeriod = 'startPeriod'),
              (n.EndPeriod = 'endPeriod'),
              (n.ImplicitPlayerActivate = 'implicitPlayerActivate'),
              (n.PlayerActivate = 'playerActivate'),
              (n.PlayerDeactivate = 'playerDeactivate'),
              (n.ScoreAdjustment = 'scoreAdjustment'),
              (n.ScoreOverride = 'scoreOverride');
          })((u = i.PlayByPlayType || (i.PlayByPlayType = {})));
          var y = (function (n) {
            c.__extends(e, n);
            function e() {
              return (n !== null && n.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(e.prototype, 'allEntriesImmutable', {
                get: function () {
                  return this.get('entries');
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(e.prototype, 'allEntries', {
                get: function () {
                  return this.allEntriesImmutable.toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.pushEntry = function (t) {
                var d = this.allEntriesImmutable.count(),
                  f = this.updateIn(['entries'], function (_) {
                    return _.push(t);
                  });
                return t.eventId !== void 0 && (f = f.setIn(['eventIdIndexMap', t.eventId], d)), f;
              }),
              (e.prototype.entryForEventId = function (t) {
                var d = this.getIn(['eventIdIndexMap', t]);
                if (d !== void 0) {
                  var f = this.getIn(['entries', d]);
                  if (f === void 0) throw new l.InvalidEventIndexError(d);
                  return { entry: f, index: d };
                }
              }),
              e
            );
          })(v.ImmutableState);
          (i.PlayByPlayState = y),
            (i.playByPlayEntry = r.Record({
              id: '',
              template: '',
              playByPlayType: '',
              eventId: void 0,
              playCode: void 0,
              playerStats: void 0,
              teamId: void 0,
              playerId: void 0,
              playerAssignmentEventId: void 0,
              period: void 0,
              scores: void 0,
              scoreAdjustment: void 0,
              playerEdited: void 0,
              playerAssignable: !1,
              teamAssignable: !1,
              deletable: !1,
              createdAt: void 0,
            }));
          var o = (function (n) {
            c.__extends(e, n);
            function e() {
              return (n !== null && n.apply(this, arguments)) || this;
            }
            return e;
          })(i.playByPlayEntry);
          i.PlayByPlayEntry = o;
          var a = (function (n) {
            c.__extends(e, n);
            function e(t, d, f, _, S) {
              var P = n.call(this, t) || this;
              return (
                (P.baseEvents = t),
                (P.activePlayer = d),
                (P.period = f),
                (P.score = _),
                (P.stats = S),
                P
              );
            }
            return (
              (e.prototype.initialState = function () {
                return new y(r.fromJS({ entries: [], eventIdIndexMap: {} }));
              }),
              (e.prototype.processOneEvent = function (t, d) {
                var f = this;
                switch (d.code) {
                  case h.BasketballEventCode.Play:
                    return (0, h.onValidPlayCode)(t, d, function (_, S) {
                      return f.handlePlay(_, S);
                    });
                  case h.BasketballEventCode.EndPeriod:
                    return this.handleEndPeriod(t, d);
                  case h.BasketballEventCode.AssignPlayer:
                    return this.handleAssignPlayer(t, d);
                  case h.BasketballEventCode.SetTeams:
                    return t;
                  case h.BasketballEventCode.ActivatePlayer:
                    return this.handleActivatePlayer(t, d);
                  case h.BasketballEventCode.DeactivatePlayer:
                    return this.handleDeactivatePlayer(t, d);
                  case h.BasketballEventCode.AdjustScore:
                    return this.handleAdjustScore(t, d);
                  case h.BasketballEventCode.OverrideScore:
                    return this.handleOverrideScore(t, d);
                  default:
                    s.assertUnreachable(d.code);
                }
              }),
              (e.prototype.handlePlay = function (t, d) {
                var f = this.period.stateBeforeEvent(this.nextEventOffset),
                  _ = t;
                if (f && f.isActive === !1) {
                  var S = new o(
                    r.fromJS({
                      template: 'Start of period '.concat(f.period),
                      id: 'start_of_period_'.concat(f.period),
                      playByPlayType: u.StartPeriod,
                      period: f.period,
                      playerAssignable: !1,
                      teamAssignable: !1,
                      deletable: !1,
                      createdAt: d.createdAt,
                    })
                  );
                  _ = _.pushEntry(S);
                }
                var P = d.attributes.play_code,
                  I;
                if (
                  P === h.PlayCode.Made2 ||
                  P === h.PlayCode.Made3 ||
                  P === h.PlayCode.MadeFreeThrow
                ) {
                  var b = this.score.stateAfterEvent(this.nextEventOffset);
                  I = b == null ? void 0 : b.scoresImmutable;
                } else I = void 0;
                var E = new o(
                  r.fromJS({
                    template: ''
                      .concat(d.attributes.play_code, ' by ')
                      .concat(d.attributes.team_id),
                    id: d.attributes.pbp_entry_id,
                    playByPlayType: u.Play,
                    eventId: d.id,
                    playCode: P,
                    teamId: d.attributes.team_id,
                    scores: I,
                    playerAssignable: !0,
                    teamAssignable: !0,
                    deletable: !0,
                    createdAt: d.createdAt,
                  })
                );
                return _.pushEntry(E);
              }),
              (e.prototype.handleEndPeriod = function (t, d) {
                var f = this.period.stateBeforeEvent(this.nextEventOffset),
                  _ = this.score.stateAfterEvent(this.nextEventOffset),
                  S = new o(
                    r.fromJS({
                      template: 'End of period '.concat(f == null ? void 0 : f.period),
                      id: 'end_of_period_'.concat(f == null ? void 0 : f.period),
                      playByPlayType: u.EndPeriod,
                      eventId: d.id,
                      period: f == null ? void 0 : f.period,
                      scores: _ == null ? void 0 : _.scoresImmutable,
                      playerAssignable: !1,
                      teamAssignable: !1,
                      deletable: !0,
                      createdAt: d.createdAt,
                    })
                  );
                return t.pushEntry(S);
              }),
              (e.prototype.handleAssignPlayer = function (t, d) {
                var f = d.attributes.play_event_id,
                  _ = t.entryForEventId(f);
                if (_ === void 0) return t;
                var S = _.index,
                  P = _.entry,
                  I = d.attributes.player_id,
                  b = this.stats.stateAfterEvent(this.nextEventOffset),
                  E = new o(
                    r.fromJS({
                      template: ''.concat(P.playCode, ' by ').concat(I),
                      id: P.id,
                      playByPlayType: u.Play,
                      eventId: P.eventId,
                      playCode: P.playCode,
                      playerStats: b == null ? void 0 : b.stats[P.teamId].players[I],
                      teamId: P.teamId,
                      playerId: I,
                      playerAssignmentEventId: d.id,
                      scores: P.scores,
                      playerEdited: d.attributes.is_edit,
                      playerAssignable: !0,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: P.createdAt,
                    })
                  ),
                  T = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (T != null && T.isPlayerActive(P.teamId, I)) return t.setIn(['entries', S], E);
                var F = new o(
                  r.fromJS({
                    template: ''.concat(I, ' entered the game'),
                    id: ''.concat(P.id, '_implicit_activate'),
                    playByPlayType: u.ImplicitPlayerActivate,
                    teamId: P.teamId,
                    playerId: I,
                    playerAssignable: !1,
                    teamAssignable: !1,
                    deleteable: !1,
                    createdAt: P.createdAt,
                  })
                );
                return t
                  .updateIn(['entries'], function (R) {
                    return R.set(S, E).insert(S, F);
                  })
                  .setIn(['eventIdIndexMap', P.eventId], S + 1);
              }),
              (e.prototype.handleActivatePlayer = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.player_id,
                  S = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (S != null && S.isPlayerActive(f, _)) return t;
                var P = new o(
                  r.fromJS({
                    template: ''.concat(_, ' entered the game'),
                    id: d.attributes.pbp_entry_id,
                    playByPlayType: u.PlayerActivate,
                    eventId: d.id,
                    teamId: f,
                    playerId: _,
                    playerAssignable: !0,
                    teamAssignable: !1,
                    deletable: !0,
                    createdAt: d.createdAt,
                  })
                );
                return t.pushEntry(P);
              }),
              (e.prototype.handleDeactivatePlayer = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.player_id,
                  S = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (!(S != null && S.isPlayerActive(f, _))) return t;
                var P = new o(
                  r.fromJS({
                    template: ''.concat(_, ' sat down'),
                    id: d.attributes.pbp_entry_id,
                    playByPlayType: u.PlayerDeactivate,
                    eventId: d.id,
                    teamId: f,
                    playerId: _,
                    playerAssignable: !0,
                    teamAssignable: !1,
                    deletable: !0,
                    createdAt: d.createdAt,
                  })
                );
                return t.pushEntry(P);
              }),
              (e.prototype.handleAdjustScore = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.adjustment,
                  S = this.score.stateAfterEvent(this.nextEventOffset),
                  P = new o(
                    r.fromJS({
                      template: 'Score adjusted: '.concat(_, ' for ').concat(f),
                      id: d.attributes.pbp_entry_id,
                      playByPlayType: u.ScoreAdjustment,
                      eventId: d.id,
                      teamId: f,
                      scores: S == null ? void 0 : S.scoresImmutable,
                      scoreAdjustment: _,
                      playerAssignable: !1,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: d.createdAt,
                    })
                  );
                return t.pushEntry(P);
              }),
              (e.prototype.handleOverrideScore = function (t, d) {
                var f,
                  _ = d.attributes.team_id,
                  S =
                    (f = this.score.stateBeforeEvent(this.nextEventOffset)) === null || f === void 0
                      ? void 0
                      : f.scores[_],
                  P = this.score.stateAfterEvent(this.nextEventOffset),
                  I = P.scores[_] - S,
                  b = new o(
                    r.fromJS({
                      template: 'Score adjusted: '.concat(I, ' for ').concat(_),
                      id: d.attributes.pbp_entry_id,
                      playByPlayType: u.ScoreOverride,
                      eventId: d.id,
                      teamId: _,
                      scores: P == null ? void 0 : P.scoresImmutable,
                      scoreAdjustment: I,
                      playerAssignable: !1,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: d.createdAt,
                    })
                  );
                return t.pushEntry(b);
              }),
              e
            );
          })(p.VersionedStateEngine);
          i.PlayByPlayEngine = a;
        })(_o)),
      _o
    );
  }
  var df;
  function Bv() {
    if (df) return ya;
    (df = 1),
      Object.defineProperty(ya, '__esModule', { value: !0 }),
      (ya.makeReplaceEventToChangePlay = void 0);
    var i = Me(),
      c = go(),
      r = Li();
    function p(v, h) {
      if (v.eventId === void 0) throw new Error('entry is missing eventId');
      if (v.playByPlayType !== r.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(v.playByPlayType));
      if (v.teamId === void 0) throw new Error('entry is missing teamId');
      var s = (0, c.makePlay)({
        teamId: v.teamId,
        playCode: h,
        pbpEntryId: v.id,
        createdAt: v.createdAt,
      });
      return v.playerAssignmentEventId !== void 0
        ? {
            id: (0, i.uuid4)(),
            code: 'replace',
            deleteIds: [v.eventId, v.playerAssignmentEventId],
            events: [
              s,
              (0, c.makeAssignPlayer)({
                playId: s.id,
                playerId: v.playerId,
                isEdit: !0,
                createdAt: v.createdAt,
              }),
            ],
          }
        : { id: (0, i.uuid4)(), code: 'replace', deleteIds: [v.eventId], events: [s] };
    }
    return (ya.makeReplaceEventToChangePlay = p), ya;
  }
  var Ot = {},
    ff;
  function Tv() {
    if (ff) return Ot;
    (ff = 1),
      Object.defineProperty(Ot, '__esModule', { value: !0 }),
      (Ot.makeReplaceEventToChangeTeamAndPlayer =
        Ot.makeReplaceEventToChangeTeamForScoreOverride =
        Ot.makeReplaceEventToChangeTeamForScoreAdjust =
        Ot.makeReplaceEventToChangeTeamForPlay =
          void 0);
    var i = Me(),
      c = go(),
      r = Li();
    function p(l, u) {
      if (l.eventId === void 0) throw new Error('entry is missing eventId');
      if (l.playByPlayType !== r.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(l.playByPlayType));
      if (l.playCode === void 0) throw new Error('entry is missing playCode');
      var y;
      return (
        l.playerAssignmentEventId === void 0
          ? (y = [l.eventId])
          : (y = [l.eventId, l.playerAssignmentEventId]),
        {
          id: (0, i.uuid4)(),
          code: 'replace',
          deleteIds: y,
          events: [
            (0, c.makePlay)({
              teamId: u,
              playCode: l.playCode,
              pbpEntryId: l.id,
              createdAt: l.createdAt,
            }),
          ],
        }
      );
    }
    Ot.makeReplaceEventToChangeTeamForPlay = p;
    function v(l, u) {
      if (l.eventId === void 0) throw new Error('entry is missing eventId');
      if (l.playByPlayType !== r.PlayByPlayType.ScoreAdjustment)
        throw new Error('entry is wrong play type '.concat(l.playByPlayType));
      return {
        id: (0, i.uuid4)(),
        code: 'replace',
        deleteIds: [l.eventId],
        events: [
          (0, c.makeAdjustScore)({
            teamId: u,
            adjustment: l.scoreAdjustment,
            pbpEntryId: l.id,
            createdAt: l.createdAt,
          }),
        ],
      };
    }
    Ot.makeReplaceEventToChangeTeamForScoreAdjust = v;
    function h(l, u) {
      if (l.eventId === void 0) throw new Error('entry is missing eventId');
      if (l.playByPlayType !== r.PlayByPlayType.ScoreOverride)
        throw new Error('entry is wrong play type '.concat(l.playByPlayType));
      var y = l.scores.get(l.teamId);
      return {
        id: (0, i.uuid4)(),
        code: 'replace',
        deleteIds: [l.eventId],
        events: [
          (0, c.makeOverrideScore)({
            teamId: u,
            points: y,
            pbpEntryId: l.id,
            createdAt: l.createdAt,
          }),
        ],
      };
    }
    Ot.makeReplaceEventToChangeTeamForScoreOverride = h;
    function s(l, u, y) {
      if (l.eventId === void 0) throw new Error('entry is missing eventId');
      if (l.playByPlayType !== r.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(l.playByPlayType));
      if (l.playCode === void 0) throw new Error('entry is missing playCode');
      var o = (0, c.makePlay)({
          teamId: u,
          playCode: l.playCode,
          pbpEntryId: l.id,
          createdAt: l.createdAt,
        }),
        a;
      return (
        l.playerAssignmentEventId === void 0
          ? (a = [l.eventId])
          : (a = [l.eventId, l.playerAssignmentEventId]),
        {
          id: (0, i.uuid4)(),
          code: 'replace',
          deleteIds: a,
          events: [
            o,
            (0, c.makeAssignPlayer)({
              playId: o.id,
              playerId: y,
              isEdit: !0,
              createdAt: l.createdAt,
            }),
          ],
        }
      );
    }
    return (Ot.makeReplaceEventToChangeTeamAndPlayer = s), Ot;
  }
  var va = {},
    pf;
  function hf() {
    if (pf) return va;
    (pf = 1), Object.defineProperty(va, '__esModule', { value: !0 }), (va.StateAccessor = void 0);
    var i = Q,
      c = i.__importStar(dt()),
      r = (function (p) {
        i.__extends(v, p);
        function v(h, s) {
          var l = p.call(this, h, s) || this;
          return (l.controller = s), l;
        }
        return (
          Object.defineProperty(v.prototype, 'scorekeepingState', {
            get: function () {
              return {
                gameSituation: this.currentGameSituation,
                homeTeamId: this.get('homeId', this.controller.score),
                awayTeamId: this.get('awayId', this.controller.score),
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'activePlayers', {
            get: function () {
              return this.get('activePlayers', this.controller.activePlayer);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'lineScores', {
            get: function () {
              return this.get('lineScores', this.controller.statsPerPeriod);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'stats', {
            get: function () {
              return this.get('stats', this.controller.stats);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'scores', {
            get: function () {
              return this.get('scores', this.controller.score);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'periodStats', {
            get: function () {
              return this.get('periodStats', this.controller.statsPerPeriod);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'currentGameSituation', {
            get: function () {
              return {
                activePlayers: this.activePlayers,
                lineScores: this.lineScores,
                scores: this.scores,
                period: this.get('period', this.controller.period),
                periodIsActive: this.get('isActive', this.controller.period),
              };
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'allPlayByPlay', {
            get: function () {
              return this.get('allEntries', this.controller.playByPlay);
            },
            enumerable: !1,
            configurable: !0,
          }),
          v
        );
      })(c.EngineStateAccessor);
    return (va.StateAccessor = r), va;
  }
  var Ar = {},
    yf;
  function Ov() {
    if (yf) return Ar;
    (yf = 1),
      Object.defineProperty(Ar, '__esModule', { value: !0 }),
      (Ar.PeriodEngine = Ar.PeriodState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = Ut(),
      h = i.__importStar(tr()),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'period', {
            get: function () {
              return this.get('period');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'isActive', {
            get: function () {
              return this.get('isActive');
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(p.ImmutableState);
    Ar.PeriodState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o) {
        var a = u.call(this, o) || this;
        return (a.baseEvents = o), a;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ period: 1, isActive: !1 }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          var n = this;
          switch (a.code) {
            case v.BasketballEventCode.Play:
              return (0, v.onValidPlayCode)(o, a, function (e, t) {
                return n.handlePlay(e);
              });
            case v.BasketballEventCode.EndPeriod:
              return this.handleEndPeriod(o);
            case v.BasketballEventCode.SetTeams:
            case v.BasketballEventCode.ActivatePlayer:
            case v.BasketballEventCode.DeactivatePlayer:
            case v.BasketballEventCode.AssignPlayer:
            case v.BasketballEventCode.AdjustScore:
            case v.BasketballEventCode.OverrideScore:
              return o;
            default:
              h.assertUnreachable(a.code);
          }
        }),
        (y.prototype.handlePlay = function (o) {
          return o.isActive ? o : o.set('isActive', !0);
        }),
        (y.prototype.handleEndPeriod = function (o) {
          return o.isActive
            ? o.increment('period', 1).set('isActive', !1)
            : o.increment('period', 1);
        }),
        y
      );
    })(r.VersionedStateEngine);
    return (Ar.PeriodEngine = l), Ar;
  }
  var Rr = {},
    vf;
  function Av() {
    if (vf) return Rr;
    (vf = 1),
      Object.defineProperty(Rr, '__esModule', { value: !0 }),
      (Rr.ScoreEngine = Rr.ScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = Ut(),
      h = i.__importStar(tr()),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'scoresImmutable', {
            get: function () {
              return this.get('scores');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'scores', {
            get: function () {
              return this.scoresImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'homeId', {
            get: function () {
              return this.get('homeId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'awayId', {
            get: function () {
              return this.get('awayId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.incrementScore = function (o, a) {
            return this.incrementIn(['scores', o], a);
          }),
          y
        );
      })(p.ImmutableState);
    Rr.ScoreState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o) {
        var a = u.call(this, o) || this;
        return (a.baseEvents = o), a;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ scores: {}, homeId: void 0, awayId: void 0 }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          var n = this;
          switch (a.code) {
            case v.BasketballEventCode.SetTeams:
              return this.handleSetTeams(o, a);
            case v.BasketballEventCode.Play:
              return (0, v.onValidPlayCode)(o, a, function (e, t) {
                return n.handlePlay(e, t);
              });
            case v.BasketballEventCode.AdjustScore:
              return this.handleAdjustScore(o, a);
            case v.BasketballEventCode.OverrideScore:
              return this.handleOverrideScore(o, a);
            case v.BasketballEventCode.ActivatePlayer:
            case v.BasketballEventCode.DeactivatePlayer:
            case v.BasketballEventCode.EndPeriod:
            case v.BasketballEventCode.AssignPlayer:
              return o;
            default:
              h.assertUnreachable(a.code);
          }
        }),
        (y.prototype.handleSetTeams = function (o, a) {
          var n,
            e = a.attributes.homeId,
            t = a.attributes.awayId;
          return o
            .set('homeId', e)
            .set('awayId', t)
            .set('scores', c.fromJS(((n = {}), (n[e] = 0), (n[t] = 0), n)));
        }),
        (y.prototype.handlePlay = function (o, a) {
          var n = a.attributes.play_code,
            e = a.attributes.team_id;
          switch (n) {
            case v.PlayCode.Made2:
              return o.incrementScore(e, 2);
            case v.PlayCode.Made3:
              return o.incrementScore(e, 3);
            case v.PlayCode.MadeFreeThrow:
              return o.incrementScore(e, 1);
            case v.PlayCode.Missed2:
            case v.PlayCode.Missed3:
            case v.PlayCode.MissedFreeThrow:
            case v.PlayCode.Assist:
            case v.PlayCode.Foul:
            case v.PlayCode.Rebound:
            case v.PlayCode.Steal:
            case v.PlayCode.Turnover:
            case v.PlayCode.Block:
              return o;
            default:
              h.assertUnreachable(n);
          }
        }),
        (y.prototype.handleAdjustScore = function (o, a) {
          return o.incrementScore(a.attributes.team_id, a.attributes.adjustment);
        }),
        (y.prototype.handleOverrideScore = function (o, a) {
          return o.setIn(['scores', a.attributes.team_id], a.attributes.points);
        }),
        y
      );
    })(r.VersionedStateEngine);
    return (Rr.ScoreEngine = l), Rr;
  }
  var ga = {},
    gf;
  function Rv() {
    if (gf) return ga;
    (gf = 1), Object.defineProperty(ga, '__esModule', { value: !0 }), (ga.makeDeleteEvent = void 0);
    var i = Me();
    function c(r) {
      if (r.eventId === void 0)
        throw new Error('Cannot make a delete event for an entry that has no eventId');
      return r.playerAssignmentEventId === void 0
        ? { id: (0, i.uuid4)(), code: 'delete', deleteIds: [r.eventId] }
        : { id: (0, i.uuid4)(), code: 'delete', deleteIds: [r.eventId, r.playerAssignmentEventId] };
    }
    return (ga.makeDeleteEvent = c), ga;
  }
  var Wt = {},
    _f;
  function Fv() {
    if (_f) return Wt;
    (_f = 1),
      Object.defineProperty(Wt, '__esModule', { value: !0 }),
      (Wt.makeDeleteEventToUnassignPlayer =
        Wt.makeReplaceEventToChangePlayerActivation =
        Wt.makeMetaEventToAssignPlayerToPlay =
          void 0);
    var i = Li(),
      c = Me(),
      r = go();
    function p(s, l) {
      if (s.eventId === void 0) throw new Error('entry is missing eventId');
      if (s.playByPlayType !== i.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      return s.playerAssignmentEventId === void 0
        ? {
            id: (0, c.uuid4)(),
            code: 'insert',
            afterId: s.eventId,
            events: [
              (0, r.makeAssignPlayer)({
                playId: s.eventId,
                playerId: l,
                isEdit: !0,
                createdAt: s.createdAt,
              }),
            ],
          }
        : {
            id: (0, c.uuid4)(),
            code: 'replace',
            deleteIds: [s.playerAssignmentEventId],
            events: [
              (0, r.makeAssignPlayer)({
                playId: s.eventId,
                playerId: l,
                isEdit: !0,
                createdAt: s.createdAt,
              }),
            ],
          };
    }
    Wt.makeMetaEventToAssignPlayerToPlay = p;
    function v(s, l) {
      if (s.eventId === void 0) throw new Error('entry is missing eventId');
      if (
        s.playByPlayType !== i.PlayByPlayType.PlayerActivate &&
        s.playByPlayType !== i.PlayByPlayType.PlayerDeactivate
      )
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      return {
        id: (0, c.uuid4)(),
        code: 'replace',
        deleteIds: [s.eventId],
        events: [
          s.playByPlayType === i.PlayByPlayType.PlayerActivate
            ? (0, r.makeActivatePlayer)({
                teamId: s.teamId,
                playerId: l,
                pbpEntryId: s.id,
                createdAt: s.createdAt,
              })
            : (0, r.makeDeactivatePlayer)({
                teamId: s.teamId,
                playerId: l,
                pbpEntryId: s.id,
                createdAt: s.createdAt,
              }),
        ],
      };
    }
    Wt.makeReplaceEventToChangePlayerActivation = v;
    function h(s) {
      if (s.playByPlayType !== i.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      if (s.playerAssignmentEventId === void 0)
        throw new Error('entry is missing playerAssignmentEventId');
      return { id: (0, c.uuid4)(), code: 'delete', deleteIds: [s.playerAssignmentEventId] };
    }
    return (Wt.makeDeleteEventToUnassignPlayer = h), Wt;
  }
  var Fr = {},
    So = {},
    Sf;
  function Po() {
    return (
      Sf ||
        ((Sf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.TeamPlayerStats = i.Stats = i.Stat = void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = He(),
            v = Ut(),
            h = c.__importStar(tr()),
            s;
          (function (d) {
            (d.FGM = 'FGM'),
              (d.FGA = 'FGA'),
              (d.FGP = 'FG%'),
              (d.M2PT = '2PTM'),
              (d.A2PT = '2PTA'),
              (d.P2PT = '2PT%'),
              (d.M3PT = '3PTM'),
              (d.A3PT = '3PTA'),
              (d.P3PT = '3PT%'),
              (d.FTM = 'FTM'),
              (d.FTA = 'FTA'),
              (d.FTP = 'FT%'),
              (d.REB = 'REB'),
              (d.AST = 'AST'),
              (d.STL = 'STL'),
              (d.PF = 'PF'),
              (d.TO = 'TO'),
              (d.PTS = 'PTS'),
              (d.GP = 'GP'),
              (d.GS = 'GS'),
              (d.BLK = 'BLK'),
              (d.PM = '+/-'),
              (d.AST2TO = 'AST/TO'),
              (d.TSP = 'TS%'),
              (d.EFGP = 'eFG%');
          })((s = i.Stat || (i.Stat = {})));
          var l;
          (function (d) {
            function f() {
              return Object.values(s);
            }
            d.values = f;
            function _() {
              return d.values().reduce(function (T, F) {
                return T.set(F, 0);
              }, r.Map());
            }
            d.empty = _;
            function S(T, F) {
              return b(!0, T, F);
            }
            d.addPlay = S;
            function P(T, F) {
              return b(!1, T, F);
            }
            d.removePlay = P;
            function I(T) {
              switch (T) {
                case s.REB:
                  return 'RPG';
                case s.AST:
                  return 'APG';
                case s.STL:
                  return 'SPG';
                case s.BLK:
                  return 'BPG';
                case s.PF:
                  return 'PFPG';
                case s.TO:
                  return 'TOPG';
                case s.PTS:
                  return 'PPG';
                case s.GP:
                case s.FTP:
                case s.FGP:
                case s.P3PT:
                case s.FTA:
                case s.FTM:
                case s.A2PT:
                case s.A3PT:
                case s.M2PT:
                case s.M3PT:
                case s.P2PT:
                case s.FGM:
                case s.FGA:
                case s.GS:
                case s.PM:
                case s.AST2TO:
                case s.TSP:
                case s.EFGP:
                  return;
                default:
                  h.assertUnreachable(T);
              }
            }
            d.averageKey = I;
            function b(T, F, R) {
              return u(
                (function () {
                  switch (R) {
                    case v.PlayCode.Made2:
                      return E(T, F, s.FGM, s.FGA, s.M2PT, s.A2PT);
                    case v.PlayCode.Made3:
                      return E(T, F, s.FGM, s.FGA, s.A3PT, s.M3PT);
                    case v.PlayCode.MadeFreeThrow:
                      return E(T, F, s.FTM, s.FTA);
                    case v.PlayCode.Missed2:
                      return E(T, F, s.FGA, s.A2PT);
                    case v.PlayCode.Missed3:
                      return E(T, F, s.FGA, s.A3PT);
                    case v.PlayCode.MissedFreeThrow:
                      return E(T, F, s.FTA);
                    case v.PlayCode.Assist:
                      return E(T, F, s.AST);
                    case v.PlayCode.Foul:
                      return E(T, F, s.PF);
                    case v.PlayCode.Rebound:
                      return E(T, F, s.REB);
                    case v.PlayCode.Steal:
                      return E(T, F, s.STL);
                    case v.PlayCode.Turnover:
                      return E(T, F, s.TO);
                    case v.PlayCode.Block:
                      return E(T, F, s.BLK);
                    default:
                      h.assertUnreachable(R);
                  }
                })()
              );
            }
            function E(T, F) {
              for (var R = [], L = 2; L < arguments.length; L++) R[L - 2] = arguments[L];
              return R.reduce(function (x, N) {
                return x.updateIn([N], 0, function (M) {
                  return T ? ++M : --M;
                });
              }, F);
            }
          })((l = i.Stats || (i.Stats = {}))),
            (function (d) {
              function f(x) {
                var N = Object.entries(x).reduce(function (J, D) {
                    var $ = D[0],
                      z = D[1];
                    return J.setIn([$], z.stats.offense[s.PTS]);
                  }, r.Map.of()),
                  M = d.fromTeamsStatDoc(x, !0);
                return d.toTeamsStatDoc(M, N);
              }
              d.getDerivedMultiGameStatsWithBaseStats = f;
              function _(x) {
                return x.toJS().reduce(function (N, M) {
                  var J = r.Map().set(p.TOTAL, l.empty()).set(p.UNASSIGNED_PLAYER, l.empty());
                  return N.set(M, J);
                }, r.Map());
              }
              d.fromTeams = _;
              function S(x, N) {
                return N.reduce(function (M, J, D) {
                  var $ = x.getIn([D, p.TOTAL, s.PTS]),
                    z = x.getIn([D, p.UNASSIGNED_PLAYER, s.PTS]),
                    q = $ - z,
                    V = J - q,
                    U = x.setIn([D, p.TOTAL, s.PTS], J).setIn([D, p.UNASSIGNED_PLAYER, s.PTS], V);
                  return (M[D] = F(U.get(D))), M;
                }, {});
              }
              d.toTeamsStatDoc = S;
              function P(x, N) {
                return Object.entries(x).reduce(function (M, J) {
                  var D = J[0],
                    $ = J[1],
                    z = $.stats,
                    q = $.unassigned,
                    V = $.players,
                    U = Object.entries(V)
                      .reduce(function (j, re) {
                        var se = re[0],
                          ce = re[1];
                        return j.setIn([D, se], T(ce.stats, !!N));
                      }, M)
                      .setIn([D, p.TOTAL], T(z, !!N));
                  return q ? U.setIn([D, p.UNASSIGNED_PLAYER], T(q.stats, !1)) : U;
                }, r.fromJS({}));
              }
              d.fromTeamsStatDoc = P;
              function I(x, N) {
                return x.reduce(function (M, J, D) {
                  return M.setIn([D], b(x.get(D), N.get(D)));
                }, r.Map());
              }
              d.subtract = I;
              function b(x, N) {
                return x.reduce(function (M, J, D) {
                  return M.setIn([D], E(x.get(D), N.get(D, l.empty())));
                }, r.Map());
              }
              function E(x, N) {
                return a(
                  x.reduce(function (M, J, D) {
                    return M.setIn([D], x.get(D) - N.get(D, 0));
                  }, l.empty())
                );
              }
              function T(x, N) {
                return a(r.fromJS(x.offense), N);
              }
              function F(x) {
                return x.reduce(
                  function (N, M, J) {
                    switch (J) {
                      case p.TOTAL:
                      case p.UNASSIGNED_PLAYER:
                        return N;
                      default:
                        return (N.players[J] = R(M)), N;
                    }
                  },
                  {
                    players: {},
                    unassigned: R(x.get(p.UNASSIGNED_PLAYER)),
                    stats: L(x.get(p.TOTAL)),
                  }
                );
              }
              function R(x) {
                return { stats: L(x) };
              }
              function L(x) {
                return { offense: x.toJS() };
              }
            })(i.TeamPlayerStats || (i.TeamPlayerStats = {}));
          function u(d) {
            return y(d, o, a);
          }
          function y(d) {
            for (var f = [], _ = 1; _ < arguments.length; _++) f[_ - 1] = arguments[_];
            return f.reduce(function (S, P) {
              return P(S);
            }, d);
          }
          function o(d) {
            var f = function (S) {
                return d.get(S, 0);
              },
              _ = f(s.FTM) + f(s.M2PT) * 2 + f(s.M3PT) * 3;
            return d.setIn([s.PTS], _);
          }
          function a(d, f) {
            var _ = function (I) {
                return d.get(I, 0);
              },
              S = function (I, b) {
                return _(I) / _(b);
              },
              P = d
                .setIn([s.FGP], S(s.FGM, s.FGA))
                .setIn([s.P2PT], S(s.M2PT, s.A2PT))
                .setIn([s.P3PT], S(s.M3PT, s.A3PT))
                .setIn([s.FTP], S(s.FTM, s.FTA));
            return (
              (P = y(P, n, e, t)),
              f
                ? l.values().reduce(function (I, b) {
                    var E = l.averageKey(b);
                    return E ? I.setIn([E], S(b, s.GP)) : I;
                  }, P)
                : P
            );
          }
          function n(d) {
            var f = function (S) {
                return d.get(S, 0);
              },
              _ = function (S, P) {
                return f(S) / f(P);
              };
            return d.setIn([s.AST2TO], _(s.AST, s.TO));
          }
          function e(d) {
            var f = function (S) {
                return d.get(S, 0);
              },
              _ = (0.5 * f(s.PTS)) / (f(s.FGA) + 0.44 * f(s.FTA));
            return d.setIn([s.TSP], _);
          }
          function t(d) {
            var f = function (S) {
                return d.get(S, 0);
              },
              _ = (f(s.FGM) + 0.5 * f(s.M3PT)) / f(s.FGA);
            return d.setIn([s.EFGP], _);
          }
        })(So)),
      So
    );
  }
  var Pf;
  function kv() {
    if (Pf) return Fr;
    (Pf = 1),
      Object.defineProperty(Fr, '__esModule', { value: !0 }),
      (Fr.BoxScoreEngine = Fr.BoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = He(),
      v = i.__importStar(be()),
      h = Ut(),
      s = i.__importStar(tr()),
      l = Po(),
      u = Ut(),
      y = (function (a) {
        i.__extends(n, a);
        function n() {
          return (a !== null && a.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(n.prototype, 'stats', {
            get: function () {
              return l.TeamPlayerStats.toTeamsStatDoc(this.teamPlayerStats, this.teamPoints);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(n.prototype, 'teamPoints', {
            get: function () {
              return this.get('teamPoints');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(n.prototype, 'teamPlayerStats', {
            get: function () {
              return this.get('stats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          n
        );
      })(v.ImmutableState);
    Fr.BoxScoreState = y;
    var o = (function (a) {
      i.__extends(n, a);
      function n(e, t, d) {
        var f = a.call(this, e) || this;
        return (f.baseEvents = e), (f.score = t), (f.activePlayerEngine = d), f;
      }
      return (
        (n.prototype.initialState = function () {
          return new y(
            c.fromJS({
              teams: [],
              teamPoints: {},
              playForPlayer: {},
              startedPlayerCount: 0,
              stats: c.Map(),
            })
          );
        }),
        (n.prototype.processOneEvent = function (e, t) {
          var d = this;
          switch (t.code) {
            case h.BasketballEventCode.SetTeams:
              return n.handleSetTeams(e, t);
            case h.BasketballEventCode.Play:
              return (0, h.onValidPlayCode)(e, t, function (f, _) {
                return (f = d.handlePlusMinusCalculation(f, _)), d.handlePlay(f, _);
              });
            case h.BasketballEventCode.AssignPlayer:
              return (
                (e = this.handleAssignPlayer(e, t)), this.handlePlusMinusCalcForImplicitSub(e, t)
              );
            case h.BasketballEventCode.AdjustScore:
              return (e = this.handlePlusMinusCalculation(e, t)), this.handleScoreChange(e, t);
            case h.BasketballEventCode.OverrideScore:
              return (e = this.handlePlusMinusCalculation(e, t)), this.handleScoreChange(e, t);
            case h.BasketballEventCode.EndPeriod:
              return e;
            case h.BasketballEventCode.ActivatePlayer:
              return n.handleActivatePlayer(e, t);
            case h.BasketballEventCode.DeactivatePlayer:
              return e;
            default:
              s.assertUnreachable(t.code);
          }
        }),
        (n.handleSetTeams = function (e, t) {
          var d = t.attributes,
            f = d.homeId,
            _ = d.awayId;
          return e
            .setIn(['teamPoints', f], 0)
            .setIn(['teamPoints', _], 0)
            .setIn(['teams'], c.List.of(f, _))
            .setIn(['stats'], l.TeamPlayerStats.fromTeams(c.List.of(f, _)))
            .updateIn(['stats', f, p.TOTAL], l.Stats.empty(), function (S) {
              return S.setIn([l.Stat.GP], 1);
            })
            .updateIn(['stats', _, p.TOTAL], l.Stats.empty(), function (S) {
              return S.setIn([l.Stat.GP], 1);
            });
        }),
        (n.prototype.handleScoreChange = function (e, t) {
          var d = t.attributes.team_id,
            f = this.score.stateAfterEvent(this.nextEventOffset).scores[d];
          return e.setIn(['teamPoints', d], f);
        }),
        (n.handleActivatePlayer = function (e, t) {
          var d = t.attributes,
            f = d.team_id,
            _ = d.player_id;
          return n.markPlayerSeen(_, f, e);
        }),
        (n.prototype.handlePlusMinusCalculation = function (e, t) {
          var d = t.attributes.team_id,
            f = this.determineEventPlayValue(t),
            _ = this.activePlayerEngine.stateAfterEvent(this.nextEventOffset).activePlayers;
          return Object.entries(_).reduce(function (S, P) {
            var I = P[0],
              b = P[1],
              E = I === d ? f : -f;
            return b.reduce(function (T, F) {
              return T.updateIn(['stats', I, F, l.Stat.PM], 0, function (R) {
                return R + E;
              });
            }, S);
          }, e);
        }),
        (n.prototype.determineEventPlayValue = function (e) {
          switch (e.code) {
            case h.BasketballEventCode.Play:
              var t = e.attributes.play_code;
              switch (t) {
                case u.PlayCode.MadeFreeThrow:
                  return 1;
                case u.PlayCode.Made2:
                  return 2;
                case u.PlayCode.Made3:
                  return 3;
                default:
                  return 0;
              }
            case h.BasketballEventCode.AdjustScore:
              return e.attributes.adjustment;
            case h.BasketballEventCode.OverrideScore:
              return e.attributes.points;
            default:
              return 0;
          }
        }),
        (n.prototype.handlePlay = function (e, t) {
          var d = t.attributes,
            f = d.team_id,
            _ = d.play_code;
          return this.handleScoreChange(
            e
              .updateIn(['stats', f, p.UNASSIGNED_PLAYER], l.Stats.empty(), function (S) {
                return l.Stats.addPlay(S, _);
              })
              .updateIn(['stats', f, p.TOTAL], l.Stats.empty(), function (S) {
                return l.Stats.addPlay(S, _);
              }),
            t
          );
        }),
        (n.prototype.handleAssignPlayer = function (e, t) {
          var d = t.attributes,
            f = d.play_event_id,
            _ = d.player_id,
            S = this.baseEvents,
            P = e.getIn(['playForPlayer', f], p.UNASSIGNED_PLAYER),
            I =
              S[this.indexForEventId(f)] ||
              S.slice(this.nextEventOffset).find(function (F) {
                return F.id === f;
              }),
            b = I.attributes,
            E = b.team_id,
            T = b.play_code;
          return (0, h.onValidPlayCode)(e, I, function () {
            return n.markPlayerSeen(
              _,
              E,
              e
                .setIn(['playForPlayer', f], _)
                .updateIn(['stats', E, _], l.Stats.empty(), function (F) {
                  return l.Stats.addPlay(F, T);
                })
                .updateIn(['stats', E, P], l.Stats.empty(), function (F) {
                  return l.Stats.removePlay(F, T);
                })
            );
          });
        }),
        (n.prototype.handlePlusMinusCalcForImplicitSub = function (e, t) {
          var d,
            f = t.attributes,
            _ = f.play_event_id,
            S = f.player_id,
            P = this.baseEvents,
            I =
              P[this.indexForEventId(_)] ||
              P.slice(this.nextEventOffset).find(function (T) {
                return T.id === _;
              }),
            b = I.attributes.team_id,
            E = this.determineEventPlayValue(I);
          return !(
            (d = this.activePlayerEngine.stateBeforeEvent(this.nextEventOffset)) === null ||
            d === void 0
          ) && d.isPlayerActive(b, S)
            ? e
            : e.updateIn(['stats', b, S, l.Stat.PM], 0, function (T) {
                return T + E;
              });
        }),
        (n.markPlayerSeen = function (e, t, d) {
          var f = ['stats', t, e],
            _ = d.get('startedPlayerCount'),
            S =
              _ < 5 ? 1 : d.getIn(i.__spreadArray(i.__spreadArray([], f, !0), [l.Stat.GS], !1), 0);
          return d
            .updateIn(f, l.Stats.empty(), function (P) {
              return P.setIn([l.Stat.GP], 1);
            })
            .updateIn(f, l.Stats.empty(), function (P) {
              return P.setIn([l.Stat.GS], S);
            })
            .updateIn(['startedPlayerCount'], function (P) {
              return ++P;
            });
        }),
        n
      );
    })(r.VersionedStateEngine);
    return (Fr.BoxScoreEngine = o), Fr;
  }
  var kr = {},
    If;
  function wv() {
    if (If) return kr;
    (If = 1),
      Object.defineProperty(kr, '__esModule', { value: !0 }),
      (kr.PerPeriodBoxScoreEngine = kr.PeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = He(),
      v = i.__importStar(be()),
      h = Ut(),
      s = i.__importStar(tr()),
      l = Po(),
      u = (function (o) {
        i.__extends(a, o);
        function a() {
          return (o !== null && o.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(a.prototype, 'periodStats', {
            get: function () {
              var n = this.get('statsPerPeriod');
              return n.reduce(function (e, t, d) {
                var f = t.reduce(function (_, S, P) {
                  return _.setIn([P], S.getIn([p.TOTAL, l.Stat.PTS]));
                }, c.Map());
                return (e[d] = l.TeamPlayerStats.toTeamsStatDoc(t, f)), e;
              }, {});
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(a.prototype, 'lineScores', {
            get: function () {
              return Object.entries(this.periodStats)
                .reduce(function (n, e) {
                  var t = e[0],
                    d = e[1],
                    f = parseInt(t, 10),
                    _ = Object.entries(d).reduce(function (S, P) {
                      var I = P[0],
                        b = P[1];
                      return (S[I] = b.stats.offense[l.Stat.PTS]), S;
                    }, {});
                  return Object.entries(_).reduce(function (S, P) {
                    var I = P[0],
                      b = P[1],
                      E = S.getIn([I], c.List());
                    return (E = E.insert(f, b)), S.setIn([I], E);
                  }, n);
                }, c.Map())
                .toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          a
        );
      })(v.ImmutableState);
    kr.PeriodBoxScoreState = u;
    var y = (function (o) {
      i.__extends(a, o);
      function a(n, e, t) {
        var d = o.call(this, n) || this;
        return (d.baseEvents = n), (d.period = e), (d.stats = t), d;
      }
      return (
        (a.prototype.initialState = function () {
          return new u(c.fromJS({ statsPerPeriod: c.Map() }));
        }),
        (a.prototype.processOneEvent = function (n, e) {
          switch (e.code) {
            case h.BasketballEventCode.Play:
            case h.BasketballEventCode.SetTeams:
            case h.BasketballEventCode.AssignPlayer:
            case h.BasketballEventCode.AdjustScore:
            case h.BasketballEventCode.OverrideScore:
              return this.handleStatsChange(n);
            case h.BasketballEventCode.EndPeriod:
            case h.BasketballEventCode.ActivatePlayer:
            case h.BasketballEventCode.DeactivatePlayer:
              return n;
            default:
              s.assertUnreachable(e.code);
          }
        }),
        (a.prototype.handleStatsChange = function (n) {
          var e,
            t = this.stats.stateAfterEvent(this.nextEventOffset),
            d = l.TeamPlayerStats.fromTeamsStatDoc(t.stats),
            f = this.period.stateAfterEvent(this.nextEventOffset),
            _ = Math.max(1, f.period - (f.isActive ? 0 : 1)),
            S = (e = c.List).of.apply(e, d.keySeq().toArray()),
            P = function (T) {
              return n.getIn(['statsPerPeriod', T], b);
            },
            I = Array.from({ length: _ }, function (T, F) {
              return ++F;
            }),
            b = l.TeamPlayerStats.fromTeams(S),
            E =
              _ === 1
                ? d
                : I.slice(0, -1).reduce(function (T, F) {
                    return l.TeamPlayerStats.subtract(T, P(F));
                  }, d);
          return I.reduce(function (T, F) {
            return T.updateIn(['statsPerPeriod', F], function (R) {
              return F === _ ? E : R || b;
            });
          }, n);
        }),
        a
      );
    })(r.VersionedStateEngine);
    return (kr.PerPeriodBoxScoreEngine = y), kr;
  }
  var mf;
  function Cv() {
    if (mf) return pa;
    (mf = 1),
      Object.defineProperty(pa, '__esModule', { value: !0 }),
      (pa.BasketballCompactorController = void 0);
    var i = Q,
      c = Ev(),
      r = Bv(),
      p = Tv(),
      v = hf(),
      h = Tr(),
      s = dt(),
      l = Ov(),
      u = Li(),
      y = Av(),
      o = Rv(),
      a = tr(),
      n = Fv(),
      e = kv(),
      t = wv(),
      d = Po(),
      f = (function (_) {
        i.__extends(S, _);
        function S() {
          var P = _.call(this) || this;
          (P.stateAccessorClass = v.StateAccessor),
            (P.activePlayer = new c.ActivePlayerEngine([])),
            (P.period = new l.PeriodEngine([])),
            (P.score = new y.ScoreEngine([])),
            (P.stats = new e.BoxScoreEngine([], P.score, P.activePlayer)),
            (P.playByPlay = new u.PlayByPlayEngine([], P.activePlayer, P.period, P.score, P.stats)),
            (P.statsPerPeriod = new t.PerPeriodBoxScoreEngine([], P.period, P.stats)),
            (P.engines = [
              P.activePlayer,
              P.period,
              P.score,
              P.statsPerPeriod,
              P.playByPlay,
              P.stats,
            ]),
            (P.compactor = new h.SabertoothEventCompactor());
          for (var I = 0, b = P.engines; I < b.length; I++) {
            var E = b[I];
            E.baseEvents = P.compactor.outStream;
          }
          return P;
        }
        return (
          (S.prototype.pushBatchAndFetch = function (P) {
            return this.pushBatch(P), this.getLatestScorekeepingState();
          }),
          (S.prototype.pushBatchToScratchAndFetch = function (P) {
            return this.pushBatchToScratch(P), this.getLatestScorekeepingState();
          }),
          (S.prototype.getLatestScorekeepingState = function () {
            var P = this.outputStream(),
              I = P.length > 0 ? P[P.length - 1] : void 0;
            return {
              scorekeepingState: this.latestState().scorekeepingState,
              undoRedoAvailability: this.undoRedoAvailability('main'),
              lastEventId: I === void 0 ? void 0 : I.id,
            };
          }),
          (S.prototype.getDeleteEvent = function (P) {
            var I = this.playByPlay.currentState.entryForEventId(P);
            if (I !== void 0) return (0, o.makeDeleteEvent)(I.entry);
          }),
          (S.prototype.getDeleteEventToUnassignPlayer = function (P) {
            var I = this.playByPlay.currentState.entryForEventId(P);
            if (I !== void 0 && I.entry.playerAssignmentEventId !== void 0)
              return (0, n.makeDeleteEventToUnassignPlayer)(I.entry);
          }),
          (S.prototype.getDerivedMultiGameStatsWithBaseStats = function (P) {
            return d.TeamPlayerStats.getDerivedMultiGameStatsWithBaseStats(P);
          }),
          (S.prototype.getMetaEventToChangePlayer = function (P, I) {
            var b = this.playByPlay.currentState.entryForEventId(P);
            if (b !== void 0) {
              var E = b.entry;
              if (E.playerId !== I)
                switch (E.playByPlayType) {
                  case u.PlayByPlayType.Play:
                    return (0, n.makeMetaEventToAssignPlayerToPlay)(E, I);
                  case u.PlayByPlayType.PlayerActivate:
                  case u.PlayByPlayType.PlayerDeactivate:
                    return (0, n.makeReplaceEventToChangePlayerActivation)(E, I);
                  case u.PlayByPlayType.StartPeriod:
                  case u.PlayByPlayType.EndPeriod:
                  case u.PlayByPlayType.ImplicitPlayerActivate:
                  case u.PlayByPlayType.ScoreAdjustment:
                  case u.PlayByPlayType.ScoreOverride:
                    throw Error(''.concat(E.playByPlayType, ' cannot change player'));
                  default:
                    (0, a.assertUnreachable)(E.playByPlayType);
                }
            }
          }),
          (S.prototype.getReplaceEventToChangeTeam = function (P, I) {
            var b = this.playByPlay.currentState.entryForEventId(P);
            if (b !== void 0) {
              var E = b.entry;
              if (E.teamId !== I)
                switch (E.playByPlayType) {
                  case u.PlayByPlayType.Play:
                    return (0, p.makeReplaceEventToChangeTeamForPlay)(E, I);
                  case u.PlayByPlayType.ScoreAdjustment:
                    return (0, p.makeReplaceEventToChangeTeamForScoreAdjust)(E, I);
                  case u.PlayByPlayType.ScoreOverride:
                    return (0, p.makeReplaceEventToChangeTeamForScoreOverride)(E, I);
                  case u.PlayByPlayType.PlayerActivate:
                  case u.PlayByPlayType.PlayerDeactivate:
                  case u.PlayByPlayType.StartPeriod:
                  case u.PlayByPlayType.EndPeriod:
                  case u.PlayByPlayType.ImplicitPlayerActivate:
                    throw Error(''.concat(E.playByPlayType, ' cannot change team'));
                  default:
                    (0, a.assertUnreachable)(E.playByPlayType);
                }
            }
          }),
          (S.prototype.getMetaEventToChangeTeamAndPlayer = function (P, I, b) {
            var E = this.playByPlay.currentState.entryForEventId(P);
            if (E !== void 0) {
              var T = E.entry;
              if (T.teamId === I) return this.getMetaEventToChangePlayer(P, b);
              switch (T.playByPlayType) {
                case u.PlayByPlayType.Play:
                  return (0, p.makeReplaceEventToChangeTeamAndPlayer)(T, I, b);
                case u.PlayByPlayType.ScoreAdjustment:
                case u.PlayByPlayType.ScoreOverride:
                case u.PlayByPlayType.PlayerActivate:
                case u.PlayByPlayType.PlayerDeactivate:
                case u.PlayByPlayType.StartPeriod:
                case u.PlayByPlayType.EndPeriod:
                case u.PlayByPlayType.ImplicitPlayerActivate:
                  throw Error(''.concat(T.playByPlayType, ' cannot change team'));
                default:
                  (0, a.assertUnreachable)(T.playByPlayType);
              }
            }
          }),
          (S.prototype.getReplaceEventToChangePlay = function (P, I) {
            var b = this.playByPlay.currentState.entryForEventId(P);
            if (b !== void 0) {
              var E = b.entry;
              if (E.playCode !== I)
                switch (E.playByPlayType) {
                  case u.PlayByPlayType.Play:
                    return (0, r.makeReplaceEventToChangePlay)(E, I);
                  case u.PlayByPlayType.PlayerActivate:
                  case u.PlayByPlayType.PlayerDeactivate:
                  case u.PlayByPlayType.StartPeriod:
                  case u.PlayByPlayType.EndPeriod:
                  case u.PlayByPlayType.ImplicitPlayerActivate:
                  case u.PlayByPlayType.ScoreAdjustment:
                  case u.PlayByPlayType.ScoreOverride:
                    throw Error(''.concat(E.playByPlayType, ' cannot change playCode'));
                  default:
                    (0, a.assertUnreachable)(E.playByPlayType);
                }
            }
          }),
          S
        );
      })(s.CompactorController);
    return (pa.BasketballCompactorController = f), pa;
  }
  var _a = {},
    wr = {},
    ht = {},
    bf;
  function Io() {
    if (bf) return ht;
    (bf = 1),
      Object.defineProperty(ht, '__esModule', { value: !0 }),
      (ht.inThePaint =
        ht.madeShot =
        ht.participantsWithRole =
        ht.participantWithRole =
        ht.participantIdWithRole =
          void 0);
    var i = Q,
      c = i.__importDefault(Se);
    function r(l, u) {
      var y = p(l, u);
      return y !== void 0 ? y.player.$id : void 0;
    }
    ht.participantIdWithRole = r;
    function p(l, u) {
      var y = v(l, u);
      if (y) return c.default.first(y);
    }
    ht.participantWithRole = p;
    function v(l, u) {
      if (l.participants)
        return c.default.filter(l.participants, function (y) {
          return c.default.contains(y.roles, u);
        });
    }
    ht.participantsWithRole = v;
    function h(l) {
      return !!l.properties && l.properties.made;
    }
    ht.madeShot = h;
    function s(l) {
      return !!l.properties && l.properties.shot_zone === 8;
    }
    return (ht.inThePaint = s), ht;
  }
  var mo = {},
    Cr = {},
    Ef;
  function Sa() {
    if (Ef) return Cr;
    (Ef = 1),
      Object.defineProperty(Cr, '__esModule', { value: !0 }),
      (Cr.unreachablePlayCode = Cr.assertUnreachable = void 0);
    function i(r) {
      throw new Error('Unhandled case value '.concat(r));
    }
    Cr.assertUnreachable = i;
    function c(r) {
      throw new Error('Unhandled case value '.concat(r));
    }
    return (Cr.unreachablePlayCode = c), Cr;
  }
  var bo = {},
    Bf;
  function we() {
    return (
      Bf ||
        ((Bf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.Sport =
              i.StatFormat =
              i.onValidPlayCode =
              i.isValidPlayCode =
              i.MultiSportEventCode =
                void 0);
          var c;
          (function (v) {
            (v.BeginPlay = 'begin_play'),
              (v.EndPlay = 'end_play'),
              (v.SetTeams = 'set_teams'),
              (v.Play = 'play'),
              (v.ActivatePlayer = 'activate_player'),
              (v.DeactivatePlayer = 'deactivate_player'),
              (v.EndPeriod = 'end_period'),
              (v.AssignPlayer = 'assign_player'),
              (v.AdjustScore = 'adjust_score'),
              (v.OverrideScore = 'override_score'),
              (v.SetGameSettings = 'set_game_settings'),
              (v.SetServer = 'set_server');
          })((c = i.MultiSportEventCode || (i.MultiSportEventCode = {})));
          function r(v, h) {
            return Object.values(h).includes(v);
          }
          i.isValidPlayCode = r;
          function p(v, h, s, l) {
            if (h.code !== c.Play) return v;
            var u = h;
            return r(u.attributes.play_code, s) ? l(v, u) : v;
          }
          (i.onValidPlayCode = p),
            (function (v) {
              (v.INTEGER = 'integer'),
                (v.DECIMAL = 'decimal'),
                (v.FLOAT_PERCENTAGE = 'floatPercentage'),
                (v.FLOAT_RATIO = 'floatRatio'),
                (v.PERCENTAGE = 'percentage'),
                (v.WIDE_INTEGER = 'wideInteger'),
                (v.JOIN = 'join');
            })(i.StatFormat || (i.StatFormat = {})),
            (function (v) {
              (v.SOCCER = 'soccer'),
                (v.HOCKEY = 'hockey'),
                (v.FIELD_HOCKEY = 'fieldHockey'),
                (v.LACROSSE = 'lacrosse'),
                (v.WATER_POLO = 'waterPolo'),
                (v.RUGBY = 'rugby'),
                (v.FOOTBALL = 'football'),
                (v.FLAG_FOOTBALL = 'flagFootball'),
                (v.BASKETBALL = 'basketball');
            })(i.Sport || (i.Sport = {}));
        })(bo)),
      bo
    );
  }
  var Eo = {},
    Tf;
  function Mr() {
    return (
      Tf ||
        ((Tf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.HOOPS_CONFIGURATION = i.OpponentPlayCode = i.PlayCode = void 0);
          var c;
          (function (p) {
            (p.Made2 = 'made2'),
              (p.Made3 = 'made3'),
              (p.Missed2 = 'missed2'),
              (p.Missed3 = 'missed3'),
              (p.MadeFreeThrow = 'madeFreeThrow'),
              (p.MissedFreeThrow = 'missedFreeThrow'),
              (p.Foul = 'foul'),
              (p.TechnicalFoul = 'technicalFoul'),
              (p.Turnover = 'turnover'),
              (p.Rebound = 'rebound'),
              (p.OffensiveRebound = 'offensiveRebound'),
              (p.DefensiveRebound = 'defensiveRebound'),
              (p.Assist = 'assist'),
              (p.Steal = 'steal'),
              (p.Block = 'block'),
              (p.Timeout = 'timeout'),
              (p.Timeout30 = 'timeout30');
          })((c = i.PlayCode || (i.PlayCode = {})));
          var r;
          (function (p) {
            (p.Made2 = 'made2'),
              (p.Made3 = 'made3'),
              (p.MadeFreeThrow = 'madeFreeThrow'),
              (p.MissedFreeThrow = 'missedFreeThrow'),
              (p.Foul = 'foul'),
              (p.TechnicalFoul = 'technicalFoul'),
              (p.Turnover = 'turnover'),
              (p.Rebound = 'rebound'),
              (p.OffensiveRebound = 'offensiveRebound'),
              (p.DefensiveRebound = 'defensiveRebound'),
              (p.Timeout = 'timeout'),
              (p.Timeout30 = 'timeout30');
          })((r = i.OpponentPlayCode || (i.OpponentPlayCode = {}))),
            (i.HOOPS_CONFIGURATION = {
              play_codes: Object.values(c),
              opponent_play_codes: Object.values(r),
            });
        })(Eo)),
      Eo
    );
  }
  var Of;
  function Pa() {
    return (
      Of ||
        ((Of = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.TeamPlayerStats = i.Stats = i.LegacyHoopsStat = i.HoopsStat = void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Sa()),
            v = He(),
            h = we(),
            s = Mr(),
            l;
          (function (f) {
            (f.FGM = 'FGM'),
              (f.FGA = 'FGA'),
              (f.FGP = 'FG%'),
              (f.M2PT = '2PTM'),
              (f.A2PT = '2PTA'),
              (f.P2PT = '2PT%'),
              (f.M3PT = '3PTM'),
              (f.A3PT = '3PTA'),
              (f.P3PT = '3PT%'),
              (f.FTM = 'FTM'),
              (f.FTA = 'FTA'),
              (f.FTP = 'FT%'),
              (f.REB = 'REB'),
              (f.ORB = 'ORB'),
              (f.DRB = 'DRB'),
              (f.AST = 'AST'),
              (f.STL = 'STL'),
              (f.PF = 'PF'),
              (f.TF = 'TF'),
              (f.TO = 'TO'),
              (f.PTS = 'PTS'),
              (f.GP = 'GP'),
              (f.GS = 'GS'),
              (f.BLK = 'BLK'),
              (f.TMO = 'TMO'),
              (f.TMO30 = 'TMO30'),
              (f.PM = '+/-'),
              (f.AST2TO = 'AST/TO'),
              (f.TSP = 'TS%'),
              (f.EFGP = 'eFG%'),
              (f.REBPG = 'RPG'),
              (f.ASTPG = 'APG'),
              (f.STLPG = 'SPG'),
              (f.BLKPG = 'BPG'),
              (f.PFPG = 'PFPG'),
              (f.TOPG = 'TOPG'),
              (f.PTSPG = 'PPG');
          })((l = i.HoopsStat || (i.HoopsStat = {}))),
            (function (f) {
              (f.OF = 'OF'),
                (f.FF = 'FF'),
                (f.PT2C = '2CP'),
                (f.PTOTO = 'POT'),
                (f.PIP = 'PIP'),
                (f.M3PTPFGA = '3PTM/FGA'),
                (f.TSA = 'TSA'),
                (f.A2PTPG = '2PTAPG'),
                (f.A3PTPG = '3PTAPG'),
                (f.M2PTPG = '2PTMPG'),
                (f.M3PTPG = '3PTMPG'),
                (f.FGMPG = 'FGMPG'),
                (f.FGAPG = 'FGAPG'),
                (f.FTMPG = 'FTMPG'),
                (f.FTAPG = 'FTAPG'),
                (f.FTAPFGA = 'FTA/FGA'),
                (f.OFPG = 'OFPG'),
                (f.TFPG = 'TFPG'),
                (f.FFPG = 'FFPG');
            })(i.LegacyHoopsStat || (i.LegacyHoopsStat = {}));
          var u;
          (function (f) {
            function _() {
              return Object.values(l);
            }
            f.values = _;
            function S() {
              return y(
                f.values().reduce(function (F, R) {
                  return F.set(R, 0);
                }, r.Map())
              );
            }
            f.empty = S;
            function P(F, R) {
              if ((0, h.isValidPlayCode)(R, s.HOOPS_CONFIGURATION.play_codes)) return E(!0, F, R);
              p.unreachablePlayCode(R);
            }
            f.addPlay = P;
            function I(F, R) {
              if ((0, h.isValidPlayCode)(R, s.HOOPS_CONFIGURATION.play_codes)) return E(!1, F, R);
              p.unreachablePlayCode(R);
            }
            f.removePlay = I;
            function b(F) {
              switch (F) {
                case l.REB:
                  return l.REBPG;
                case l.AST:
                  return l.ASTPG;
                case l.STL:
                  return l.STLPG;
                case l.BLK:
                  return l.BLKPG;
                case l.PF:
                  return l.PFPG;
                case l.TO:
                  return l.TOPG;
                case l.PTS:
                  return l.PTSPG;
                default:
                  return;
              }
            }
            f.averageKey = b;
            function E(F, R, L) {
              return y(
                (function () {
                  switch (L) {
                    case s.PlayCode.Made2:
                      return T(F, R, l.FGM, l.FGA, l.M2PT, l.A2PT);
                    case s.PlayCode.Made3:
                      return T(F, R, l.FGM, l.FGA, l.A3PT, l.M3PT);
                    case s.PlayCode.MadeFreeThrow:
                      return T(F, R, l.FTM, l.FTA);
                    case s.PlayCode.Missed2:
                      return T(F, R, l.FGA, l.A2PT);
                    case s.PlayCode.Missed3:
                      return T(F, R, l.FGA, l.A3PT);
                    case s.PlayCode.MissedFreeThrow:
                      return T(F, R, l.FTA);
                    case s.PlayCode.Assist:
                      return T(F, R, l.AST);
                    case s.PlayCode.Foul:
                      return T(F, R, l.PF);
                    case s.PlayCode.TechnicalFoul:
                      return T(F, R, l.TF, l.PF);
                    case s.PlayCode.Rebound:
                      return T(F, R, l.REB);
                    case s.PlayCode.OffensiveRebound:
                      return T(F, R, l.REB, l.ORB);
                    case s.PlayCode.DefensiveRebound:
                      return T(F, R, l.REB, l.DRB);
                    case s.PlayCode.Steal:
                      return T(F, R, l.STL);
                    case s.PlayCode.Turnover:
                      return T(F, R, l.TO);
                    case s.PlayCode.Block:
                      return T(F, R, l.BLK);
                    case s.PlayCode.Timeout:
                      return T(F, R, l.TMO);
                    case s.PlayCode.Timeout30:
                      return T(F, R, l.TMO30);
                    default:
                      p.unreachablePlayCode(L);
                  }
                })()
              );
            }
            function T(F, R) {
              for (var L = [], x = 2; x < arguments.length; x++) L[x - 2] = arguments[x];
              return L.reduce(function (N, M) {
                return N.updateIn([M], 0, function (J) {
                  return F ? ++J : --J;
                });
              }, R);
            }
          })((u = i.Stats || (i.Stats = {}))),
            (function (f) {
              function _(N) {
                var M = Object.entries(N).reduce(function (D, $) {
                    var z = $[0],
                      q = $[1];
                    return D.setIn([z], q.stats.offense[l.PTS]);
                  }, r.Map.of()),
                  J = f.fromTeamsStatDoc(N, !0);
                return f.toTeamsStatDoc(J, M);
              }
              f.getDerivedMultiGameStatsWithBaseStats = _;
              function S(N) {
                return N.toJS().reduce(function (M, J) {
                  var D = r.Map().set(v.TOTAL, u.empty()).set(v.UNASSIGNED_PLAYER, u.empty());
                  return M.set(J, D);
                }, r.Map());
              }
              f.fromTeams = S;
              function P(N, M) {
                return M.reduce(function (J, D, $) {
                  var z = N.getIn([$, v.TOTAL, l.PTS]),
                    q = N.getIn([$, v.UNASSIGNED_PLAYER, l.PTS]),
                    V = z - q,
                    U = D - V,
                    j = N.setIn([$, v.TOTAL, l.PTS], D).setIn([$, v.UNASSIGNED_PLAYER, l.PTS], U);
                  return (J[$] = R(j.get($))), J;
                }, {});
              }
              f.toTeamsStatDoc = P;
              function I(N, M) {
                return Object.entries(N).reduce(function (J, D) {
                  var $ = D[0],
                    z = D[1],
                    q = z.stats,
                    V = z.unassigned,
                    U = z.players,
                    j = Object.entries(U)
                      .reduce(function (re, se) {
                        var ce = se[0],
                          ae = se[1];
                        return re.setIn([$, ce], F(ae.stats, !!M));
                      }, J)
                      .setIn([$, v.TOTAL], F(q, !!M));
                  return V ? j.setIn([$, v.UNASSIGNED_PLAYER], F(V.stats, !1)) : j;
                }, r.fromJS({}));
              }
              f.fromTeamsStatDoc = I;
              function b(N, M) {
                return N.reduce(function (J, D, $) {
                  return J.setIn([$], E(N.get($), M.get($)));
                }, r.Map());
              }
              f.subtract = b;
              function E(N, M) {
                return N.reduce(function (J, D, $) {
                  return J.setIn([$], T(N.get($), M.get($, u.empty())));
                }, r.Map());
              }
              function T(N, M) {
                return n(
                  N.reduce(function (J, D, $) {
                    return J.setIn([$], N.get($) - M.get($, 0));
                  }, u.empty()),
                  void 0
                );
              }
              function F(N, M) {
                return n(r.fromJS(N.offense), M);
              }
              function R(N) {
                return N.reduce(
                  function (M, J, D) {
                    switch (D) {
                      case v.TOTAL:
                      case v.UNASSIGNED_PLAYER:
                        return M;
                      default:
                        return (M.players[D] = L(J)), M;
                    }
                  },
                  {
                    players: {},
                    unassigned: L(N.get(v.UNASSIGNED_PLAYER)),
                    stats: x(N.get(v.TOTAL)),
                  }
                );
              }
              function L(N) {
                return { stats: x(N) };
              }
              function x(N) {
                return { offense: N.toJS() };
              }
            })(i.TeamPlayerStats || (i.TeamPlayerStats = {}));
          function y(f) {
            return o(f, a, n);
          }
          function o(f) {
            for (var _ = [], S = 1; S < arguments.length; S++) _[S - 1] = arguments[S];
            return _.reduce(function (P, I) {
              return I(P);
            }, f);
          }
          function a(f) {
            var _ = function (P) {
                return f.get(P, 0);
              },
              S = _(l.FTM) + _(l.M2PT) * 2 + _(l.M3PT) * 3;
            return f.setIn([l.PTS], S);
          }
          function n(f, _) {
            var S = function (b) {
                return f.get(b, 0);
              },
              P = function (b, E) {
                return S(b) / S(E);
              },
              I = f
                .setIn([l.FGP], P(l.FGM, l.FGA))
                .setIn([l.P2PT], P(l.M2PT, l.A2PT))
                .setIn([l.P3PT], P(l.M3PT, l.A3PT))
                .setIn([l.FTP], P(l.FTM, l.FTA));
            return (
              (I = o(I, e, t, d)),
              _
                ? u.values().reduce(function (b, E) {
                    var T = u.averageKey(E);
                    return T ? b.setIn([T], P(E, l.GP)) : b;
                  }, I)
                : I
            );
          }
          function e(f) {
            var _ = function (P) {
                return f.get(P, 0);
              },
              S = function (P, I) {
                return _(P) / _(I);
              };
            return f.setIn([l.AST2TO], S(l.AST, l.TO));
          }
          function t(f) {
            var _ = function (P) {
                return f.get(P, 0);
              },
              S = (0.5 * _(l.PTS)) / (_(l.FGA) + 0.44 * _(l.FTA));
            return f.setIn([l.TSP], S);
          }
          function d(f) {
            var _ = function (P) {
                return f.get(P, 0);
              },
              S = (_(l.FGM) + 0.5 * _(l.M3PT)) / _(l.FGA);
            return f.setIn([l.EFGP], S);
          }
        })(mo)),
      mo
    );
  }
  var Af;
  function Mv() {
    if (Af) return wr;
    (Af = 1),
      Object.defineProperty(wr, '__esModule', { value: !0 }),
      (wr.StatsEngine = wr.HoopsGameStatsDoc = void 0);
    var i = Q,
      c = i.__importDefault(Se),
      r = i.__importStar(de()),
      p = i.__importStar(yd()),
      v = i.__importStar(Ie()),
      h = _r(),
      s = i.__importStar(Io()),
      l = Io(),
      u = Pa(),
      y = (function (a) {
        i.__extends(n, a);
        function n() {
          return (a !== null && a.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(n.prototype, 'internal', {
            get: function () {
              return this.getIn(['internal']).toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (n.prototype.setTeams = function (e) {
            return this.set('teams', r.fromJS(e));
          }),
          Object.defineProperty(n.prototype, 'renderFunctions', {
            get: function () {
              return [
                this.renderGeneralStats.bind(this),
                this.renderOffensiveStats.bind(this),
                this.renderDefensiveStats.bind(this),
              ];
            },
            enumerable: !1,
            configurable: !0,
          }),
          (n.prototype.renderOffensiveStats = function (e) {
            var t = e.offense;
            if (t !== void 0) {
              var d = (e.general || {})[u.HoopsStat.GP];
              d !== void 0 &&
                ((t[u.HoopsStat.FGM] = (0, h.safeSum)(t[u.HoopsStat.M2PT], t[u.HoopsStat.M3PT])),
                (t[u.HoopsStat.FGA] = (0, h.safeSum)(t[u.HoopsStat.A2PT], t[u.HoopsStat.A3PT])),
                (t[u.HoopsStat.FGP] = t[u.HoopsStat.FGM] / t[u.HoopsStat.FGA]),
                (t[u.HoopsStat.FTP] = t[u.HoopsStat.FTM] / t[u.HoopsStat.FTA]),
                (t[u.HoopsStat.P2PT] = t[u.HoopsStat.M2PT] / t[u.HoopsStat.A2PT]),
                (t[u.HoopsStat.P3PT] = t[u.HoopsStat.M3PT] / t[u.HoopsStat.A3PT]),
                (t[u.LegacyHoopsStat.M3PTPFGA] = t[u.HoopsStat.M3PT] / t[u.HoopsStat.FGA]),
                (t[u.HoopsStat.PTS] = (0, h.safeSum)(
                  t[u.HoopsStat.FTM],
                  2 * t[u.HoopsStat.M2PT],
                  3 * t[u.HoopsStat.M3PT]
                )),
                (t[u.HoopsStat.EFGP] =
                  (0, h.safeSum)(t[u.HoopsStat.FGM], 0.5 * t[u.HoopsStat.M3PT]) /
                  t[u.HoopsStat.FGA]),
                (t[u.LegacyHoopsStat.TSA] = (0, h.safeSum)(
                  t[u.HoopsStat.FGA],
                  0.44 * t[u.HoopsStat.FTA]
                )),
                (t[u.HoopsStat.TSP] = t[u.HoopsStat.PTS] / (2 * t[u.LegacyHoopsStat.TSA])),
                (t[u.HoopsStat.PTSPG] = t[u.HoopsStat.PTS] / d),
                (t[u.LegacyHoopsStat.A2PTPG] = t[u.HoopsStat.A2PT] / d),
                (t[u.LegacyHoopsStat.A3PTPG] = t[u.HoopsStat.A3PT] / d),
                (t[u.LegacyHoopsStat.M2PTPG] = t[u.HoopsStat.M2PT] / d),
                (t[u.LegacyHoopsStat.M3PTPG] = t[u.HoopsStat.M3PT] / d),
                (t[u.LegacyHoopsStat.FGMPG] = t[u.HoopsStat.FGM] / d),
                (t[u.LegacyHoopsStat.FGAPG] = t[u.HoopsStat.FGA] / d),
                (t[u.LegacyHoopsStat.FTAPG] = t[u.HoopsStat.FTA] / d),
                (t[u.LegacyHoopsStat.FTMPG] = t[u.HoopsStat.FTM] / d),
                (t[u.LegacyHoopsStat.FTAPFGA] = t[u.HoopsStat.FTA] / t[u.HoopsStat.FGA]),
                (t[u.HoopsStat.ASTPG] = t[u.HoopsStat.AST] / d),
                (t[u.HoopsStat.REBPG] = t[u.HoopsStat.REB] / d),
                (t[u.HoopsStat.TOPG] = t[u.HoopsStat.TO] / d),
                (t[u.HoopsStat.AST2TO] = t[u.HoopsStat.AST] / t[u.HoopsStat.TO]),
                (t[u.HoopsStat.BLKPG] = t[u.HoopsStat.BLK] / d));
            }
          }),
          (n.prototype.renderDefensiveStats = function (e) {
            var t = e.defense;
            if (t !== void 0) {
              var d = (e.general || {})[u.HoopsStat.GP];
              d !== void 0 &&
                ((t[u.HoopsStat.REBPG] = t[u.HoopsStat.REB] / d),
                (t[u.HoopsStat.BLKPG] = t[u.HoopsStat.BLK] / d),
                (t[u.HoopsStat.STLPG] = t[u.HoopsStat.STL] / d),
                (t[u.HoopsStat.PTS] = (0, h.safeSum)(
                  t[u.HoopsStat.FTM],
                  2 * t[u.HoopsStat.M2PT],
                  3 * t[u.HoopsStat.M3PT]
                )),
                (t[u.HoopsStat.FGM] = t[u.HoopsStat.M2PT] / t[u.HoopsStat.M3PT]),
                (t[u.HoopsStat.FGA] = t[u.HoopsStat.A2PT] / t[u.HoopsStat.A3PT]),
                (t[u.HoopsStat.FGP] = t[u.HoopsStat.FGM] / t[u.HoopsStat.FGA]),
                (t[u.HoopsStat.P2PT] = t[u.HoopsStat.M2PT] / t[u.HoopsStat.A2PT]),
                (t[u.HoopsStat.P3PT] = t[u.HoopsStat.M3PT] / t[u.HoopsStat.A3PT]),
                (t[u.LegacyHoopsStat.M3PTPFGA] = t[u.HoopsStat.M3PT] / t[u.HoopsStat.FGA]));
            }
          }),
          (n.prototype.renderGeneralStats = function (e) {
            var t = e.general;
            t !== void 0 &&
              ((t[u.HoopsStat.PFPG] = t[u.HoopsStat.PF] / t[u.HoopsStat.GP]),
              (t[u.LegacyHoopsStat.OFPG] = t[u.LegacyHoopsStat.OF] / t[u.HoopsStat.GP]),
              (t[u.LegacyHoopsStat.TFPG] = t[u.HoopsStat.TF] / t[u.HoopsStat.GP]),
              (t[u.LegacyHoopsStat.FFPG] = t[u.LegacyHoopsStat.FF] / t[u.HoopsStat.GP]),
              (t[u.HoopsStat.REB] = (0, h.safeSum)(
                (e.offense || {})[u.HoopsStat.REB],
                (e.defense || {})[u.HoopsStat.REB]
              )),
              (t[u.HoopsStat.REBPG] = t[u.HoopsStat.REB] / t[u.HoopsStat.GP]));
          }),
          n
        );
      })(p.GameStatsDoc);
    wr.HoopsGameStatsDoc = y;
    var o = (function (a) {
      i.__extends(n, a);
      function n(e, t) {
        var d = a.call(this, e) || this;
        return (d.baseEvents = e), (d.context = t), d;
      }
      return (
        (n.prototype.initialState = function () {
          return new y(
            r.fromJS({
              teams: {},
              editsForTeams: {},
              internal: {
                period: void 0,
                offRebound: !1,
                lastFoulType: void 0,
                lastReboundTeamId: void 0,
                lastTurnoverLosingTeamId: void 0,
                possession: {
                  rebounderTeamId: void 0,
                  turnoverLosingTeamId: void 0,
                  offRebound: void 0,
                  foulType: void 0,
                  currentNumber: void 0,
                },
              },
            })
          ).set('editPlayersToRemove', r.Set.of());
        }),
        (n.prototype.processOneEvent = function (e, t) {
          if (t.code === 'set_teams') return e;
          switch (t.code) {
            case 'team_stat_edit':
              return this.applyTeamEdit(e, t);
            case 'player_stat_edit':
              return this.applyPlayerEdit(e, t);
            case 'remove_player_edit':
              return this.applyRemovePlayerEdit(e, t);
            case 'clear_all_edits':
              return this.clearAllEdits(e);
          }
          e = this.reconcileState(e, t);
          var d = e.internal;
          return (
            (e = this.setGamesPlayed(e, t)),
            (e = this.incrementShooterStats(e, t, d)),
            (e = this.incrementDefensiveTeamStats(e, t, d)),
            (e = this.incrementFoulerStats(e, t, d)),
            (e = this.incrementOtherParticipantStats(e, t, d)),
            e
          );
        }),
        (n.prototype.applyTeamEdit = function (e, t) {
          return e.setTeamStats(t.teamId, t.category, t.statName, t.statValue, 'editsForTeams');
        }),
        (n.prototype.applyPlayerEdit = function (e, t) {
          return e
            .setPlayerStats(
              t.teamId,
              t.playerId,
              t.category,
              t.statName,
              t.statValue,
              'editsForTeams'
            )
            .removePlayerFromRemoveList(t.playerId);
        }),
        (n.prototype.applyRemovePlayerEdit = function (e, t) {
          return e.addPlayerToRemoveList(t.playerId);
        }),
        (n.prototype.clearAllEdits = function (e) {
          return e
            .update('editsForTeams', function (t) {
              return t.clear();
            })
            .set('editPlayersToRemove', r.Set.of());
        }),
        (n.prototype.getDerivedMultiGamePivotedStatsWithBaseStats = function (e) {
          var t = this.stateHistory[0].setTeams(e).set('context', r.fromJS(this.context));
          return t.pivotStatsForOutput;
        }),
        (n.prototype.reconcileState = function (e, t) {
          var d = this,
            f,
            _,
            S,
            P,
            I = e.getIn(['internal']);
          return (
            (I = I.withMutations(function (b) {
              b.set('lastReboundTeamId', b.getIn(['possession', 'rebounderTeamId'])),
                b.set('lastTurnoverLosingTeamId', b.getIn(['possession', 'turnoverLosingTeamId'])),
                b.set('offRebound', b.getIn(['possession', 'offRebound']));
            })),
            (((f = t.result) === null || f === void 0 ? void 0 : f.poss_num) !==
              I.getIn(['possession', 'currentNumber']) ||
              ((_ = t.result) === null || _ === void 0 ? void 0 : _.per) !== I.get('period')) &&
              (I = I.set(
                'possession',
                r.fromJS({
                  rebounderTeamId: void 0,
                  turnoverLosingTeamId: void 0,
                  offRebound: void 0,
                  foulType: void 0,
                  currentNumber: (S = t.result) === null || S === void 0 ? void 0 : S.poss_num,
                })
              )),
            (I = I.set('period', (P = t.result) === null || P === void 0 ? void 0 : P.per)),
            (I = I.updateIn(['possession'], function (b) {
              return b.withMutations(function (E) {
                var T, F;
                t.properties &&
                  t.properties.rebounder_team_id !== void 0 &&
                  E.set('rebounderTeamId', t.properties.rebounder_team_id),
                  c.default.contains(['shot', 'frt'], t.code) &&
                    E.get('rebounderTeamId') ===
                      ((T = t.setting) === null || T === void 0 ? void 0 : T.p_team_id) &&
                    E.set('offRebound', !0);
                var R = t.properties ? t.properties.foul_type : void 0,
                  L = t.properties ? t.properties.fouler_team_id : void 0,
                  x = t.properties ? t.properties.team_id : void 0;
                t.code === 'foulc' &&
                  (c.default.contains(['personal_foul', 'flagrant_foul'], R) ||
                    (R === 'technical_foul' && d.context.ageGroup !== 'college')) &&
                  ((F = t.setting) === null || F === void 0 ? void 0 : F.p_team_id) === L &&
                  E.set('turnoverLosingTeamId', L),
                  t.code === 'etov' && E.set('turnoverLosingTeamId', x),
                  t.code === 'foulc' && E.set('foulType', R);
              });
            })),
            (I = I.set('lastFoulType', I.getIn(['possession', 'foulType']))),
            e.set('internal', I)
          );
        }),
        (n.prototype.setGamesPlayed = function (e, t) {
          for (var d in t)
            if (d.indexOf('lineup') === 0) {
              var f = d.split('_')[1];
              e = e.setTeamStats(f, 'general', u.HoopsStat.GP, 1);
              var _ = t[d].active_players;
              if (_ !== void 0)
                for (var S = 0, P = _; S < P.length; S++) {
                  var I = P[S];
                  e = e.setPlayerStats(f, I, 'general', u.HoopsStat.GP, 1);
                }
            }
          for (var b = 0, E = t.participants || []; b < E.length; b++) {
            var T = E[b];
            T.team_id !== void 0 &&
              (e = e.setPlayerStats(T.team_id, T.player.$id, 'general', u.HoopsStat.GP, 1));
          }
          return e;
        }),
        (n.prototype.incrementShooterStats = function (e, t, d) {
          var f,
            _,
            S,
            P,
            I = (0, l.participantIdWithRole)(t, 'shtr'),
            b = (f = t.setting) === null || f === void 0 ? void 0 : f.p_team_id,
            E = (_ = t.properties) === null || _ === void 0 ? void 0 : _.points,
            T = s.madeShot(t),
            F = s.inThePaint(t),
            R = (S = t.properties) === null || S === void 0 ? void 0 : S.shot_zone,
            L = ['SZM'.concat(R), 'SZA'.concat(R)],
            x = L[0],
            N = L[1],
            M = [
              {
                key: u.LegacyHoopsStat.PT2C,
                incrementBy:
                  (t.code === 'shot' ||
                    (t.code === 'frt' && d.lastFoulType !== 'technical_foul')) &&
                  T &&
                  d.offRebound &&
                  d.lastReboundTeamId === b
                    ? E
                    : 0,
              },
              {
                key: u.LegacyHoopsStat.PTOTO,
                incrementBy:
                  c.default.contains(['shot', 'frt'], t.code) &&
                  T &&
                  d.lastTurnoverLosingTeamId !== void 0 &&
                  d.lastTurnoverLosingTeamId !==
                    ((P = t.setting) === null || P === void 0 ? void 0 : P.p_team_id)
                    ? E
                    : 0,
              },
              {
                key: u.LegacyHoopsStat.PIP,
                incrementBy: t.code === 'shot' && T && E === 2 && F ? E : 0,
              },
              { key: x, increment: T },
              { key: N, increment: !0 },
              { key: u.HoopsStat.M2PT, increment: t.code === 'shot' && T && E === 2 },
              { key: u.HoopsStat.A2PT, increment: t.code === 'shot' && E === 2 },
              { key: u.HoopsStat.M3PT, increment: t.code === 'shot' && T && E === 3 },
              { key: u.HoopsStat.A3PT, increment: t.code === 'shot' && E === 3 },
              { key: u.HoopsStat.FTM, increment: t.code === 'frt' && T },
              { key: u.HoopsStat.FTA, increment: t.code === 'frt' },
            ];
          return e.incrementPlayerStatsElements(b, I, 'offense', M);
        }),
        (n.prototype.incrementDefensiveTeamStats = function (e, t, d) {
          var f,
            _,
            S = (f = t.setting) === null || f === void 0 ? void 0 : f.defensive_team_id,
            P = (_ = t.properties) === null || _ === void 0 ? void 0 : _.points,
            I = s.madeShot(t);
          return (
            t.code === 'shot' &&
              P === 2 &&
              ((e = e.incrementTeamStats(S, 'defense', u.HoopsStat.A2PT, 1)),
              I && (e = e.incrementTeamStats(S, 'defense', u.HoopsStat.M2PT, 1))),
            t.code === 'shot' &&
              P === 3 &&
              ((e = e.incrementTeamStats(S, 'defense', u.HoopsStat.A3PT, 1)),
              I && (e = e.incrementTeamStats(S, 'defense', u.HoopsStat.M3PT, 1))),
            t.code === 'frt' &&
              ((e = e.incrementTeamStats(S, 'defense', u.HoopsStat.FTA, 1)),
              I && (e = e.incrementTeamStats(S, 'defense', u.HoopsStat.FTM, 1))),
            e
          );
        }),
        (n.prototype.incrementFoulerStats = function (e, t, d) {
          var f,
            _,
            S,
            P = (0, l.participantIdWithRole)(t, 'flr'),
            I = (f = t.properties) === null || f === void 0 ? void 0 : f.fouler_team_id,
            b = ((_ = t.setting) === null || _ === void 0 ? void 0 : _.p_team_id) === I,
            E = (S = t.properties) === null || S === void 0 ? void 0 : S.foul_type,
            T = [
              { key: u.HoopsStat.PF, increment: t.code === 'foulc' },
              { key: 'PFP1', increment: t.code === 'foulc' && d.period === 1 },
              { key: 'PFP2', increment: t.code === 'foulc' && d.period === 2 },
              { key: 'PFP3', increment: t.code === 'foulc' && d.period === 3 },
              { key: 'PFP4', increment: t.code === 'foulc' && d.period === 4 },
              { key: 'PFP5G', increment: t.code === 'foulc' && d.period > 4 },
              { key: u.LegacyHoopsStat.OF, increment: t.code === 'foulc' && E === 'personal_foul' },
              { key: u.HoopsStat.TF, increment: t.code === 'foulc' && E === 'technical_foul' },
              { key: u.LegacyHoopsStat.FF, increment: t.code === 'foulc' && E === 'flagrant_foul' },
            ];
          e = e.incrementPlayerStatsElements(I, P, 'general', T);
          var F = [
            { key: u.HoopsStat.PF, increment: t.code === 'foulc' && b },
            {
              key: u.HoopsStat.TO,
              increment:
                t.code === 'foulc' &&
                b &&
                !(
                  E === 'technical_foul' &&
                  c.default.contains(['adult', 'college'], this.context.ageGroup)
                ),
            },
          ];
          return e.incrementPlayerStatsElements(I, P, 'offense', F);
        }),
        (n.prototype.incrementOtherParticipantStats = function (e, t, d) {
          var f,
            _,
            S,
            P,
            I,
            b = (f = t.setting) === null || f === void 0 ? void 0 : f.p_team_id,
            E = (_ = t.setting) === null || _ === void 0 ? void 0 : _.defensive_team_id,
            T = (0, l.participantIdWithRole)(t, 'asst'),
            F = (0, l.participantIdWithRole)(t, 'blkr'),
            R = (0, l.participantIdWithRole)(t, 'shtr'),
            L = (0, l.participantIdWithRole)(t, 'stlr'),
            x = (0, l.participantIdWithRole)(t, 'tov'),
            N = (0, l.participantIdWithRole)(t, 'rbdr'),
            M = s.madeShot(t);
          return (
            t.code === 'shot' &&
              t.assist_added &&
              M &&
              (e = e.incrementPlayerStats(b, T, 'offense', u.HoopsStat.AST, 1)),
            t.code === 'shot' &&
              t.block_added &&
              !M &&
              ((e = e.incrementPlayerStats(E, F, 'defense', u.HoopsStat.BLK, 1)),
              (e = e.incrementPlayerStats(b, R, 'offense', u.HoopsStat.BLK, 1))),
            t.code === 'etov' &&
              t.steal_added &&
              (e = e.incrementPlayerStats(E, L, 'defense', u.HoopsStat.STL, 1)),
            t.code === 'etov' &&
              ((e = e.incrementPlayerStats(b, x, 'offense', u.HoopsStat.TO, 1)),
              t.steal_added && (e = e.incrementPlayerStats(b, x, 'offense', u.HoopsStat.STL, 1))),
            c.default.contains(['shot', 'frt'], t.code) &&
              (((S = t.properties) === null || S === void 0 ? void 0 : S.rebounder_team_id) ===
              ((P = t.setting) === null || P === void 0 ? void 0 : P.p_team_id)
                ? (e = e.incrementPlayerStats(b, N, 'offense', u.HoopsStat.REB, 1))
                : ((I = t.properties) === null || I === void 0 ? void 0 : I.rebounder_team_id) !==
                    void 0 && (e = e.incrementPlayerStats(E, N, 'defense', u.HoopsStat.REB, 1))),
            e
          );
        }),
        n
      );
    })(v.VersionedStateEngine);
    return (wr.StatsEngine = o), wr;
  }
  var xr = {},
    Rf;
  function xv() {
    if (Rf) return xr;
    (Rf = 1),
      Object.defineProperty(xr, '__esModule', { value: !0 }),
      (xr.LegacySituationEngine = xr.SituationState = void 0);
    var i = Q,
      c = i.__importStar(Ie()),
      r = i.__importStar(de()),
      p = i.__importStar(be()),
      v = (function (s) {
        i.__extends(l, s);
        function l() {
          return (s !== null && s.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(l.prototype, 'period', {
            get: function () {
              return this.get('period');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(l.prototype, 'scoresImmutable', {
            get: function () {
              return this.get('scores').mergeDeep(this.get('scoreEdits'));
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(l.prototype, 'scores', {
            get: function () {
              return this.scoresImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(l.prototype, 'homeId', {
            get: function () {
              return this.get('homeId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(l.prototype, 'awayId', {
            get: function () {
              return this.get('awayId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (l.prototype.incrementScore = function (u, y, o) {
            var a = this;
            return y && (a = this.incrementIn(['scores', u], o)), a;
          }),
          l
        );
      })(p.ImmutableState);
    xr.SituationState = v;
    var h = (function (s) {
      i.__extends(l, s);
      function l() {
        return (s !== null && s.apply(this, arguments)) || this;
      }
      return (
        (l.prototype.processOneEvent = function (u, y) {
          switch (y.code) {
            case 'set_teams':
              u = this.setTeams(u, y);
              break;
            case 'strtp':
              u = u.increment('period', 1);
              break;
            case 'shot':
            case 'frt':
              var o = y;
              u = u.incrementScore(o.properties.team_id, o.properties.made, o.properties.points);
              break;
            case 'scadj':
              var a = y;
              (u = u.setIn(['scores', u.homeId], a.properties.adjusted_home_score)),
                (u = u.setIn(['scores', u.awayId], a.properties.adjusted_away_score));
              break;
            case 'team_stat_edit':
              u = this.teamStatEdit(u, y);
              break;
            case 'clear_all_edits':
              u = this.clearAllEdits(u);
              break;
          }
          return u;
        }),
        (l.prototype.initialState = function () {
          return new v(
            r.fromJS({ scores: {}, scoreEdits: {}, period: 0, homeId: void 0, awayId: void 0 })
          );
        }),
        (l.prototype.setTeams = function (u, y) {
          return u
            .setIn(['scores', y.attributes.homeId], 0)
            .setIn(['scores', y.attributes.awayId], 0)
            .set('homeId', y.attributes.homeId)
            .set('awayId', y.attributes.awayId);
        }),
        (l.prototype.teamStatEdit = function (u, y) {
          return (
            y.statName === 'R' &&
              y.category === 'offense' &&
              (u = u.setIn(['scoreEdits', y.teamId], y.statValue)),
            u
          );
        }),
        (l.prototype.clearAllEdits = function (u) {
          return u.update('scoreEdits', function (y) {
            return y.clear();
          });
        }),
        l
      );
    })(c.VersionedStateEngine);
    return (xr.LegacySituationEngine = h), xr;
  }
  var Lr = {},
    Ff;
  function Lv() {
    if (Ff) return Lr;
    (Ff = 1),
      Object.defineProperty(Lr, '__esModule', { value: !0 }),
      (Lr.ShotChartsEngine = Lr.ShotChartsState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = Io(),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          (u.prototype.shotChartsData = function () {
            return this.getIn(['teams']).toJS();
          }),
          (u.prototype.ensureTeam = function (y) {
            var o = this;
            return (
              o.hasIn(['teams', y]) ||
                (o = o.setIn(['teams', y], c.fromJS({ shots: [], players: {} }))),
              o
            );
          }),
          (u.prototype.ensurePlayer = function (y, o) {
            var a = this;
            return (
              a.hasIn(['teams', y, 'players', o]) ||
                (a = a.setIn(['teams', y, 'players', o, 'shots'], c.List())),
              a
            );
          }),
          u
        );
      })(p.ImmutableState);
    Lr.ShotChartsState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u() {
        return (l !== null && l.apply(this, arguments)) || this;
      }
      return (
        (u.prototype.initialState = function () {
          return new h(c.fromJS({ teams: {} }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          return o.code === 'shot' && (y = this.addShot(y, o)), y;
        }),
        (u.prototype.addShot = function (y, o) {
          var a = o.properties.team_id,
            n = (0, v.participantIdWithRole)(o, 'shtr');
          y = y.ensureTeam(a);
          var e;
          return (
            n !== void 0
              ? ((y = y.ensurePlayer(a, n)), (e = ['teams', a, 'players', n, 'shots']))
              : (e = ['teams', a, 'shots']),
            y.updateIn(e, function (t) {
              var d;
              return t.push({
                p: o.properties.rel_court_pos,
                m: o.properties.made ? 1 : 0,
                q: (d = o.setting) === null || d === void 0 ? void 0 : d.per,
                n: o.properties.points,
                d: o.properties.play_direction,
                shot_zone: o.properties.shot_zone,
              });
            })
          );
        }),
        u
      );
    })(r.VersionedStateEngine);
    return (Lr.ShotChartsEngine = s), Lr;
  }
  var Dr = {},
    kf;
  function Dv() {
    if (kf) return Dr;
    (kf = 1),
      Object.defineProperty(Dr, '__esModule', { value: !0 }),
      (Dr.PassthroughTranscoder = Dr.TranscoderState = void 0);
    var i = Q,
      c = i.__importStar(dt()),
      r = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return h;
      })(c.TranscoderState);
    Dr.TranscoderState = r;
    var p = (function (v) {
      i.__extends(h, v);
      function h(s) {
        var l = v.call(this, s) || this;
        return (l.baseEvents = s), l;
      }
      return (
        (h.prototype.initialState = function () {
          return new r();
        }),
        (h.prototype.processOneEvent = function (s, l) {
          this.state.outStream.push(l);
        }),
        h
      );
    })(c.SnapshottedTranscoder);
    return (Dr.PassthroughTranscoder = p), Dr;
  }
  var wf;
  function Gv() {
    if (wf) return _a;
    (wf = 1),
      Object.defineProperty(_a, '__esModule', { value: !0 }),
      (_a.BasketballPassthroughController = void 0);
    var i = Q,
      c = i.__importStar(dt()),
      r = hf(),
      p = Mv(),
      v = xv(),
      h = Lv(),
      s = Dv(),
      l = (function (u) {
        i.__extends(y, u);
        function y(o, a) {
          var n = u.call(this) || this;
          return (
            (n.context = a),
            (n.stateAccessorClass = r.StateAccessor),
            (n.transcoder = new s.PassthroughTranscoder(n.legacyEvents)),
            (n.stats = new p.StatsEngine(n.transcoder.outStream, n.context)),
            (n.situation = new v.LegacySituationEngine(n.transcoder.outStream)),
            (n.shotCharts = new h.ShotChartsEngine(n.transcoder.outStream)),
            (n.engines = [n.stats, n.situation, n.shotCharts]),
            n.push({
              code: 'set_teams',
              id: 'auto_generated_set_teams',
              attributes: { homeId: o.homeTeamId, awayId: o.awayTeamId },
            }),
            n
          );
        }
        return (
          (y.prototype.getDerivedMultiGamePivotedStatsWithBaseStats = function (o) {
            return this.stats.getDerivedMultiGamePivotedStatsWithBaseStats(o);
          }),
          y
        );
      })(c.TranscoderController);
    return (_a.BasketballPassthroughController = l), _a;
  }
  var Ia = {},
    ma = {},
    $t = {},
    Le = {},
    Cf;
  function Bo() {
    if (Cf) return Le;
    (Cf = 1),
      Object.defineProperty(Le, '__esModule', { value: !0 }),
      (Le.makeEndPlay =
        Le.makeBeginPlay =
        Le.makeTransaction =
        Le.makeOverrideScore =
        Le.makeAdjustScore =
        Le.makeAssignPlayer =
        Le.makePlay =
        Le.makeDeactivatePlayer =
        Le.makeActivatePlayer =
          void 0);
    var i = Me(),
      c = we();
    function r(a) {
      var n = a.teamId,
        e = a.playerId,
        t = a.pbpEntryId,
        d = a.createdAt,
        f = d === void 0 ? void 0 : d;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.ActivatePlayer,
        createdAt: f,
        attributes: { pbp_entry_id: t || (0, i.uuid4)(), team_id: n, player_id: e },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeActivatePlayer = r;
    function p(a) {
      var n = a.teamId,
        e = a.playerId,
        t = a.pbpEntryId,
        d = a.createdAt,
        f = d === void 0 ? void 0 : d;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.DeactivatePlayer,
        createdAt: f,
        attributes: { pbp_entry_id: t || (0, i.uuid4)(), team_id: n, player_id: e },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeDeactivatePlayer = p;
    function v(a) {
      var n = a.teamId,
        e = a.playCode,
        t = a.pbpEntryId,
        d = a.id,
        f = d === void 0 ? void 0 : d,
        _ = a.createdAt,
        S = _ === void 0 ? void 0 : _,
        P = a.playDetails,
        I = P === void 0 ? void 0 : P;
      return {
        id: f ?? (0, i.uuid4)(),
        code: c.MultiSportEventCode.Play,
        createdAt: S,
        attributes: {
          pbp_entry_id: t || (0, i.uuid4)(),
          team_id: n,
          play_code: e,
          play_details: I,
        },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makePlay = v;
    function h(a) {
      var n = a.playId,
        e = a.playerId,
        t = a.isEdit,
        d = t === void 0 ? !1 : t,
        f = a.createdAt,
        _ = f === void 0 ? void 0 : f;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.AssignPlayer,
        createdAt: _,
        attributes: { play_event_id: n, player_id: e, is_edit: d },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeAssignPlayer = h;
    function s(a) {
      var n = a.teamId,
        e = a.adjustment,
        t = a.pbpEntryId,
        d = a.createdAt,
        f = d === void 0 ? void 0 : d;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.AdjustScore,
        createdAt: f,
        attributes: { pbp_entry_id: t || (0, i.uuid4)(), team_id: n, adjustment: e },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeAdjustScore = s;
    function l(a) {
      var n = a.teamId,
        e = a.points,
        t = a.pbpEntryId,
        d = a.createdAt,
        f = d === void 0 ? void 0 : d;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.OverrideScore,
        createdAt: f,
        attributes: { pbp_entry_id: t || (0, i.uuid4)(), team_id: n, points: e },
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeOverrideScore = l;
    function u(a) {
      return {
        id: (0, i.uuid4)(),
        code: 'transaction',
        events: a,
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeTransaction = u;
    function y() {
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.BeginPlay,
        compactorAttributes: { stream: 'main' },
      };
    }
    Le.makeBeginPlay = y;
    function o() {
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.EndPlay,
        compactorAttributes: { stream: 'main' },
      };
    }
    return (Le.makeEndPlay = o), Le;
  }
  var To = {},
    We = {},
    Oo = {},
    ba = {},
    Mf;
  function xf() {
    if (Mf) return ba;
    (Mf = 1), Object.defineProperty(ba, '__esModule', { value: !0 }), (ba.formatPeriod = void 0);
    var i = _r();
    function c(r) {
      if ((0, i.inRange)(r, 10, 20)) return ''.concat(r, 'th Period');
      var p = r % 10;
      switch (p) {
        case 1:
          return ''.concat(r, 'st Period');
        case 2:
          return ''.concat(r, 'nd Period');
        case 3:
          return ''.concat(r, 'rd Period');
        default:
          return ''.concat(r, 'th Period');
      }
    }
    return (ba.formatPeriod = c), ba;
  }
  var Lf;
  function Df() {
    return (
      Lf ||
        ((Lf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.prepareScore =
              i.generateScoreChanged =
              i.generateGameEnd =
              i.generateGameState =
              i.generateAnnouncements =
                void 0);
          var c = Q,
            r = c.__importStar(Mi()),
            p = c.__importDefault(Se),
            v = Ad(),
            h = xf();
          function s(a) {
            return {
              gameState: l(
                a.awayTeamId,
                a.homeTeamId,
                a.scores[a.awayTeamId],
                a.scores[a.homeTeamId],
                a.period
              ),
              gameEnd: u(a),
              scoreChanged: y(a),
            };
          }
          i.generateAnnouncements = s;
          function l(a, n, e, t, d) {
            var f = r.stubbify(a),
              _ = r.stubbify(n),
              S = (0, h.formatPeriod)(d);
            return 'Weâ€™re underway at the '
              .concat(f, ' game versus ')
              .concat(_, '. Currently the game is in the ')
              .concat(S, ' and the score is ')
              .concat(f, ' ')
              .concat(e, ' ')
              .concat(_, ' ')
              .concat(t);
          }
          i.generateGameState = l;
          function u(a) {
            var n = p.default.sortBy((0, i.prepareScore)(a), function (d) {
                return -1 * d.score;
              }),
              e = n[0],
              t = n[1];
            return e.score - t.score === 0
              ? "That's the end of the game, "
                  .concat(e.stub, ' and ')
                  .concat(t.stub, ' tie ')
                  .concat(e.score, ' to ')
                  .concat(t.score, '.')
              : "That's the end of the game, "
                  .concat(e.stub, ' get the win over ')
                  .concat(t.stub, ' ')
                  .concat(e.score, ' to ')
                  .concat(t.score, '.');
          }
          i.generateGameEnd = u;
          function y(a) {
            var n = a.scores[a.awayTeamId],
              e = a.scores[a.homeTeamId];
            return 'Score changed! '.concat(n, ' ').concat(e);
          }
          i.generateScoreChanged = y;
          var o = function (a) {
            return (0, v.asTuple)([
              { stub: r.stubbify(a.awayTeamId), score: a.scores[a.awayTeamId] },
              { stub: r.stubbify(a.homeTeamId), score: a.scores[a.homeTeamId] },
            ]);
          };
          i.prepareScore = o;
        })(Oo)),
      Oo
    );
  }
  var Gf;
  function Hf() {
    if (Gf) return We;
    (Gf = 1),
      Object.defineProperty(We, '__esModule', { value: !0 }),
      (We.getColorCommentaryMaybe =
        We.getEndPeriodCommentary =
        We.getPeriodStartCommentary =
        We.getAdjustScoreCommentary =
        We.getDeactivatePlayerCommentary =
        We.getActivatePlayerCommentary =
        We.getPlayCommentary =
          void 0);
    var i = Q,
      c = Mr(),
      r = i.__importStar(Mi()),
      p = _r(),
      v = i.__importDefault(Se),
      h = Df(),
      s = Pa(),
      l = xf();
    function u(D, $, z) {
      z === void 0 && (z = p.getRandomInt);
      var q = r.stubbify($);
      switch (D) {
        case c.PlayCode.Made2:
          return y(q, z);
        case c.PlayCode.Made3:
          return o(q, z);
        case c.PlayCode.Missed2:
          return a(q, z);
        case c.PlayCode.Missed3:
          return n(q, z);
        case c.PlayCode.MadeFreeThrow:
          return e(q, z);
        case c.PlayCode.MissedFreeThrow:
          return t(q, z);
        case c.PlayCode.Foul:
          return d(q, z);
        case c.PlayCode.Turnover:
          return f(q, z);
        case c.PlayCode.Rebound:
        case c.PlayCode.DefensiveRebound:
        case c.PlayCode.OffensiveRebound:
          return _(q, z);
        case c.PlayCode.Assist:
          return S(q, z);
        case c.PlayCode.Steal:
          return P(q, z);
        case c.PlayCode.Block:
          return I(q, z);
        case c.PlayCode.Timeout:
          return b(q);
        case c.PlayCode.Timeout30:
          return E(q);
        default:
          return;
      }
    }
    We.getPlayCommentary = u;
    function y(D, $) {
      var z = [
          ''.concat(D, ' finishes with the soft touch for 2'),
          'Easy shot from '.concat(D, ' for 2'),
          ''.concat(D, ' puts it up and in for 2'),
          ''.concat(D, ' nails the deuce'),
          ''.concat(D, ' with the soft touch around the rim for 2'),
        ],
        q = $(z.length);
      return z[q];
    }
    function o(D, $) {
      var z = [
          'The shot from '.concat(D, ' is good for 3'),
          ''.concat(D, ' drains one from beyond the arc'),
          ''.concat(D, ' knocks down the trifecta!'),
          ''.concat(D, ' with the triple'),
          ''.concat(D, ' with the 3 is good'),
        ],
        q = $(z.length);
      return z[q];
    }
    function a(D, $) {
      var z = [
          'No good for 2 from '.concat(D, ' that time'),
          ''.concat(D, ' is too strong on the 2 and misses'),
          'Just off the mark with that one from '.concat(D, ' for 2'),
          'Tough luck on the close-range shot from '.concat(D),
          ''.concat(D, ' Nearly had it for 2, but the ball spins out'),
        ],
        q = $(z.length);
      return z[q];
    }
    function n(D, $) {
      var z = [
          ''.concat(D, ' is off from 3'),
          'No basket on the triple from '.concat(D),
          'A long one from '.concat(D, ' is missed'),
          ''.concat(D, ' not good from long range'),
          ''.concat(D, ' came up short on the 3 point attempt'),
        ],
        q = $(z.length);
      return z[q];
    }
    function e(D, $) {
      var z = [
          ''.concat(D, ' Sinks the free throw!'),
          ''.concat(D, ' Calmly drains the free throw'),
          ''.concat(D, ' Delivers a perfect stroke from the free throw line'),
        ],
        q = $(z.length);
      return z[q];
    }
    function t(D, $) {
      var z = [
          ''.concat(D, ' Comes up short from the free throw line'),
          'No luck from '.concat(D, "'s free throw shot"),
          ''.concat(D, " Can't find the mark from the free throw line"),
        ],
        q = $(z.length);
      return z[q];
    }
    function d(D, $) {
      var z = [
          ''.concat(D, ' Commits the foul on that play'),
          'Oops, thatâ€™s a foul by '.concat(D),
        ],
        q = $(z.length);
      return z[q];
    }
    function f(D, $) {
      var z = [''.concat(D, ' Loses possession with the turnover'), ''.concat(D, ' Turns it over')],
        q = $(z.length);
      return z[q];
    }
    function _(D, $) {
      var z = [
          ''.concat(D, ' Grabs the board'),
          ''.concat(D, ' Cleans the glass with that rebound'),
          ''.concat(D, ' Claims the board'),
        ],
        q = $(z.length);
      return z[q];
    }
    function S(D, $) {
      var z = [
          ''.concat(D, ' with the dish'),
          ''.concat(D, ' Delivers the dime'),
          ''.concat(D, ' Makes it look easy with the assist'),
        ],
        q = $(z.length);
      return z[q];
    }
    function P(D, $) {
      var z = [
          ''.concat(D, ' Is picking pockets with the steal'),
          ''.concat(D, ' Forces the turnover with the steal'),
          ''.concat(D, ' Sneaks up and steals the ball away'),
        ],
        q = $(z.length);
      return z[q];
    }
    function I(D, $) {
      var z = [
          ''.concat(D, ' Rejects the shot with the block'),
          ''.concat(D, ' Swats it away'),
          ''.concat(D, ' Sends it back with the block'),
        ],
        q = $(z.length);
      return z[q];
    }
    function b(D) {
      return 'A minute timeout is called by '.concat(D);
    }
    function E(D) {
      return 'A quick timeout on the floor by '.concat(D);
    }
    function T(D, $) {
      $ === void 0 && ($ = p.getRandomInt);
      var z = r.stubbify(D),
        q = [
          ''.concat(z, ' Checks in'),
          ''.concat(z, ' Enters the game'),
          ''.concat(z, ' Makes their way onto the court'),
        ],
        V = $(q.length);
      return q[V];
    }
    We.getActivatePlayerCommentary = T;
    function F(D, $) {
      $ === void 0 && ($ = p.getRandomInt);
      var z = r.stubbify(D),
        q = [
          ''.concat(z, ' Is headed to the bench after a strong stint'),
          ''.concat(z, ' Takes a breather on the bench'),
          'Substitution time! '.concat(z, ' makes way for a sub'),
        ],
        V = $(q.length);
      return q[V];
    }
    We.getDeactivatePlayerCommentary = F;
    function R(D, $) {
      return 'Score changed! '.concat(D, ' ').concat($);
    }
    We.getAdjustScoreCommentary = R;
    function L(D, $, z, q, V) {
      var U = r.stubbify(D),
        j = r.stubbify($),
        re = (0, l.formatPeriod)(V);
      return V === 1
        ? (0, h.generateGameState)(D, $, z, q, V)
        : 'The '
            .concat(re, ' is underway. ')
            .concat(U, ' take on ')
            .concat(j, '. The current score is ')
            .concat(U, ' ')
            .concat(z, ' ')
            .concat(j, ' ')
            .concat(q);
    }
    We.getPeriodStartCommentary = L;
    function x(D, $) {
      var z = (0, l.formatPeriod)(D),
        q = v.default.sortBy(
          (0, h.prepareScore)({ scores: $.scores, homeTeamId: $.homeId, awayTeamId: $.awayId }),
          function (U) {
            return -1 * U.score;
          }
        ),
        V = q[0].score - q[1].score;
      return V === 0
        ? 'The '.concat(z, ' ends tied up at ').concat(q[0].score)
        : 'The '
            .concat(z, ' comes to a close with ')
            .concat(q[0].stub, ' leading the game by ')
            .concat(V);
    }
    We.getEndPeriodCommentary = x;
    function N(D, $, z, q, V) {
      var U = [],
        j = J($, z, V);
      j && U.push(j);
      var re = M(D, z, q, V);
      if ((re && U.push(re), U.length !== 0)) return U.join(' ').trim();
    }
    We.getColorCommentaryMaybe = N;
    function M(D, $, z, q) {
      if ([c.PlayCode.Made2, c.PlayCode.Made3, c.PlayCode.MadeFreeThrow].includes($))
        try {
          var V = +D.stats[q].players[z].stats.offense[s.HoopsStat.PTS];
          switch ($) {
            case c.PlayCode.MadeFreeThrow:
              if (V === 10) return 'They now have 10 points in the game!';
              break;
            case c.PlayCode.Made2:
              if ([10, 11].includes(V)) return 'They now have '.concat(V, ' points in the game!');
              break;
            case c.PlayCode.Made3:
              if ([10, 11, 12].includes(V))
                return 'They now have '.concat(V, ' points in the game!');
              break;
            default:
              return;
          }
        } catch {
          return;
        }
    }
    function J(D, $, z) {
      if ([c.PlayCode.Made2, c.PlayCode.Made3].includes($))
        try {
          var q = D.latestScorerStreaks[z].streakCount;
          switch (q) {
            case 2:
              return 'Thatâ€™s back to back buckets, theyâ€™re heating up!';
            case 3:
              return 'Thatâ€™s 3 buckets in a row, theyâ€™re on fire!';
            default:
              return;
          }
        } catch {
          return;
        }
    }
    return We;
  }
  var Nf;
  function mt() {
    return (
      Nf ||
        ((Nf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.MultiSportPlayByPlayEngine =
              i.PlayByPlayEntry =
              i.playByPlayEntry =
              i.PlayByPlayState =
              i.PlayByPlayType =
                void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Ie()),
            v = c.__importStar(be()),
            h = dt(),
            s = we(),
            l = Hf(),
            u;
          (function (n) {
            (n.Play = 'play'),
              (n.StartPeriod = 'startPeriod'),
              (n.EndPeriod = 'endPeriod'),
              (n.ImplicitPlayerActivate = 'implicitPlayerActivate'),
              (n.PlayerActivate = 'playerActivate'),
              (n.PlayerDeactivate = 'playerDeactivate'),
              (n.ScoreAdjustment = 'scoreAdjustment'),
              (n.ScoreOverride = 'scoreOverride'),
              (n.BeginPlay = 'beginPlay'),
              (n.EndPlay = 'endPlay');
          })((u = i.PlayByPlayType || (i.PlayByPlayType = {})));
          var y = (function (n) {
            c.__extends(e, n);
            function e() {
              return (n !== null && n.apply(this, arguments)) || this;
            }
            return (
              Object.defineProperty(e.prototype, 'isInProgress', {
                get: function () {
                  return this.get(e.isInProgressKey, !1);
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.setInProgress = function (t) {
                return this.set(e.isInProgressKey, t);
              }),
              Object.defineProperty(e.prototype, 'inProgressEntries', {
                get: function () {
                  return this.get(e.inProgressEntriesKey);
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.pushInProgressEntry = function (t) {
                return this.updateIn([e.inProgressEntriesKey], r.List(), function (d) {
                  return d.push(t);
                });
              }),
              (e.prototype.clearInProgressEntries = function () {
                return this.set(e.inProgressEntriesKey, r.List());
              }),
              Object.defineProperty(e.prototype, 'latestScorerStreaks', {
                get: function () {
                  return this.get(e.latestScorerStreakKey).toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.trackLatestScore = function (t, d) {
                var f = this.latestScorerStreaks;
                if (f[t]) {
                  var _ = f[t];
                  return _.playerId === d
                    ? this.setIn([e.latestScorerStreakKey, t, 'playerId'], d).setIn(
                        [e.latestScorerStreakKey, t, 'streakCount'],
                        _.streakCount + 1
                      )
                    : this.setIn([e.latestScorerStreakKey, t, 'playerId'], d).setIn(
                        [e.latestScorerStreakKey, t, 'streakCount'],
                        1
                      );
                }
                return this.setIn([e.latestScorerStreakKey, t, 'playerId'], d).setIn(
                  [e.latestScorerStreakKey, t, 'streakCount'],
                  1
                );
              }),
              (e.prototype.trackLatestMiss = function (t, d) {
                var f = this.latestScorerStreaks;
                if (f[t]) {
                  var _ = f[t];
                  if (_.playerId === d)
                    return this.setIn([e.latestScorerStreakKey, t, 'playerId'], d).setIn(
                      [e.latestScorerStreakKey, t, 'streakCount'],
                      0
                    );
                }
                return this;
              }),
              Object.defineProperty(e.prototype, 'allEntriesImmutable', {
                get: function () {
                  return this.get(e.entriesKey);
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(e.prototype, 'allEntries', {
                get: function () {
                  return this.allEntriesImmutable.toJS();
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.pushEntry = function (t) {
                var d = this.allEntriesImmutable.count(),
                  f = this.updateIn([e.entriesKey], function (_) {
                    return _.push(t);
                  });
                return (
                  t.eventIds &&
                    t.eventIds.forEach(function (_) {
                      return (f = f.setIn([e.eventIdIndexMapKey, _], d));
                    }),
                  f
                );
              }),
              (e.prototype.entryForEventId = function (t) {
                var d = this.getIn([e.eventIdIndexMapKey, t]);
                if (d !== void 0) {
                  var f = this.getIn([e.entriesKey, d]);
                  if (f === void 0) throw new h.InvalidEventIndexError(d);
                  return { entry: f, index: d };
                }
              }),
              (e.isInProgressKey = 'isInProgress'),
              (e.inProgressEntriesKey = 'inProgressEntries'),
              (e.entriesKey = 'entries'),
              (e.eventIdIndexMapKey = 'eventIdIndexMap'),
              (e.latestScorerStreakKey = 'latestScorerStreak'),
              e
            );
          })(v.ImmutableState);
          (i.PlayByPlayState = y),
            (i.playByPlayEntry = r.Record({
              id: '',
              template: '',
              playByPlayType: '',
              eventIds: void 0,
              playCode: void 0,
              playerStats: void 0,
              teamId: void 0,
              playerId: void 0,
              playerAssignmentEventId: void 0,
              period: void 0,
              teamScores: void 0,
              periodScores: void 0,
              scoreAdjustment: void 0,
              playerEdited: void 0,
              playerAssignable: !1,
              teamAssignable: !1,
              deletable: !1,
              createdAt: void 0,
              summary: void 0,
              playDetails: void 0,
              initialState: void 0,
              colorCommentary: void 0,
            }));
          var o = (function (n) {
            c.__extends(e, n);
            function e() {
              return (n !== null && n.apply(this, arguments)) || this;
            }
            return e;
          })(i.playByPlayEntry);
          i.PlayByPlayEntry = o;
          var a = (function (n) {
            c.__extends(e, n);
            function e(t, d, f, _, S, P) {
              var I = n.call(this, t) || this;
              return (
                (I.baseEvents = t),
                (I.confirguration = d),
                (I.activePlayer = f),
                (I.period = _),
                (I.score = S),
                (I.stats = P),
                (I.playsForStreakTracking = []),
                (I.playsForStreakBreaking = []),
                I
              );
            }
            return (
              (e.prototype.initialState = function () {
                return new y(
                  r.fromJS({
                    entries: [],
                    eventIdIndexMap: {},
                    isInProgress: !1,
                    inProgressEntriesKey: {},
                    latestScorerStreak: {},
                  })
                );
              }),
              (e.prototype.processOneEvent = function (t, d) {
                var f = this;
                switch (d.code) {
                  case s.MultiSportEventCode.BeginPlay:
                    return this.handleBeginPlay(t, d);
                  case s.MultiSportEventCode.EndPlay:
                    return this.handleEndPlay(t, d);
                  case s.MultiSportEventCode.Play:
                    return (0, s.onValidPlayCode)(
                      t,
                      d,
                      this.confirguration.play_codes,
                      function (_, S) {
                        return f.handlePlay(_, S);
                      }
                    );
                  case s.MultiSportEventCode.EndPeriod:
                    return this.handleEndPeriod(t, d);
                  case s.MultiSportEventCode.AssignPlayer:
                    return this.handleAssignPlayer(t, d);
                  case s.MultiSportEventCode.ActivatePlayer:
                    return this.handleActivatePlayer(t, d);
                  case s.MultiSportEventCode.DeactivatePlayer:
                    return this.handleDeactivatePlayer(t, d);
                  case s.MultiSportEventCode.AdjustScore:
                    return this.handleAdjustScore(t, d);
                  case s.MultiSportEventCode.OverrideScore:
                    return this.handleOverrideScore(t, d);
                  default:
                    return t;
                }
              }),
              (e.prototype.handleBeginPlay = function (t, d) {
                return t;
              }),
              (e.prototype.handleEndPlay = function (t, d) {
                return t;
              }),
              (e.prototype.getColorCommentaryMaybe = function (t, d, f, _, S) {}),
              (e.prototype.handleEndPeriod = function (t, d) {
                var f = this.period.stateBeforeEvent(this.nextEventOffset),
                  _ = this.score.stateAfterEvent(this.nextEventOffset),
                  S = new o(
                    r.fromJS({
                      template: 'End of period '.concat(f == null ? void 0 : f.period),
                      id: 'end_of_period_'.concat(f == null ? void 0 : f.period),
                      playByPlayType: u.EndPeriod,
                      eventIds: [d.id],
                      period: f == null ? void 0 : f.period,
                      teamScores: _ == null ? void 0 : _.scoresImmutable,
                      playerAssignable: !1,
                      teamAssignable: !1,
                      deletable: !0,
                      createdAt: d.createdAt,
                      summary: this.getEndPeriodSummary(f.period, _),
                    })
                  );
                return t.pushEntry(S);
              }),
              (e.prototype.getEndPeriodSummary = function (t, d) {}),
              (e.prototype.handleAssignPlayer = function (t, d) {
                var f,
                  _ = d.attributes.play_event_id,
                  S = t.entryForEventId(_);
                if (S === void 0) return t;
                var P = S.index,
                  I = S.entry;
                if (I.eventIds === void 0) throw new Error('entry is missing eventId');
                var b = d.attributes.player_id,
                  E =
                    (f = this.stats) === null || f === void 0
                      ? void 0
                      : f.stateAfterEvent(this.nextEventOffset);
                I.playCode &&
                  I.teamId &&
                  (this.playsForStreakTracking.includes(I.playCode)
                    ? (t = t.trackLatestScore(I.teamId, b))
                    : this.playsForStreakBreaking.includes(I.playCode) &&
                      (t = t.trackLatestMiss(I.teamId, b)));
                var T = void 0;
                I.playCode &&
                  I.teamId &&
                  E &&
                  (T = this.getColorCommentaryMaybe(E, t, I.playCode, b, I.teamId));
                var F = new o(
                    r.fromJS({
                      template: ''.concat(I.playCode, ' by ').concat(b),
                      id: I.id,
                      playByPlayType: u.Play,
                      eventIds: I.eventIds,
                      playCode: I.playCode,
                      playerStats: E == null ? void 0 : E.stats[I.teamId].players[b],
                      teamId: I.teamId,
                      playerId: b,
                      playerAssignmentEventId: d.id,
                      teamScores: I.teamScores,
                      playerEdited: d.attributes.is_edit,
                      playerAssignable: !0,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: I.createdAt,
                      colorCommentary: T,
                      summary: (0, l.getPlayCommentary)(I.playCode, b),
                    })
                  ),
                  R = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (R != null && R.isPlayerActive(I.teamId, b)) return t.setIn(['entries', P], F);
                var L = new o(
                  r.fromJS({
                    template: ''.concat(b, ' entered the game'),
                    id: ''.concat(I.id, '_implicit_activate'),
                    playByPlayType: u.ImplicitPlayerActivate,
                    teamId: I.teamId,
                    playerId: b,
                    playerAssignable: !1,
                    teamAssignable: !1,
                    deleteable: !1,
                    createdAt: I.createdAt,
                    summary: this.getActivatePlayerSummary(b),
                  })
                );
                return t
                  .updateIn(['entries'], function (x) {
                    return x.set(P, F).insert(P, L);
                  })
                  .setIn(c.__spreadArray(['eventIdIndexMap'], I.eventIds.toArray(), !0), P + 1);
              }),
              (e.prototype.handleActivatePlayer = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.player_id,
                  S = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (S != null && S.isPlayerActive(f, _)) return t;
                var P = new o(
                  r.fromJS({
                    template: ''.concat(_, ' entered the game'),
                    id: d.attributes.pbp_entry_id,
                    playByPlayType: u.PlayerActivate,
                    eventIds: [d.id],
                    teamId: f,
                    playerId: _,
                    playerAssignable: !0,
                    teamAssignable: !1,
                    deletable: !0,
                    createdAt: d.createdAt,
                    summary: this.getActivatePlayerSummary(_),
                  })
                );
                return t.pushEntry(P);
              }),
              (e.prototype.getActivatePlayerSummary = function (t) {}),
              (e.prototype.handleDeactivatePlayer = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.player_id,
                  S = this.activePlayer.stateBeforeEvent(this.nextEventOffset);
                if (!(S != null && S.isPlayerActive(f, _))) return t;
                var P = new o(
                  r.fromJS({
                    template: ''.concat(_, ' sat down'),
                    id: d.attributes.pbp_entry_id,
                    playByPlayType: u.PlayerDeactivate,
                    eventIds: [d.id],
                    teamId: f,
                    playerId: _,
                    playerAssignable: !0,
                    teamAssignable: !1,
                    deletable: !0,
                    createdAt: d.createdAt,
                    summary: this.getDeactivatePlayerSummary(_),
                  })
                );
                return t.pushEntry(P);
              }),
              (e.prototype.getDeactivatePlayerSummary = function (t) {}),
              (e.prototype.handleAdjustScore = function (t, d) {
                var f = d.attributes.team_id,
                  _ = d.attributes.adjustment,
                  S = this.score.stateAfterEvent(this.nextEventOffset),
                  P = new o(
                    r.fromJS({
                      template: 'Score adjusted: '.concat(_, ' for ').concat(f),
                      id: d.attributes.pbp_entry_id,
                      playByPlayType: u.ScoreAdjustment,
                      eventIds: [d.id],
                      teamId: f,
                      teamScores: S == null ? void 0 : S.scoresImmutable,
                      scoreAdjustment: _,
                      playerAssignable: !1,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: d.createdAt,
                      summary: this.getAdjustScoreSummary(S.scores[S.awayId], S.scores[S.homeId]),
                    })
                  );
                return t.pushEntry(P);
              }),
              (e.prototype.getAdjustScoreSummary = function (t, d) {}),
              (e.prototype.handleOverrideScore = function (t, d) {
                var f,
                  _ = d.attributes.team_id,
                  S =
                    (f = this.score.stateBeforeEvent(this.nextEventOffset)) === null || f === void 0
                      ? void 0
                      : f.scores[_],
                  P = this.score.stateAfterEvent(this.nextEventOffset),
                  I = P.scores[_] - S,
                  b = new o(
                    r.fromJS({
                      template: 'Score adjusted: '.concat(I, ' for ').concat(_),
                      id: d.attributes.pbp_entry_id,
                      playByPlayType: u.ScoreOverride,
                      eventIds: [d.id],
                      teamId: _,
                      teamScores: P == null ? void 0 : P.scoresImmutable,
                      scoreAdjustment: I,
                      playerAssignable: !1,
                      teamAssignable: !0,
                      deletable: !0,
                      createdAt: d.createdAt,
                    })
                  );
                return t.pushEntry(b);
              }),
              e
            );
          })(p.VersionedStateEngine);
          i.MultiSportPlayByPlayEngine = a;
        })(To)),
      To
    );
  }
  var jf;
  function Hv() {
    if (jf) return $t;
    (jf = 1),
      Object.defineProperty($t, '__esModule', { value: !0 }),
      ($t.makeDeleteEventToUnassignPlayer =
        $t.makeReplaceEventToChangePlayerActivation =
        $t.makeMetaEventToAssignPlayerToPlay =
          void 0);
    var i = Me(),
      c = Bo(),
      r = mt();
    function p(s, l) {
      if (s.eventIds === void 0 || s.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (s.playByPlayType !== r.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      var u = s.eventIds.last();
      return s.playerAssignmentEventId === void 0
        ? {
            id: (0, i.uuid4)(),
            code: 'insert',
            afterId: u,
            events: [
              (0, c.makeAssignPlayer)({
                playId: u,
                playerId: l,
                isEdit: !0,
                createdAt: s.createdAt,
              }),
            ],
          }
        : {
            id: (0, i.uuid4)(),
            code: 'replace',
            deleteIds: [s.playerAssignmentEventId],
            events: [
              (0, c.makeAssignPlayer)({
                playId: u,
                playerId: l,
                isEdit: !0,
                createdAt: s.createdAt,
              }),
            ],
          };
    }
    $t.makeMetaEventToAssignPlayerToPlay = p;
    function v(s, l) {
      if (s.eventIds === void 0 || s.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (
        s.playByPlayType !== r.PlayByPlayType.PlayerActivate &&
        s.playByPlayType !== r.PlayByPlayType.PlayerDeactivate
      )
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      return {
        id: (0, i.uuid4)(),
        code: 'replace',
        deleteIds: s.eventIds.toArray(),
        events: [
          s.playByPlayType === r.PlayByPlayType.PlayerActivate
            ? (0, c.makeActivatePlayer)({
                teamId: s.teamId,
                playerId: l,
                pbpEntryId: s.id,
                createdAt: s.createdAt,
              })
            : (0, c.makeDeactivatePlayer)({
                teamId: s.teamId,
                playerId: l,
                pbpEntryId: s.id,
                createdAt: s.createdAt,
              }),
        ],
      };
    }
    $t.makeReplaceEventToChangePlayerActivation = v;
    function h(s) {
      if (s.playByPlayType !== r.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(s.playByPlayType));
      if (s.playerAssignmentEventId === void 0)
        throw new Error('entry is missing playerAssignmentEventId');
      return { id: (0, i.uuid4)(), code: 'delete', deleteIds: [s.playerAssignmentEventId] };
    }
    return ($t.makeDeleteEventToUnassignPlayer = h), $t;
  }
  var Ea = {},
    qf;
  function Nv() {
    if (qf) return Ea;
    (qf = 1), Object.defineProperty(Ea, '__esModule', { value: !0 }), (Ea.makeDeleteEvent = void 0);
    var i = Q,
      c = Me();
    function r(p) {
      if (p.eventIds === void 0 || p.eventIds.size === 0)
        throw new Error('Cannot make a delete event for an entry that has no eventId');
      return p.playerAssignmentEventId === void 0
        ? { id: (0, c.uuid4)(), code: 'delete', deleteIds: p.eventIds.toArray() }
        : {
            id: (0, c.uuid4)(),
            code: 'delete',
            deleteIds: i.__spreadArray(
              i.__spreadArray([], p.eventIds.toArray(), !0),
              [p.playerAssignmentEventId],
              !1
            ),
          };
    }
    return (Ea.makeDeleteEvent = r), Ea;
  }
  var Ba = {},
    Uf;
  function jv() {
    if (Uf) return Ba;
    (Uf = 1),
      Object.defineProperty(Ba, '__esModule', { value: !0 }),
      (Ba.makeReplaceEventToChangePlay = void 0);
    var i = Q,
      c = Me(),
      r = Bo(),
      p = mt();
    function v(h, s, l) {
      if (h.eventIds === void 0 || h.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (h.playByPlayType !== p.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(h.playByPlayType));
      if (h.teamId === void 0) throw new Error('entry is missing teamId');
      var u = (0, r.makePlay)({
        teamId: h.teamId,
        playCode: s,
        pbpEntryId: h.id,
        createdAt: h.createdAt,
        playDetails: l,
      });
      return h.playerAssignmentEventId !== void 0
        ? {
            id: (0, c.uuid4)(),
            code: 'replace',
            deleteIds: i.__spreadArray(
              i.__spreadArray([], h.eventIds.toArray(), !0),
              [h.playerAssignmentEventId],
              !1
            ),
            events: [
              u,
              (0, r.makeAssignPlayer)({
                playId: u.id,
                playerId: h.playerId,
                isEdit: !0,
                createdAt: h.createdAt,
              }),
            ],
          }
        : { id: (0, c.uuid4)(), code: 'replace', deleteIds: h.eventIds.toArray(), events: [u] };
    }
    return (Ba.makeReplaceEventToChangePlay = v), Ba;
  }
  var Ta = {},
    Wf;
  function qv() {
    if (Wf) return Ta;
    (Wf = 1),
      Object.defineProperty(Ta, '__esModule', { value: !0 }),
      (Ta.makeReplaceEventToChangePlays = void 0);
    var i = Me(),
      c = mt();
    function r(p, v, h) {
      var s, l;
      if (p.eventIds === void 0 || p.eventIds.size === 0)
        throw new Error('entry is missing eventIds');
      if (p.playByPlayType !== c.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(p.playByPlayType));
      if (p.teamId === void 0) throw new Error('entry is missing teamId');
      var u = { id: (0, i.uuid4)(), code: 'replace', deleteIds: p.eventIds.toArray(), events: v };
      return (
        p.playerAssignmentEventId !== void 0 && h !== void 0
          ? (u.deleteIds.push(p.playerAssignmentEventId), (s = u.events).push.apply(s, h))
          : p.playerAssignmentEventId !== void 0
            ? u.deleteIds.push(p.playerAssignmentEventId)
            : h !== void 0 && (l = u.events).push.apply(l, h),
        u
      );
    }
    return (Ta.makeReplaceEventToChangePlays = r), Ta;
  }
  var At = {},
    $f;
  function Uv() {
    if ($f) return At;
    ($f = 1),
      Object.defineProperty(At, '__esModule', { value: !0 }),
      (At.makeReplaceEventToChangeTeamAndPlayer =
        At.makeReplaceEventToChangeTeamForScoreOverride =
        At.makeReplaceEventToChangeTeamForScoreAdjust =
        At.makeReplaceEventToChangeTeamForPlay =
          void 0);
    var i = Q,
      c = Me(),
      r = Bo(),
      p = mt();
    function v(u, y) {
      if (u.eventIds === void 0 || u.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (u.playByPlayType !== p.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(u.playByPlayType));
      if (u.playCode === void 0) throw new Error('entry is missing playCode');
      var o;
      return (
        u.playerAssignmentEventId === void 0
          ? (o = u.eventIds.toArray())
          : (o = i.__spreadArray(
              i.__spreadArray([], u.eventIds.toArray(), !0),
              [u.playerAssignmentEventId],
              !1
            )),
        {
          id: (0, c.uuid4)(),
          code: 'replace',
          deleteIds: o,
          events: [
            (0, r.makePlay)({
              teamId: y,
              playCode: u.playCode,
              pbpEntryId: u.id,
              createdAt: u.createdAt,
            }),
          ],
        }
      );
    }
    At.makeReplaceEventToChangeTeamForPlay = v;
    function h(u, y) {
      if (u.eventIds === void 0 || u.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (u.playByPlayType !== p.PlayByPlayType.ScoreAdjustment)
        throw new Error('entry is wrong play type '.concat(u.playByPlayType));
      return {
        id: (0, c.uuid4)(),
        code: 'replace',
        deleteIds: u.eventIds.toArray(),
        events: [
          (0, r.makeAdjustScore)({
            teamId: y,
            adjustment: u.scoreAdjustment,
            pbpEntryId: u.id,
            createdAt: u.createdAt,
          }),
        ],
      };
    }
    At.makeReplaceEventToChangeTeamForScoreAdjust = h;
    function s(u, y) {
      if (u.eventIds === void 0 || u.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (u.playByPlayType !== p.PlayByPlayType.ScoreOverride)
        throw new Error('entry is wrong play type '.concat(u.playByPlayType));
      var o = u.teamScores.get(u.teamId);
      return {
        id: (0, c.uuid4)(),
        code: 'replace',
        deleteIds: u.eventIds.toArray(),
        events: [
          (0, r.makeOverrideScore)({
            teamId: y,
            points: o,
            pbpEntryId: u.id,
            createdAt: u.createdAt,
          }),
        ],
      };
    }
    At.makeReplaceEventToChangeTeamForScoreOverride = s;
    function l(u, y, o) {
      if (u.eventIds === void 0 || u.eventIds.size === 0)
        throw new Error('entry is missing eventId');
      if (u.playByPlayType !== p.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(u.playByPlayType));
      if (u.playCode === void 0) throw new Error('entry is missing playCode');
      var a = (0, r.makePlay)({
          teamId: y,
          playCode: u.playCode,
          pbpEntryId: u.id,
          createdAt: u.createdAt,
        }),
        n;
      return (
        u.playerAssignmentEventId === void 0
          ? (n = u.eventIds.toArray())
          : (n = i.__spreadArray(
              i.__spreadArray([], u.eventIds.toArray(), !0),
              [u.playerAssignmentEventId],
              !1
            )),
        {
          id: (0, c.uuid4)(),
          code: 'replace',
          deleteIds: n,
          events: [
            a,
            (0, r.makeAssignPlayer)({
              playId: a.id,
              playerId: o,
              isEdit: !0,
              createdAt: u.createdAt,
            }),
          ],
        }
      );
    }
    return (At.makeReplaceEventToChangeTeamAndPlayer = l), At;
  }
  var zf;
  function Oa() {
    if (zf) return ma;
    (zf = 1),
      Object.defineProperty(ma, '__esModule', { value: !0 }),
      (ma.MultiSportCompactorController = void 0);
    var i = Q,
      c = dt(),
      r = Hv(),
      p = Sa(),
      v = Nv(),
      h = jv(),
      s = qv(),
      l = Uv(),
      u = mt(),
      y = Se,
      o = (function (a) {
        i.__extends(n, a);
        function n() {
          return (a !== null && a.apply(this, arguments)) || this;
        }
        return (
          (n.prototype.pushBatchAndFetch = function (e) {
            return this.pushBatch(e), this.getLatestScorekeepingState();
          }),
          (n.prototype.pushBatchToScratchAndFetch = function (e) {
            return this.pushBatchToScratch(e), this.getLatestScorekeepingState();
          }),
          (n.prototype.getLatestScorekeepingState = function () {
            var e = this.outputStream(),
              t = e.length > 0 ? e[e.length - 1] : void 0;
            return {
              scorekeepingState: this.latestState().scorekeepingState,
              undoRedoAvailability: this.undoRedoAvailability('main'),
              lastEventId: t === void 0 ? void 0 : t.id,
            };
          }),
          (n.prototype.getMetaEventToChangePlayer = function (e, t) {
            var d = this.playByPlay.currentState.entryForEventId(e);
            if (d !== void 0) {
              var f = d.entry;
              if (f.playerId !== t)
                switch (f.playByPlayType) {
                  case u.PlayByPlayType.Play:
                    return (0, r.makeMetaEventToAssignPlayerToPlay)(f, t);
                  case u.PlayByPlayType.PlayerActivate:
                  case u.PlayByPlayType.PlayerDeactivate:
                    return (0, r.makeReplaceEventToChangePlayerActivation)(f, t);
                  case u.PlayByPlayType.StartPeriod:
                  case u.PlayByPlayType.EndPeriod:
                  case u.PlayByPlayType.ImplicitPlayerActivate:
                  case u.PlayByPlayType.ScoreAdjustment:
                  case u.PlayByPlayType.ScoreOverride:
                  case u.PlayByPlayType.BeginPlay:
                  case u.PlayByPlayType.EndPlay:
                    throw Error(''.concat(f.playByPlayType, ' cannot change player'));
                  default:
                    (0, p.assertUnreachable)(f.playByPlayType);
                }
            }
          }),
          (n.prototype.getDeleteEvent = function (e) {
            var t = this.playByPlay.currentState.entryForEventId(e);
            if (t !== void 0) return (0, v.makeDeleteEvent)(t.entry);
          }),
          (n.prototype.getMetaEventToUnassignPlayer = function (e) {
            var t = this.playByPlay.currentState.entryForEventId(e);
            if (t !== void 0 && t.entry.playerAssignmentEventId !== void 0)
              return (0, r.makeDeleteEventToUnassignPlayer)(t.entry);
          }),
          (n.prototype.getReplaceEventToChangePlay = function (e, t, d) {
            var f = this.playByPlay.currentState.entryForEventId(e);
            if (f !== void 0) {
              var _ = f.entry;
              if (_.playCode === t) {
                if (_.playDetails === void 0 && d === void 0) return;
                if (
                  _.playDetails !== void 0 &&
                  (0, y.isEqual)(Object.fromEntries(_.playDetails), d)
                )
                  return;
              }
              switch (_.playByPlayType) {
                case u.PlayByPlayType.Play:
                  return (0, h.makeReplaceEventToChangePlay)(_, t, d);
                case u.PlayByPlayType.PlayerActivate:
                case u.PlayByPlayType.PlayerDeactivate:
                case u.PlayByPlayType.StartPeriod:
                case u.PlayByPlayType.EndPeriod:
                case u.PlayByPlayType.ImplicitPlayerActivate:
                case u.PlayByPlayType.ScoreAdjustment:
                case u.PlayByPlayType.ScoreOverride:
                case u.PlayByPlayType.BeginPlay:
                case u.PlayByPlayType.EndPlay:
                  throw Error(''.concat(_.playByPlayType, ' cannot change playCode'));
                default:
                  (0, p.assertUnreachable)(_.playByPlayType);
              }
            }
          }),
          (n.prototype.getReplaceEventToChangePlays = function (e, t, d) {
            var f = this.playByPlay.currentState.entryForEventId(e);
            if (f !== void 0) {
              var _ = f.entry;
              switch (_.playByPlayType) {
                case u.PlayByPlayType.Play:
                  return (0, s.makeReplaceEventToChangePlays)(_, t, d);
                case u.PlayByPlayType.PlayerActivate:
                case u.PlayByPlayType.PlayerDeactivate:
                case u.PlayByPlayType.StartPeriod:
                case u.PlayByPlayType.EndPeriod:
                case u.PlayByPlayType.ImplicitPlayerActivate:
                case u.PlayByPlayType.ScoreAdjustment:
                case u.PlayByPlayType.ScoreOverride:
                case u.PlayByPlayType.BeginPlay:
                case u.PlayByPlayType.EndPlay:
                  throw Error(''.concat(_.playByPlayType, ' cannot change playCode'));
                default:
                  (0, p.assertUnreachable)(_.playByPlayType);
              }
            }
          }),
          (n.prototype.getReplaceEventToChangeTeam = function (e, t) {
            var d = this.playByPlay.currentState.entryForEventId(e);
            if (d !== void 0) {
              var f = d.entry;
              if (f.teamId !== t)
                switch (f.playByPlayType) {
                  case u.PlayByPlayType.Play:
                    return (0, l.makeReplaceEventToChangeTeamForPlay)(f, t);
                  case u.PlayByPlayType.ScoreAdjustment:
                    return (0, l.makeReplaceEventToChangeTeamForScoreAdjust)(f, t);
                  case u.PlayByPlayType.ScoreOverride:
                    return (0, l.makeReplaceEventToChangeTeamForScoreOverride)(f, t);
                  case u.PlayByPlayType.PlayerActivate:
                  case u.PlayByPlayType.PlayerDeactivate:
                  case u.PlayByPlayType.StartPeriod:
                  case u.PlayByPlayType.EndPeriod:
                  case u.PlayByPlayType.ImplicitPlayerActivate:
                  case u.PlayByPlayType.BeginPlay:
                  case u.PlayByPlayType.EndPlay:
                    throw Error(''.concat(f.playByPlayType, ' cannot change team'));
                  default:
                    (0, p.assertUnreachable)(f.playByPlayType);
                }
            }
          }),
          (n.prototype.getMetaEventToChangeTeamAndPlayer = function (e, t, d) {
            var f = this.playByPlay.currentState.entryForEventId(e);
            if (f !== void 0) {
              var _ = f.entry;
              if (_.teamId === t) return this.getMetaEventToChangePlayer(e, d);
              switch (_.playByPlayType) {
                case u.PlayByPlayType.Play:
                  return (0, l.makeReplaceEventToChangeTeamAndPlayer)(_, t, d);
                case u.PlayByPlayType.ScoreAdjustment:
                case u.PlayByPlayType.ScoreOverride:
                case u.PlayByPlayType.PlayerActivate:
                case u.PlayByPlayType.PlayerDeactivate:
                case u.PlayByPlayType.StartPeriod:
                case u.PlayByPlayType.EndPeriod:
                case u.PlayByPlayType.ImplicitPlayerActivate:
                case u.PlayByPlayType.BeginPlay:
                case u.PlayByPlayType.EndPlay:
                  throw Error(''.concat(_.playByPlayType, ' cannot change team'));
                default:
                  (0, p.assertUnreachable)(_.playByPlayType);
              }
            }
          }),
          n
        );
      })(c.CompactorController);
    return (ma.MultiSportCompactorController = o), ma;
  }
  var zt = {},
    Vf;
  function Aa() {
    if (Vf) return zt;
    (Vf = 1),
      Object.defineProperty(zt, '__esModule', { value: !0 }),
      (zt.pushInLinescore = zt.LinescoreEngine = zt.LinescoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = we(),
      h = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'lineScores', {
            get: function () {
              return this.lineScoresImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'lineScoresImmutable', {
            get: function () {
              return this.get('lineScores');
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(p.ImmutableState);
    zt.LinescoreState = h;
    var s = (function (y) {
      i.__extends(o, y);
      function o(a, n, e, t) {
        var d = y.call(this, a) || this;
        return (d.baseEvents = a), (d.period = n), (d.score = e), (d.confirguration = t), d;
      }
      return (
        (o.prototype.initialState = function () {
          return new h(c.fromJS({ lineScores: {} }));
        }),
        (o.prototype.processOneEvent = function (a, n) {
          var e = this;
          switch (n.code) {
            case v.MultiSportEventCode.SetTeams:
              return this.handleSetTeams(a, n);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(a, n, this.confirguration.play_codes, function (t, d) {
                return e.update(t);
              });
            case v.MultiSportEventCode.AdjustScore:
            case v.MultiSportEventCode.OverrideScore:
              return this.update(a);
            default:
              return a;
          }
        }),
        (o.prototype.handleSetTeams = function (a, n) {
          return a
            .setIn(['lineScores', n.attributes.homeId], c.List.of(0))
            .setIn(['lineScores', n.attributes.awayId], c.List.of(0));
        }),
        (o.prototype.update = function (a) {
          var n = this.period.stateAfterEvent(this.nextEventOffset),
            e = n.period - (n.isActive ? 0 : 1),
            t = this.score.stateAfterEvent(this.nextEventOffset),
            d = t.awayId,
            f = t.homeId,
            _ = t.scores,
            S = _[f],
            P = _[d],
            I = S - u(a.lineScores[f], e),
            b = P - u(a.lineScores[d], e);
          return a.updateIn(['lineScores', f], l(e, I)).updateIn(['lineScores', d], l(e, b));
        }),
        o
      );
    })(r.VersionedStateEngine);
    zt.LinescoreEngine = s;
    function l(y, o) {
      return function (a) {
        return a.set(y - 1, o).map(function (n) {
          return n || 0;
        });
      };
    }
    zt.pushInLinescore = l;
    function u(y, o) {
      var a = o - 1;
      return a <= 0
        ? 0
        : y.slice(0, a).reduce(function (n, e) {
            return (n ?? 0) + (e ?? 0);
          });
    }
    return zt;
  }
  var Gr = {},
    Kf;
  function Ra() {
    if (Kf) return Gr;
    (Kf = 1),
      Object.defineProperty(Gr, '__esModule', { value: !0 }),
      (Gr.MultiSportActivePlayerEngine = Gr.ActivePlayerState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = we(),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(u.prototype, 'activePlayersImmutable', {
            get: function () {
              return this.get('teams');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.isPlayerActive = function (y, o) {
            var a = this.getIn(['teams', y]);
            return a === void 0 ? !1 : o !== void 0 && a.contains(o);
          }),
          Object.defineProperty(u.prototype, 'activePlayers', {
            get: function () {
              return this.activePlayersImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.activatePlayer = function (y, o) {
            return this.updateIn(['teams', y], function (a) {
              return o === void 0 || a.contains(o) ? a : a.push(o);
            });
          }),
          u
        );
      })(p.ImmutableState);
    Gr.ActivePlayerState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y, o) {
        var a = l.call(this, y) || this;
        return (a.baseEvents = y), (a.configuration = o), a;
      }
      return (
        (u.prototype.initialState = function () {
          return new h(c.fromJS({ teams: {}, teamIdForPlayId: {} }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          var a = this;
          switch (o.code) {
            case v.MultiSportEventCode.SetTeams:
              return this.handleSetTeams(y, o);
            case v.MultiSportEventCode.ActivatePlayer:
              return this.handleActivatePlayer(y, o);
            case v.MultiSportEventCode.DeactivatePlayer:
              return this.handleDeactivatePlayer(y, o);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(y, o, this.configuration.play_codes, function (n, e) {
                return a.handlePlay(n, e);
              });
            case v.MultiSportEventCode.AssignPlayer:
              return this.handleAssignPlayer(y, o);
            default:
              return y;
          }
        }),
        (u.prototype.handleSetTeams = function (y, o) {
          var a = o.attributes.homeId,
            n = o.attributes.awayId;
          return y.setIn(['teams', a], c.List()).setIn(['teams', n], c.List());
        }),
        (u.prototype.handleActivatePlayer = function (y, o) {
          var a = o.attributes.team_id,
            n = o.attributes.player_id;
          return y.activatePlayer(a, n);
        }),
        (u.prototype.handleDeactivatePlayer = function (y, o) {
          var a = o.attributes.team_id,
            n = o.attributes.player_id;
          return y.updateIn(['teams', a], function (e) {
            var t = e.indexOf(n);
            return t >= 0 ? e.delete(t) : e;
          });
        }),
        (u.prototype.handlePlay = function (y, o) {
          var a = o.id,
            n = o.attributes.team_id;
          return y.setIn(['teamIdForPlayId', a], n);
        }),
        (u.prototype.handleAssignPlayer = function (y, o) {
          var a = o.attributes.play_event_id,
            n = o.attributes.player_id,
            e = y.getIn(['teamIdForPlayId', a]);
          return e === void 0 ? y : y.activatePlayer(e, n);
        }),
        u
      );
    })(r.VersionedStateEngine);
    return (Gr.MultiSportActivePlayerEngine = s), Gr;
  }
  var Ao = {},
    Jf;
  function Ro() {
    return (
      Jf ||
        ((Jf = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.FOOTBALL_CONFIGURATION =
              i.TwoPointConversionType =
              i.TouchdownType =
              i.PlayCode =
                void 0);
          var c;
          (function (r) {
            (r.CompletePass = 'complete_pass'),
              (r.ExtraPoint = 'extra_point'),
              (r.FieldGoal = 'field_goal'),
              (r.Fumble = 'fumble'),
              (r.IncompletePass = 'incomplete_pass'),
              (r.Interception = 'interception'),
              (r.Kickoff = 'kickoff'),
              (r.KickoffReturn = 'kickoff_return'),
              (r.Punt = 'punt'),
              (r.PuntReturn = 'punt_return'),
              (r.Run = 'run'),
              (r.Sack = 'sack'),
              (r.Safety = 'safety'),
              (r.Tackle = 'tackle'),
              (r.Touchdown = 'touchdown'),
              (r.Turnover = 'turnover'),
              (r.TwoPointConversion = 'two_point_conversion');
          })((c = i.PlayCode || (i.PlayCode = {}))),
            (function (r) {
              (r.Pass = 'pass'),
                (r.Run = 'run'),
                (r.Defense = 'defense'),
                (r.SpecialTeams = 'special_teams');
            })(i.TouchdownType || (i.TouchdownType = {})),
            (function (r) {
              (r.Pass = 'pass'), (r.Run = 'run');
            })(i.TwoPointConversionType || (i.TwoPointConversionType = {})),
            (i.FOOTBALL_CONFIGURATION = { play_codes: Object.values(c) });
        })(Ao)),
      Ao
    );
  }
  var Hr = {},
    Yf;
  function Fa() {
    if (Yf) return Hr;
    (Yf = 1),
      Object.defineProperty(Hr, '__esModule', { value: !0 }),
      (Hr.MultiSportPeriodEngine = Hr.PeriodState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = we(),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(u.prototype, 'period', {
            get: function () {
              return this.get('period');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'isActive', {
            get: function () {
              return this.get('isActive');
            },
            enumerable: !1,
            configurable: !0,
          }),
          u
        );
      })(p.ImmutableState);
    Hr.PeriodState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y, o) {
        var a = l.call(this, y) || this;
        return (a.baseEvents = y), (a.confirguration = o), a;
      }
      return (
        (u.prototype.initialState = function () {
          return new h(c.fromJS({ period: 1, isActive: !1 }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          var a = this;
          switch (o.code) {
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(y, o, this.confirguration.play_codes, function (n, e) {
                return a.handlePlay(n);
              });
            case v.MultiSportEventCode.EndPeriod:
              return this.handleEndPeriod(y);
            default:
              return y;
          }
        }),
        (u.prototype.handlePlay = function (y) {
          return y.isActive ? y : y.set('isActive', !0);
        }),
        (u.prototype.handleEndPeriod = function (y) {
          return y.isActive
            ? y.increment('period', 1).set('isActive', !1)
            : y.increment('period', 1);
        }),
        u
      );
    })(r.VersionedStateEngine);
    return (Hr.MultiSportPeriodEngine = s), Hr;
  }
  var ka = {},
    Qf;
  function Wv() {
    if (Qf) return ka;
    (Qf = 1),
      Object.defineProperty(ka, '__esModule', { value: !0 }),
      (ka.PlayByPlayEngine = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = mt(),
      p = Ro(),
      v = (function (h) {
        i.__extends(s, h);
        function s() {
          return (h !== null && h.apply(this, arguments)) || this;
        }
        return (
          (s.prototype.handleBeginPlay = function (l, u) {
            var y = new r.PlayByPlayEntry(
              c.fromJS({
                template: 'Begin Play',
                id: 'begin_play',
                playByPlayType: r.PlayByPlayType.BeginPlay,
                eventIds: [u.id],
                playerAssignable: !1,
                teamAssignable: !1,
                deletable: !0,
              })
            );
            return (l = l.pushInProgressEntry(y)), l.setInProgress(!0);
          }),
          (s.prototype.handleEndPlay = function (l, u) {
            var y = l.setInProgress(!1),
              o = y.inProgressEntries;
            if (o.isEmpty()) return y;
            var a = o.reduce(function (e, t) {
                var d = e;
                switch (t == null ? void 0 : t.playCode) {
                  case p.PlayCode.Touchdown:
                    switch (d.playCode) {
                      case p.PlayCode.CompletePass:
                        return t.setIn(['template'], 'Passing Touchdown by '.concat(t.teamId));
                      case p.PlayCode.Run:
                        return t.setIn(['template'], 'Rushing Touchdown by '.concat(t.teamId));
                      case p.PlayCode.Fumble:
                        return t.setIn(
                          ['template'],
                          'Fumble returned for Touchdown by '.concat(t.teamId)
                        );
                      case p.PlayCode.Interception:
                        return t.setIn(
                          ['template'],
                          'Interception returned for Touchdown by '.concat(t.teamId)
                        );
                      case p.PlayCode.KickoffReturn:
                        return t.setIn(
                          ['template'],
                          'Kick Return for Touchdown by '.concat(t.teamId)
                        );
                      case p.PlayCode.PuntReturn:
                        return t.setIn(
                          ['template'],
                          'Punt Return for Touchdown by '.concat(t.teamId)
                        );
                      default:
                        return t;
                    }
                  case p.PlayCode.TwoPointConversion:
                    switch (d.playCode) {
                      case p.PlayCode.CompletePass:
                        return t.setIn(
                          ['template'],
                          'Passing 2-Point Conversion by '.concat(t.teamId)
                        );
                      case p.PlayCode.Run:
                        return t.setIn(
                          ['template'],
                          'Rushing 2-Point Conversion by '.concat(t.teamId)
                        );
                      default:
                        return t;
                    }
                  default:
                    return t;
                }
              }),
              n = [];
            return (
              o.map(function (e) {
                var t, d;
                return n.push.apply(
                  n,
                  (d =
                    (t = e == null ? void 0 : e.eventIds) === null || t === void 0
                      ? void 0
                      : t.toArray()) !== null && d !== void 0
                    ? d
                    : []
                );
              }),
              n.push.apply(n, [u.id]),
              (a = a == null ? void 0 : a.setIn(['eventIds'], c.List(n))),
              (y = y.clearInProgressEntries()),
              y.pushEntry(a)
            );
          }),
          (s.prototype.handlePlay = function (l, u) {
            var y = this.period.stateBeforeEvent(this.nextEventOffset),
              o = l;
            if (y && y.isActive === !1) {
              var a = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'Start of period '.concat(y.period),
                  id: 'start_of_period_'.concat(y.period),
                  playByPlayType: r.PlayByPlayType.StartPeriod,
                  period: y.period,
                  playerAssignable: !1,
                  teamAssignable: !1,
                  deletable: !1,
                  createdAt: u.createdAt,
                })
              );
              o = o.pushEntry(a);
            }
            var n = u.attributes.play_code,
              e;
            if (
              n === p.PlayCode.Touchdown ||
              n === p.PlayCode.FieldGoal ||
              n === p.PlayCode.ExtraPoint ||
              n === p.PlayCode.TwoPointConversion ||
              n === p.PlayCode.Safety
            ) {
              var t = this.score.stateAfterEvent(this.nextEventOffset);
              e = t == null ? void 0 : t.scoresImmutable;
            } else e = void 0;
            var d = new r.PlayByPlayEntry(
              c.fromJS({
                template: ''.concat(u.attributes.play_code, ' by ').concat(u.attributes.team_id),
                id: u.attributes.pbp_entry_id,
                playByPlayType: r.PlayByPlayType.Play,
                eventIds: [u.id],
                playCode: n,
                teamId: u.attributes.team_id,
                teamScores: e,
                playerAssignable: !0,
                teamAssignable: !0,
                deletable: !0,
                createdAt: u.createdAt,
                playDetails: u.attributes.play_details,
              })
            );
            return o.isInProgress ? o.pushInProgressEntry(d) : o.pushEntry(d);
          }),
          s
        );
      })(r.MultiSportPlayByPlayEngine);
    return (ka.PlayByPlayEngine = v), ka;
  }
  var wa = {},
    Nr = {},
    Xf;
  function un() {
    if (Xf) return Nr;
    (Xf = 1),
      Object.defineProperty(Nr, '__esModule', { value: !0 }),
      (Nr.MultiSportScoreEngine = Nr.ScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = we(),
      h = (function (l) {
        i.__extends(u, l);
        function u() {
          return (l !== null && l.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(u.prototype, 'scoresImmutable', {
            get: function () {
              return this.get('scores');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'scores', {
            get: function () {
              return this.scoresImmutable.toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'homeId', {
            get: function () {
              return this.get('homeId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(u.prototype, 'awayId', {
            get: function () {
              return this.get('awayId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          (u.prototype.incrementScore = function (y, o) {
            return this.incrementIn(['scores', y], o);
          }),
          (u.prototype.resetScores = function () {
            var y;
            return this.set(
              'scores',
              c.fromJS(((y = {}), (y[this.homeId] = 0), (y[this.awayId] = 0), y))
            );
          }),
          u
        );
      })(p.ImmutableState);
    Nr.ScoreState = h;
    var s = (function (l) {
      i.__extends(u, l);
      function u(y, o) {
        var a = l.call(this, y) || this;
        return (a.baseEvents = y), (a.configuration = o), a;
      }
      return (
        (u.prototype.initialState = function () {
          return new h(c.fromJS({ scores: {}, homeId: void 0, awayId: void 0 }));
        }),
        (u.prototype.processOneEvent = function (y, o) {
          var a = this;
          switch (o.code) {
            case v.MultiSportEventCode.SetTeams:
              return this.handleSetTeams(y, o);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(y, o, this.configuration.play_codes, function (n, e) {
                return a.handlePlay(n, e);
              });
            case v.MultiSportEventCode.AdjustScore:
              return this.handleAdjustScore(y, o);
            case v.MultiSportEventCode.OverrideScore:
              return this.handleOverrideScore(y, o);
            case v.MultiSportEventCode.EndPeriod:
              return this.handleEndPeriod(y);
            default:
              return y;
          }
        }),
        (u.prototype.handleSetTeams = function (y, o) {
          var a,
            n = o.attributes.homeId,
            e = o.attributes.awayId;
          return y
            .set('homeId', n)
            .set('awayId', e)
            .set('scores', c.fromJS(((a = {}), (a[n] = 0), (a[e] = 0), a)));
        }),
        (u.prototype.handleEndPeriod = function (y) {
          return y;
        }),
        (u.prototype.handleAdjustScore = function (y, o) {
          return y.incrementScore(o.attributes.team_id, o.attributes.adjustment);
        }),
        (u.prototype.handleOverrideScore = function (y, o) {
          return y.setIn(['scores', o.attributes.team_id], o.attributes.points);
        }),
        u
      );
    })(r.VersionedStateEngine);
    return (Nr.MultiSportScoreEngine = s), Nr;
  }
  var Zf;
  function $v() {
    if (Zf) return wa;
    (Zf = 1), Object.defineProperty(wa, '__esModule', { value: !0 }), (wa.ScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = Ro(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.handlePlay = function (s, l) {
            var u = l.attributes.play_code,
              y = l.attributes.team_id;
            switch (u) {
              case r.PlayCode.Touchdown:
                return s.incrementScore(y, 6);
              case r.PlayCode.FieldGoal:
                return s.incrementScore(y, 3);
              case r.PlayCode.Safety:
                return s.incrementScore(y, 2);
              case r.PlayCode.ExtraPoint:
                return s.incrementScore(y, 1);
              case r.PlayCode.TwoPointConversion:
                return s.incrementScore(y, 2);
              default:
                return s;
            }
          }),
          h
        );
      })(c.MultiSportScoreEngine);
    return (wa.ScoreEngine = p), wa;
  }
  var Ca = {},
    Fo = {},
    ep;
  function tp() {
    return (
      ep ||
        ((ep = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.GameSettings = i.getPeriodType = void 0);
          function c(r) {
            var p;
            if (r.hoops)
              return (p = r.hoops) === null || p === void 0 ? void 0 : p.periodType.toString();
          }
          (i.getPeriodType = c),
            (function (r) {
              function p(h) {
                return h
                  ? {
                      hoops: {
                        gameClock: h.get('gameClock'),
                        periodType: h.get('periodType'),
                        periodLength: h.get('periodLength'),
                        teamTimeouts: h.get('teamTimeouts'),
                        timeoutsReset: h.get('timeoutsReset'),
                      },
                    }
                  : r.emptyGameSettingsDoc();
              }
              r.fromHoopsMap = p;
              function v() {
                return { hoops: void 0 };
              }
              r.emptyGameSettingsDoc = v;
            })(i.GameSettings || (i.GameSettings = {}));
        })(Fo)),
      Fo
    );
  }
  var rp;
  function Ma() {
    if (rp) return Ca;
    (rp = 1),
      Object.defineProperty(Ca, '__esModule', { value: !0 }),
      (Ca.SharedStateAccessor = void 0);
    var i = Q,
      c = i.__importStar(dt()),
      r = tp(),
      p = (function (v) {
        i.__extends(h, v);
        function h(s, l) {
          var u = v.call(this, s, l) || this;
          return (u.controller = l), u;
        }
        return (
          Object.defineProperty(h.prototype, 'gameSettingsDoc', {
            get: function () {
              return this.controller.gameSettings
                ? this.get('gameSettingsDoc', this.controller.gameSettings)
                : r.GameSettings.emptyGameSettingsDoc();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'activePlayers', {
            get: function () {
              return this.get('activePlayers', this.controller.activePlayer);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'lineScores', {
            get: function () {
              return this.get('lineScores', this.controller.lineScore);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'stats', {
            get: function () {
              return this.controller.stats ? this.get('stats', this.controller.stats) : {};
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'scores', {
            get: function () {
              return this.get('scores', this.controller.score);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'periodStats', {
            get: function () {
              return this.controller.statsPerPeriod
                ? this.get('periodStats', this.controller.statsPerPeriod)
                : {};
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'allPlayByPlay', {
            get: function () {
              return this.get('allEntries', this.controller.playByPlay);
            },
            enumerable: !1,
            configurable: !0,
          }),
          (h.prototype.getCurrentGameSituation = function () {
            return {
              activePlayers: this.activePlayers,
              lineScores: this.lineScores,
              scores: this.scores,
              period: this.get('period', this.controller.period),
              periodType: (0, r.getPeriodType)(this.gameSettingsDoc),
              periodIsActive: this.get('isActive', this.controller.period),
            };
          }),
          Object.defineProperty(h.prototype, 'currentGameSituation', {
            get: function () {
              return this.getCurrentGameSituation();
            },
            enumerable: !1,
            configurable: !0,
          }),
          (h.prototype.getScorekeepingState = function () {
            return {
              gameSituation: this.currentGameSituation,
              homeTeamId: this.get('homeId', this.controller.score),
              awayTeamId: this.get('awayId', this.controller.score),
            };
          }),
          Object.defineProperty(h.prototype, 'scorekeepingState', {
            get: function () {
              return this.getScorekeepingState();
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(h.prototype, 'announcements', {
            get: function () {
              var s = {
                scores: this.scores,
                homeTeamId: this.get('homeId', this.controller.score),
                awayTeamId: this.get('awayId', this.controller.score),
                period: this.get('period', this.controller.period),
              };
              return this.controller.announcements(s);
            },
            enumerable: !1,
            configurable: !0,
          }),
          h
        );
      })(c.EngineStateAccessor);
    return (Ca.SharedStateAccessor = p), Ca;
  }
  var np;
  function zv() {
    if (np) return Ia;
    (np = 1),
      Object.defineProperty(Ia, '__esModule', { value: !0 }),
      (Ia.FootballCompactorController = void 0);
    var i = Q,
      c = Tr(),
      r = Oa(),
      p = Aa(),
      v = Ra(),
      h = Ro(),
      s = Fa(),
      l = Wv(),
      u = $v(),
      y = Ma(),
      o = (function (a) {
        i.__extends(n, a);
        function n() {
          var e = a.call(this) || this;
          (e.stateAccessorClass = y.SharedStateAccessor),
            (e.activePlayer = new v.MultiSportActivePlayerEngine([], h.FOOTBALL_CONFIGURATION)),
            (e.period = new s.MultiSportPeriodEngine([], h.FOOTBALL_CONFIGURATION)),
            (e.score = new u.ScoreEngine([], h.FOOTBALL_CONFIGURATION)),
            (e.playByPlay = new l.PlayByPlayEngine(
              [],
              h.FOOTBALL_CONFIGURATION,
              e.activePlayer,
              e.period,
              e.score
            )),
            (e.lineScore = new p.LinescoreEngine([], e.period, e.score, h.FOOTBALL_CONFIGURATION)),
            (e.engines = [e.activePlayer, e.period, e.score, e.playByPlay, e.lineScore]),
            (e.compactor = new c.SabertoothEventCompactor());
          for (var t = 0, d = e.engines; t < d.length; t++) {
            var f = d[t];
            f.baseEvents = e.compactor.outStream;
          }
          return e;
        }
        return (
          (n.prototype.getDerivedMultiGameStatsWithBaseStats = function (e) {
            return {};
          }),
          (n.prototype.processVoiceEvents = function (e, t) {
            throw new Error('Voice Scoring not supported by this sport');
          }),
          (n.prototype.announcements = function (e) {
            throw new Error('Announcements not supported by this sport');
          }),
          n
        );
      })(r.MultiSportCompactorController);
    return (Ia.FootballCompactorController = o), Ia;
  }
  var xa = {},
    jr = {},
    qr = {},
    ap;
  function Di() {
    if (ap) return qr;
    (ap = 1),
      Object.defineProperty(qr, '__esModule', { value: !0 }),
      (qr.MultiSportBoxScoreEngine = qr.MultiSportBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(Ie()),
      r = i.__importStar(be()),
      p = (function (h) {
        i.__extends(s, h);
        function s() {
          return (h !== null && h.apply(this, arguments)) || this;
        }
        return s;
      })(r.ImmutableState);
    qr.MultiSportBoxScoreState = p;
    var v = (function (h) {
      i.__extends(s, h);
      function s(l, u, y) {
        var o = h.call(this, l) || this;
        return (o.baseEvents = l), (o.score = u), (o.activePlayerEngine = y), o;
      }
      return s;
    })(c.VersionedStateEngine);
    return (qr.MultiSportBoxScoreEngine = v), qr;
  }
  var ko = {},
    wo = {},
    ip;
  function La() {
    return (
      ip ||
        ((ip = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.GOAL_SPORT_CONFIGURATION = i.PlayCode = void 0);
          var c;
          (function (r) {
            (r.Goal = 'goal'),
              (r.MissedShot = 'missed_shot'),
              (r.Assist = 'assist'),
              (r.Save = 'save');
          })((c = i.PlayCode || (i.PlayCode = {}))),
            (i.GOAL_SPORT_CONFIGURATION = { play_codes: Object.values(c) });
        })(wo)),
      wo
    );
  }
  var sp;
  function Co() {
    return (
      sp ||
        ((sp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.TeamPlayerStats = i.Stats = i.GoalStat = void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = He(),
            v = we(),
            h = c.__importStar(Sa()),
            s = La(),
            l;
          (function (e) {
            (e.G = 'G'),
              (e.A = 'A'),
              (e.SH = 'SH'),
              (e.SHPT = 'SH%'),
              (e.SV = 'SV'),
              (e.GP = 'GP'),
              (e.PTS = 'PTS'),
              (e.PTS2 = 'PTS2');
          })((l = i.GoalStat || (i.GoalStat = {})));
          var u;
          (function (e) {
            function t() {
              return Object.values(l);
            }
            e.values = t;
            function d() {
              return y(
                e.values().reduce(function (b, E) {
                  return b.set(E, 0);
                }, r.Map())
              );
            }
            e.empty = d;
            function f(b, E) {
              if ((0, v.isValidPlayCode)(E, s.GOAL_SPORT_CONFIGURATION.play_codes))
                return P(!0, b, E);
              h.unreachablePlayCode(E);
            }
            e.addPlay = f;
            function _(b, E) {
              if ((0, v.isValidPlayCode)(E, s.GOAL_SPORT_CONFIGURATION.play_codes))
                return P(!1, b, E);
              h.unreachablePlayCode(E);
            }
            e.removePlay = _;
            function S(b) {
              switch (b) {
                case l.G:
                case l.A:
                case l.PTS:
                case l.PTS2:
                case l.SH:
                case l.SHPT:
                case l.SV:
                case l.GP:
                  return;
                default:
                  return;
              }
            }
            e.averageKey = S;
            function P(b, E, T) {
              return y(
                (function () {
                  switch (T) {
                    case s.PlayCode.Goal:
                      return I(b, E, l.G, l.SH);
                    case s.PlayCode.Assist:
                      return I(b, E, l.A);
                    case s.PlayCode.MissedShot:
                      return I(b, E, l.SH);
                    case s.PlayCode.Save:
                      return I(b, E, l.SV);
                    default:
                      h.unreachablePlayCode(T);
                  }
                })()
              );
            }
            function I(b, E) {
              for (var T = [], F = 2; F < arguments.length; F++) T[F - 2] = arguments[F];
              return T.reduce(function (R, L) {
                return R.updateIn([L], 0, function (x) {
                  return b ? ++x : --x;
                });
              }, E);
            }
          })((u = i.Stats || (i.Stats = {}))),
            (function (e) {
              function t(R) {
                var L = Object.entries(R).reduce(function (N, M) {
                    var J = M[0],
                      D = M[1];
                    return N.setIn([J], D.stats.offense[l.PTS]).setIn([J], D.stats.offense[l.PTS2]);
                  }, r.Map.of()),
                  x = e.fromTeamsStatDoc(R, !1);
                return e.toTeamsStatDoc(x, L);
              }
              e.getDerivedMultiGameStatsWithBaseStats = t;
              function d(R) {
                return R.toJS().reduce(function (L, x) {
                  var N = r.Map().set(p.TOTAL, u.empty()).set(p.UNASSIGNED_PLAYER, u.empty());
                  return L.set(x, N);
                }, r.Map());
              }
              e.fromTeams = d;
              function f(R, L) {
                return L.reduce(function (x, N, M) {
                  var J = R.getIn([M, p.TOTAL, l.PTS]),
                    D = R.getIn([M, p.UNASSIGNED_PLAYER, l.PTS]),
                    $ = R.getIn([M, p.TOTAL, l.PTS2]),
                    z = R.getIn([M, p.UNASSIGNED_PLAYER, l.PTS2]),
                    q = R.setIn([M, p.TOTAL, l.PTS], J)
                      .setIn([M, p.UNASSIGNED_PLAYER, l.PTS], D)
                      .setIn([M, p.TOTAL, l.PTS2], $)
                      .setIn([M, p.UNASSIGNED_PLAYER, l.PTS2], z);
                  return (x[M] = E(q.get(M))), x;
                }, {});
              }
              e.toTeamsStatDoc = f;
              function _(R, L) {
                return Object.entries(R).reduce(function (x, N) {
                  var M = N[0],
                    J = N[1],
                    D = J.stats,
                    $ = J.unassigned,
                    z = J.players,
                    q = Object.entries(z)
                      .reduce(function (V, U) {
                        var j = U[0],
                          re = U[1];
                        return V.setIn([M, j], b(re.stats, !!L));
                      }, x)
                      .setIn([M, p.TOTAL], b(D, !!L));
                  return $ ? q.setIn([M, p.UNASSIGNED_PLAYER], b($.stats, !1)) : q;
                }, r.fromJS({}));
              }
              e.fromTeamsStatDoc = _;
              function S(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], P(R.get(M), L.get(M)));
                }, r.Map());
              }
              e.subtract = S;
              function P(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], I(R.get(M), L.get(M, u.empty())));
                }, r.Map());
              }
              function I(R, L) {
                return n(
                  R.reduce(function (x, N, M) {
                    return x.setIn([M], R.get(M) - L.get(M, 0));
                  }, u.empty()),
                  void 0
                );
              }
              function b(R, L) {
                return n(r.fromJS(R.offense), L);
              }
              function E(R) {
                return R.reduce(
                  function (L, x, N) {
                    switch (N) {
                      case p.TOTAL:
                      case p.UNASSIGNED_PLAYER:
                        return L;
                      default:
                        return (L.players[N] = T(x)), L;
                    }
                  },
                  {
                    players: {},
                    unassigned: T(R.get(p.UNASSIGNED_PLAYER)),
                    stats: F(R.get(p.TOTAL)),
                  }
                );
              }
              function T(R) {
                return { stats: F(R) };
              }
              function F(R) {
                return { offense: R.toJS() };
              }
            })(i.TeamPlayerStats || (i.TeamPlayerStats = {}));
          function y(e) {
            return o(e, a, n);
          }
          function o(e) {
            for (var t = [], d = 1; d < arguments.length; d++) t[d - 1] = arguments[d];
            return t.reduce(function (f, _) {
              return _(f);
            }, e);
          }
          function a(e) {
            var t = function (_) {
                return e.get(_, 0);
              },
              d = t(l.G) + t(l.A),
              f = t(l.G) * 2 + t(l.A);
            return e.setIn([l.PTS], d).setIn([l.PTS2], f);
          }
          function n(e, t) {
            var d = function (S) {
                return e.get(S, 0);
              },
              f = function (S, P) {
                return d(S) / d(P);
              },
              _ = e.setIn([l.SHPT], f(l.G, l.SH));
            return (
              (_ = o(_)),
              t
                ? u.values().reduce(function (S, P) {
                    var I = u.averageKey(P);
                    return I ? S.setIn([I], f(P, l.GP)) : S;
                  }, _)
                : _
            );
          }
        })(ko)),
      ko
    );
  }
  var op;
  function Vv() {
    if (op) return jr;
    (op = 1),
      Object.defineProperty(jr, '__esModule', { value: !0 }),
      (jr.BoxScoreEngine = jr.BoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = Di(),
      v = we(),
      h = Co(),
      s = La(),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'stats', {
            get: function () {
              return h.TeamPlayerStats.toTeamsStatDoc(this.teamPlayerStats, this.teamPoints);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPoints', {
            get: function () {
              return this.get('teamPoints');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPlayerStats', {
            get: function () {
              return this.get('stats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(p.MultiSportBoxScoreState);
    jr.BoxScoreState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n, e) {
        var t = y.call(this, a, n, e) || this;
        return (t.baseEvents = a), (t.score = n), (t.activePlayerEngine = e), t;
      }
      return (
        (o.prototype.initialState = function () {
          return new l(
            c.fromJS({
              teams: [],
              teamPoints: {},
              playForPlayer: {},
              startedPlayerCount: 0,
              stats: c.Map(),
            })
          );
        }),
        (o.prototype.processOneEvent = function (a, n) {
          var e = this;
          switch (n.code) {
            case v.MultiSportEventCode.SetTeams:
              return o.handleSetTeams(a, n);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(
                a,
                n,
                s.GOAL_SPORT_CONFIGURATION.play_codes,
                function (t, d) {
                  return e.handlePlay(t, d);
                }
              );
            case v.MultiSportEventCode.AssignPlayer:
              return this.handleAssignPlayer(a, n);
            case v.MultiSportEventCode.AdjustScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.OverrideScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.ActivatePlayer:
              return o.handleActivatePlayer(a, n);
            default:
              return a;
          }
        }),
        (o.handleSetTeams = function (a, n) {
          var e = n.attributes,
            t = e.homeId,
            d = e.awayId;
          return a
            .setIn(['teamPoints', t], 0)
            .setIn(['teamPoints', d], 0)
            .setIn(['teams'], c.List.of(t, d))
            .setIn(['stats'], h.TeamPlayerStats.fromTeams(c.List.of(t, d)))
            .updateIn(['stats', t, r.TOTAL], h.Stats.empty(), function (f) {
              return f.setIn([h.GoalStat.GP], 1);
            })
            .updateIn(['stats', d, r.TOTAL], h.Stats.empty(), function (f) {
              return f.setIn([h.GoalStat.GP], 1);
            });
        }),
        (o.prototype.handleScoreChange = function (a, n) {
          var e = n.attributes.team_id,
            t = this.score.stateAfterEvent(this.nextEventOffset).scores[e];
          return a.setIn(['teamPoints', e], t);
        }),
        (o.handleActivatePlayer = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.player_id;
          return o.markPlayerSeen(d, t, a);
        }),
        (o.prototype.determineEventPlayValue = function (a) {
          switch (a.code) {
            case v.MultiSportEventCode.Play:
              var n = a.attributes.play_code;
              switch (n) {
                case s.PlayCode.Goal:
                  return 1;
                default:
                  return 0;
              }
            case v.MultiSportEventCode.AdjustScore:
              return a.attributes.adjustment;
            case v.MultiSportEventCode.OverrideScore:
              return a.attributes.points;
            default:
              return 0;
          }
        }),
        (o.prototype.handlePlay = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.play_code;
          return this.handleScoreChange(
            a
              .updateIn(['stats', t, r.UNASSIGNED_PLAYER], h.Stats.empty(), function (f) {
                return h.Stats.addPlay(f, d);
              })
              .updateIn(['stats', t, r.TOTAL], h.Stats.empty(), function (f) {
                return h.Stats.addPlay(f, d);
              }),
            n
          );
        }),
        (o.prototype.handleAssignPlayer = function (a, n) {
          var e = n.attributes,
            t = e.play_event_id,
            d = e.player_id,
            f = this.baseEvents,
            _ = a.getIn(['playForPlayer', t], r.UNASSIGNED_PLAYER),
            S =
              f[this.indexForEventId(t)] ||
              f.slice(this.nextEventOffset).find(function (E) {
                return E.id === t;
              }),
            P = S.attributes,
            I = P.team_id,
            b = P.play_code;
          return (0, v.onValidPlayCode)(a, S, s.GOAL_SPORT_CONFIGURATION.play_codes, function () {
            return o.markPlayerSeen(
              d,
              I,
              a
                .setIn(['playForPlayer', t], d)
                .updateIn(['stats', I, d], h.Stats.empty(), function (E) {
                  return h.Stats.addPlay(E, b);
                })
                .updateIn(['stats', I, _], h.Stats.empty(), function (E) {
                  return h.Stats.removePlay(E, b);
                })
            );
          });
        }),
        (o.markPlayerSeen = function (a, n, e) {
          var t = ['stats', n, a];
          return e.updateIn(t, h.Stats.empty(), function (d) {
            return d.setIn([h.GoalStat.GP], 1);
          });
        }),
        o
      );
    })(p.MultiSportBoxScoreEngine);
    return (jr.BoxScoreEngine = u), jr;
  }
  var Ur = {},
    Wr = {},
    up;
  function Gi() {
    if (up) return Wr;
    (up = 1),
      Object.defineProperty(Wr, '__esModule', { value: !0 }),
      (Wr.MultiSportPerPeriodBoxScoreEngine = Wr.MultiSportPeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(Ie()),
      r = i.__importStar(be()),
      p = (function (h) {
        i.__extends(s, h);
        function s() {
          return (h !== null && h.apply(this, arguments)) || this;
        }
        return s;
      })(r.ImmutableState);
    Wr.MultiSportPeriodBoxScoreState = p;
    var v = (function (h) {
      i.__extends(s, h);
      function s(l, u, y) {
        var o = h.call(this, l) || this;
        return (o.baseEvents = l), (o.period = u), (o.stats = y), o;
      }
      return s;
    })(c.VersionedStateEngine);
    return (Wr.MultiSportPerPeriodBoxScoreEngine = v), Wr;
  }
  var lp;
  function Kv() {
    if (lp) return Ur;
    (lp = 1),
      Object.defineProperty(Ur, '__esModule', { value: !0 }),
      (Ur.PerPeriodBoxScoreEngine = Ur.PeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = Co(),
      v = Gi(),
      h = we(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'periodStats', {
            get: function () {
              var o = this.get('statsPerPeriod');
              return o.reduce(function (a, n, e) {
                var t = n.reduce(function (d, f, _) {
                  return d.setIn([_], f.getIn([r.TOTAL, p.GoalStat.PTS]));
                }, c.Map());
                return (a[e] = p.TeamPlayerStats.toTeamsStatDoc(n, t)), a;
              }, {});
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'lineScores', {
            get: function () {
              return Object.entries(this.periodStats)
                .reduce(function (o, a) {
                  var n = a[0],
                    e = a[1],
                    t = parseInt(n, 10),
                    d = Object.entries(e).reduce(function (f, _) {
                      var S = _[0],
                        P = _[1];
                      return (f[S] = P.stats.offense[p.GoalStat.PTS]), f;
                    }, {});
                  return Object.entries(d).reduce(function (f, _) {
                    var S = _[0],
                      P = _[1],
                      I = f.getIn([S], c.List());
                    return (I = I.insert(t, P)), f.setIn([S], I);
                  }, o);
                }, c.Map())
                .toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(v.MultiSportPeriodBoxScoreState);
    Ur.PeriodBoxScoreState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o, a, n) {
        var e = u.call(this, o, a, n) || this;
        return (e.baseEvents = o), (e.period = a), (e.stats = n), e;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ statsPerPeriod: c.Map() }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          switch (a.code) {
            case h.MultiSportEventCode.Play:
            case h.MultiSportEventCode.SetTeams:
            case h.MultiSportEventCode.AssignPlayer:
            case h.MultiSportEventCode.AdjustScore:
            case h.MultiSportEventCode.OverrideScore:
              return this.handleStatsChange(o);
            default:
              return o;
          }
        }),
        (y.prototype.handleStatsChange = function (o) {
          var a;
          if (this.stats) {
            var n = this.stats.stateAfterEvent(this.nextEventOffset),
              e = p.TeamPlayerStats.fromTeamsStatDoc(n.stats),
              t = this.period.stateAfterEvent(this.nextEventOffset),
              d = Math.max(1, t.period - (t.isActive ? 0 : 1)),
              f = (a = c.List).of.apply(a, e.keySeq().toArray()),
              _ = function (b) {
                return o.getIn(['statsPerPeriod', b], P);
              },
              S = Array.from({ length: d }, function (b, E) {
                return ++E;
              }),
              P = p.TeamPlayerStats.fromTeams(f),
              I =
                d === 1
                  ? e
                  : S.slice(0, -1).reduce(function (b, E) {
                      return p.TeamPlayerStats.subtract(b, _(E));
                    }, e);
            return S.reduce(function (b, E) {
              return b.updateIn(['statsPerPeriod', E], function (T) {
                return E === d ? I : T || P;
              });
            }, o);
          } else return o;
        }),
        y
      );
    })(v.MultiSportPerPeriodBoxScoreEngine);
    return (Ur.PerPeriodBoxScoreEngine = l), Ur;
  }
  var Da = {},
    cp;
  function Jv() {
    if (cp) return Da;
    (cp = 1),
      Object.defineProperty(Da, '__esModule', { value: !0 }),
      (Da.PlayByPlayEngine = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = mt(),
      p = La(),
      v = (function (h) {
        i.__extends(s, h);
        function s() {
          return (h !== null && h.apply(this, arguments)) || this;
        }
        return (
          (s.prototype.handlePlay = function (l, u) {
            var y = this.period.stateBeforeEvent(this.nextEventOffset),
              o = l;
            if (y && y.isActive === !1) {
              var a = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'Start of period '.concat(y.period),
                  id: 'start_of_period_'.concat(y.period),
                  playByPlayType: r.PlayByPlayType.StartPeriod,
                  period: y.period,
                  playerAssignable: !1,
                  teamAssignable: !1,
                  deletable: !1,
                  createdAt: u.createdAt,
                })
              );
              o = o.pushEntry(a);
            }
            var n = u.attributes.play_code,
              e;
            if (n === p.PlayCode.Goal) {
              var t = this.score.stateAfterEvent(this.nextEventOffset);
              e = t == null ? void 0 : t.scoresImmutable;
            } else e = void 0;
            var d = new r.PlayByPlayEntry(
              c.fromJS({
                template: ''.concat(u.attributes.play_code, ' by ').concat(u.attributes.team_id),
                id: u.attributes.pbp_entry_id,
                playByPlayType: r.PlayByPlayType.Play,
                eventIds: [u.id],
                playCode: n,
                teamId: u.attributes.team_id,
                teamScores: e,
                playerAssignable: !0,
                teamAssignable: !0,
                deletable: !0,
                createdAt: u.createdAt,
              })
            );
            return o.pushEntry(d);
          }),
          s
        );
      })(r.MultiSportPlayByPlayEngine);
    return (Da.PlayByPlayEngine = v), Da;
  }
  var Ga = {},
    dp;
  function Yv() {
    if (dp) return Ga;
    (dp = 1), Object.defineProperty(Ga, '__esModule', { value: !0 }), (Ga.ScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = La(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.handlePlay = function (s, l) {
            var u = l.attributes.play_code,
              y = l.attributes.team_id;
            switch (u) {
              case r.PlayCode.Goal:
                return s.incrementScore(y, 1);
              default:
                return s;
            }
          }),
          h
        );
      })(c.MultiSportScoreEngine);
    return (Ga.ScoreEngine = p), Ga;
  }
  var fp;
  function Qv() {
    if (fp) return xa;
    (fp = 1),
      Object.defineProperty(xa, '__esModule', { value: !0 }),
      (xa.GoalSportCompactorController = void 0);
    var i = Q,
      c = Tr(),
      r = Oa(),
      p = Aa(),
      v = Ra(),
      h = Vv(),
      s = La(),
      l = Fa(),
      u = Kv(),
      y = Jv(),
      o = Yv(),
      a = Co(),
      n = Ma(),
      e = (function (t) {
        i.__extends(d, t);
        function d() {
          var f = t.call(this) || this;
          (f.stateAccessorClass = n.SharedStateAccessor),
            (f.activePlayer = new v.MultiSportActivePlayerEngine([], s.GOAL_SPORT_CONFIGURATION)),
            (f.period = new l.MultiSportPeriodEngine([], s.GOAL_SPORT_CONFIGURATION)),
            (f.score = new o.ScoreEngine([], s.GOAL_SPORT_CONFIGURATION)),
            (f.stats = new h.BoxScoreEngine([], f.score, f.activePlayer)),
            (f.playByPlay = new y.PlayByPlayEngine(
              [],
              s.GOAL_SPORT_CONFIGURATION,
              f.activePlayer,
              f.period,
              f.score,
              f.stats
            )),
            (f.lineScore = new p.LinescoreEngine(
              [],
              f.period,
              f.score,
              s.GOAL_SPORT_CONFIGURATION
            )),
            (f.statsPerPeriod = new u.PerPeriodBoxScoreEngine([], f.period, f.stats)),
            (f.engines = [
              f.activePlayer,
              f.period,
              f.score,
              f.playByPlay,
              f.lineScore,
              f.statsPerPeriod,
              f.stats,
            ]),
            (f.compactor = new c.SabertoothEventCompactor());
          for (var _ = 0, S = f.engines; _ < S.length; _++) {
            var P = S[_];
            P.baseEvents = f.compactor.outStream;
          }
          return f;
        }
        return (
          (d.prototype.getDerivedMultiGameStatsWithBaseStats = function (f) {
            return a.TeamPlayerStats.getDerivedMultiGameStatsWithBaseStats(f);
          }),
          (d.prototype.processVoiceEvents = function (f, _) {
            throw new Error('Voice Scoring not supported by this sport');
          }),
          (d.prototype.announcements = function (f) {
            throw new Error('Announcements not supported by this sport');
          }),
          d
        );
      })(r.MultiSportCompactorController);
    return (xa.GoalSportCompactorController = e), xa;
  }
  var Ha = {},
    Mo = {};
  let Hi;
  const Xv = new Uint8Array(16);
  function pp() {
    if (
      !Hi &&
      ((Hi = typeof crypto < 'u' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)),
      !Hi)
    )
      throw new Error(
        'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported'
      );
    return Hi(Xv);
  }
  var Zv =
    /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  function Ni(i) {
    return typeof i == 'string' && Zv.test(i);
  }
  const $e = [];
  for (let i = 0; i < 256; ++i) $e.push((i + 256).toString(16).slice(1));
  function ji(i, c = 0) {
    return (
      $e[i[c + 0]] +
      $e[i[c + 1]] +
      $e[i[c + 2]] +
      $e[i[c + 3]] +
      '-' +
      $e[i[c + 4]] +
      $e[i[c + 5]] +
      '-' +
      $e[i[c + 6]] +
      $e[i[c + 7]] +
      '-' +
      $e[i[c + 8]] +
      $e[i[c + 9]] +
      '-' +
      $e[i[c + 10]] +
      $e[i[c + 11]] +
      $e[i[c + 12]] +
      $e[i[c + 13]] +
      $e[i[c + 14]] +
      $e[i[c + 15]]
    );
  }
  function eg(i, c = 0) {
    const r = ji(i, c);
    if (!Ni(r)) throw TypeError('Stringified UUID is invalid');
    return r;
  }
  let hp,
    xo,
    Lo = 0,
    Do = 0;
  function tg(i, c, r) {
    let p = (c && r) || 0;
    const v = c || new Array(16);
    i = i || {};
    let h = i.node || hp,
      s = i.clockseq !== void 0 ? i.clockseq : xo;
    if (h == null || s == null) {
      const n = i.random || (i.rng || pp)();
      h == null && (h = hp = [n[0] | 1, n[1], n[2], n[3], n[4], n[5]]),
        s == null && (s = xo = ((n[6] << 8) | n[7]) & 16383);
    }
    let l = i.msecs !== void 0 ? i.msecs : Date.now(),
      u = i.nsecs !== void 0 ? i.nsecs : Do + 1;
    const y = l - Lo + (u - Do) / 1e4;
    if (
      (y < 0 && i.clockseq === void 0 && (s = (s + 1) & 16383),
      (y < 0 || l > Lo) && i.nsecs === void 0 && (u = 0),
      u >= 1e4)
    )
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    (Lo = l), (Do = u), (xo = s), (l += 122192928e5);
    const o = ((l & 268435455) * 1e4 + u) % 4294967296;
    (v[p++] = (o >>> 24) & 255),
      (v[p++] = (o >>> 16) & 255),
      (v[p++] = (o >>> 8) & 255),
      (v[p++] = o & 255);
    const a = ((l / 4294967296) * 1e4) & 268435455;
    (v[p++] = (a >>> 8) & 255),
      (v[p++] = a & 255),
      (v[p++] = ((a >>> 24) & 15) | 16),
      (v[p++] = (a >>> 16) & 255),
      (v[p++] = (s >>> 8) | 128),
      (v[p++] = s & 255);
    for (let n = 0; n < 6; ++n) v[p + n] = h[n];
    return c || ji(v);
  }
  function yp(i) {
    if (!Ni(i)) throw TypeError('Invalid UUID');
    let c;
    const r = new Uint8Array(16);
    return (
      (r[0] = (c = parseInt(i.slice(0, 8), 16)) >>> 24),
      (r[1] = (c >>> 16) & 255),
      (r[2] = (c >>> 8) & 255),
      (r[3] = c & 255),
      (r[4] = (c = parseInt(i.slice(9, 13), 16)) >>> 8),
      (r[5] = c & 255),
      (r[6] = (c = parseInt(i.slice(14, 18), 16)) >>> 8),
      (r[7] = c & 255),
      (r[8] = (c = parseInt(i.slice(19, 23), 16)) >>> 8),
      (r[9] = c & 255),
      (r[10] = ((c = parseInt(i.slice(24, 36), 16)) / 1099511627776) & 255),
      (r[11] = (c / 4294967296) & 255),
      (r[12] = (c >>> 24) & 255),
      (r[13] = (c >>> 16) & 255),
      (r[14] = (c >>> 8) & 255),
      (r[15] = c & 255),
      r
    );
  }
  function rg(i) {
    i = unescape(encodeURIComponent(i));
    const c = [];
    for (let r = 0; r < i.length; ++r) c.push(i.charCodeAt(r));
    return c;
  }
  const ng = '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
    ag = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  function vp(i, c, r) {
    function p(v, h, s, l) {
      var u;
      if (
        (typeof v == 'string' && (v = rg(v)),
        typeof h == 'string' && (h = yp(h)),
        ((u = h) === null || u === void 0 ? void 0 : u.length) !== 16)
      )
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
      let y = new Uint8Array(16 + v.length);
      if (
        (y.set(h),
        y.set(v, h.length),
        (y = r(y)),
        (y[6] = (y[6] & 15) | c),
        (y[8] = (y[8] & 63) | 128),
        s)
      ) {
        l = l || 0;
        for (let o = 0; o < 16; ++o) s[l + o] = y[o];
        return s;
      }
      return ji(y);
    }
    try {
      p.name = i;
    } catch {}
    return (p.DNS = ng), (p.URL = ag), p;
  }
  function ig(i) {
    if (typeof i == 'string') {
      const c = unescape(encodeURIComponent(i));
      i = new Uint8Array(c.length);
      for (let r = 0; r < c.length; ++r) i[r] = c.charCodeAt(r);
    }
    return sg(og(ug(i), i.length * 8));
  }
  function sg(i) {
    const c = [],
      r = i.length * 32,
      p = '0123456789abcdef';
    for (let v = 0; v < r; v += 8) {
      const h = (i[v >> 5] >>> v % 32) & 255,
        s = parseInt(p.charAt((h >>> 4) & 15) + p.charAt(h & 15), 16);
      c.push(s);
    }
    return c;
  }
  function gp(i) {
    return (((i + 64) >>> 9) << 4) + 14 + 1;
  }
  function og(i, c) {
    (i[c >> 5] |= 128 << c % 32), (i[gp(c) - 1] = c);
    let r = 1732584193,
      p = -271733879,
      v = -1732584194,
      h = 271733878;
    for (let s = 0; s < i.length; s += 16) {
      const l = r,
        u = p,
        y = v,
        o = h;
      (r = Ye(r, p, v, h, i[s], 7, -680876936)),
        (h = Ye(h, r, p, v, i[s + 1], 12, -389564586)),
        (v = Ye(v, h, r, p, i[s + 2], 17, 606105819)),
        (p = Ye(p, v, h, r, i[s + 3], 22, -1044525330)),
        (r = Ye(r, p, v, h, i[s + 4], 7, -176418897)),
        (h = Ye(h, r, p, v, i[s + 5], 12, 1200080426)),
        (v = Ye(v, h, r, p, i[s + 6], 17, -1473231341)),
        (p = Ye(p, v, h, r, i[s + 7], 22, -45705983)),
        (r = Ye(r, p, v, h, i[s + 8], 7, 1770035416)),
        (h = Ye(h, r, p, v, i[s + 9], 12, -1958414417)),
        (v = Ye(v, h, r, p, i[s + 10], 17, -42063)),
        (p = Ye(p, v, h, r, i[s + 11], 22, -1990404162)),
        (r = Ye(r, p, v, h, i[s + 12], 7, 1804603682)),
        (h = Ye(h, r, p, v, i[s + 13], 12, -40341101)),
        (v = Ye(v, h, r, p, i[s + 14], 17, -1502002290)),
        (p = Ye(p, v, h, r, i[s + 15], 22, 1236535329)),
        (r = Qe(r, p, v, h, i[s + 1], 5, -165796510)),
        (h = Qe(h, r, p, v, i[s + 6], 9, -1069501632)),
        (v = Qe(v, h, r, p, i[s + 11], 14, 643717713)),
        (p = Qe(p, v, h, r, i[s], 20, -373897302)),
        (r = Qe(r, p, v, h, i[s + 5], 5, -701558691)),
        (h = Qe(h, r, p, v, i[s + 10], 9, 38016083)),
        (v = Qe(v, h, r, p, i[s + 15], 14, -660478335)),
        (p = Qe(p, v, h, r, i[s + 4], 20, -405537848)),
        (r = Qe(r, p, v, h, i[s + 9], 5, 568446438)),
        (h = Qe(h, r, p, v, i[s + 14], 9, -1019803690)),
        (v = Qe(v, h, r, p, i[s + 3], 14, -187363961)),
        (p = Qe(p, v, h, r, i[s + 8], 20, 1163531501)),
        (r = Qe(r, p, v, h, i[s + 13], 5, -1444681467)),
        (h = Qe(h, r, p, v, i[s + 2], 9, -51403784)),
        (v = Qe(v, h, r, p, i[s + 7], 14, 1735328473)),
        (p = Qe(p, v, h, r, i[s + 12], 20, -1926607734)),
        (r = Xe(r, p, v, h, i[s + 5], 4, -378558)),
        (h = Xe(h, r, p, v, i[s + 8], 11, -2022574463)),
        (v = Xe(v, h, r, p, i[s + 11], 16, 1839030562)),
        (p = Xe(p, v, h, r, i[s + 14], 23, -35309556)),
        (r = Xe(r, p, v, h, i[s + 1], 4, -1530992060)),
        (h = Xe(h, r, p, v, i[s + 4], 11, 1272893353)),
        (v = Xe(v, h, r, p, i[s + 7], 16, -155497632)),
        (p = Xe(p, v, h, r, i[s + 10], 23, -1094730640)),
        (r = Xe(r, p, v, h, i[s + 13], 4, 681279174)),
        (h = Xe(h, r, p, v, i[s], 11, -358537222)),
        (v = Xe(v, h, r, p, i[s + 3], 16, -722521979)),
        (p = Xe(p, v, h, r, i[s + 6], 23, 76029189)),
        (r = Xe(r, p, v, h, i[s + 9], 4, -640364487)),
        (h = Xe(h, r, p, v, i[s + 12], 11, -421815835)),
        (v = Xe(v, h, r, p, i[s + 15], 16, 530742520)),
        (p = Xe(p, v, h, r, i[s + 2], 23, -995338651)),
        (r = Ze(r, p, v, h, i[s], 6, -198630844)),
        (h = Ze(h, r, p, v, i[s + 7], 10, 1126891415)),
        (v = Ze(v, h, r, p, i[s + 14], 15, -1416354905)),
        (p = Ze(p, v, h, r, i[s + 5], 21, -57434055)),
        (r = Ze(r, p, v, h, i[s + 12], 6, 1700485571)),
        (h = Ze(h, r, p, v, i[s + 3], 10, -1894986606)),
        (v = Ze(v, h, r, p, i[s + 10], 15, -1051523)),
        (p = Ze(p, v, h, r, i[s + 1], 21, -2054922799)),
        (r = Ze(r, p, v, h, i[s + 8], 6, 1873313359)),
        (h = Ze(h, r, p, v, i[s + 15], 10, -30611744)),
        (v = Ze(v, h, r, p, i[s + 6], 15, -1560198380)),
        (p = Ze(p, v, h, r, i[s + 13], 21, 1309151649)),
        (r = Ze(r, p, v, h, i[s + 4], 6, -145523070)),
        (h = Ze(h, r, p, v, i[s + 11], 10, -1120210379)),
        (v = Ze(v, h, r, p, i[s + 2], 15, 718787259)),
        (p = Ze(p, v, h, r, i[s + 9], 21, -343485551)),
        (r = rr(r, l)),
        (p = rr(p, u)),
        (v = rr(v, y)),
        (h = rr(h, o));
    }
    return [r, p, v, h];
  }
  function ug(i) {
    if (i.length === 0) return [];
    const c = i.length * 8,
      r = new Uint32Array(gp(c));
    for (let p = 0; p < c; p += 8) r[p >> 5] |= (i[p / 8] & 255) << p % 32;
    return r;
  }
  function rr(i, c) {
    const r = (i & 65535) + (c & 65535);
    return (((i >> 16) + (c >> 16) + (r >> 16)) << 16) | (r & 65535);
  }
  function lg(i, c) {
    return (i << c) | (i >>> (32 - c));
  }
  function qi(i, c, r, p, v, h) {
    return rr(lg(rr(rr(c, i), rr(p, h)), v), r);
  }
  function Ye(i, c, r, p, v, h, s) {
    return qi((c & r) | (~c & p), i, c, v, h, s);
  }
  function Qe(i, c, r, p, v, h, s) {
    return qi((c & p) | (r & ~p), i, c, v, h, s);
  }
  function Xe(i, c, r, p, v, h, s) {
    return qi(c ^ r ^ p, i, c, v, h, s);
  }
  function Ze(i, c, r, p, v, h, s) {
    return qi(r ^ (c | ~p), i, c, v, h, s);
  }
  const cg = vp('v3', 48, ig);
  var _p = {
    randomUUID: typeof crypto < 'u' && crypto.randomUUID && crypto.randomUUID.bind(crypto),
  };
  function dg(i, c, r) {
    if (_p.randomUUID && !c && !i) return _p.randomUUID();
    i = i || {};
    const p = i.random || (i.rng || pp)();
    if (((p[6] = (p[6] & 15) | 64), (p[8] = (p[8] & 63) | 128), c)) {
      r = r || 0;
      for (let v = 0; v < 16; ++v) c[r + v] = p[v];
      return c;
    }
    return ji(p);
  }
  function fg(i, c, r, p) {
    switch (i) {
      case 0:
        return (c & r) ^ (~c & p);
      case 1:
        return c ^ r ^ p;
      case 2:
        return (c & r) ^ (c & p) ^ (r & p);
      case 3:
        return c ^ r ^ p;
    }
  }
  function Go(i, c) {
    return (i << c) | (i >>> (32 - c));
  }
  function pg(i) {
    const c = [1518500249, 1859775393, 2400959708, 3395469782],
      r = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    if (typeof i == 'string') {
      const s = unescape(encodeURIComponent(i));
      i = [];
      for (let l = 0; l < s.length; ++l) i.push(s.charCodeAt(l));
    } else Array.isArray(i) || (i = Array.prototype.slice.call(i));
    i.push(128);
    const p = i.length / 4 + 2,
      v = Math.ceil(p / 16),
      h = new Array(v);
    for (let s = 0; s < v; ++s) {
      const l = new Uint32Array(16);
      for (let u = 0; u < 16; ++u)
        l[u] =
          (i[s * 64 + u * 4] << 24) |
          (i[s * 64 + u * 4 + 1] << 16) |
          (i[s * 64 + u * 4 + 2] << 8) |
          i[s * 64 + u * 4 + 3];
      h[s] = l;
    }
    (h[v - 1][14] = ((i.length - 1) * 8) / Math.pow(2, 32)),
      (h[v - 1][14] = Math.floor(h[v - 1][14])),
      (h[v - 1][15] = ((i.length - 1) * 8) & 4294967295);
    for (let s = 0; s < v; ++s) {
      const l = new Uint32Array(80);
      for (let e = 0; e < 16; ++e) l[e] = h[s][e];
      for (let e = 16; e < 80; ++e) l[e] = Go(l[e - 3] ^ l[e - 8] ^ l[e - 14] ^ l[e - 16], 1);
      let u = r[0],
        y = r[1],
        o = r[2],
        a = r[3],
        n = r[4];
      for (let e = 0; e < 80; ++e) {
        const t = Math.floor(e / 20),
          d = (Go(u, 5) + fg(t, y, o, a) + n + c[t] + l[e]) >>> 0;
        (n = a), (a = o), (o = Go(y, 30) >>> 0), (y = u), (u = d);
      }
      (r[0] = (r[0] + u) >>> 0),
        (r[1] = (r[1] + y) >>> 0),
        (r[2] = (r[2] + o) >>> 0),
        (r[3] = (r[3] + a) >>> 0),
        (r[4] = (r[4] + n) >>> 0);
    }
    return [
      (r[0] >> 24) & 255,
      (r[0] >> 16) & 255,
      (r[0] >> 8) & 255,
      r[0] & 255,
      (r[1] >> 24) & 255,
      (r[1] >> 16) & 255,
      (r[1] >> 8) & 255,
      r[1] & 255,
      (r[2] >> 24) & 255,
      (r[2] >> 16) & 255,
      (r[2] >> 8) & 255,
      r[2] & 255,
      (r[3] >> 24) & 255,
      (r[3] >> 16) & 255,
      (r[3] >> 8) & 255,
      r[3] & 255,
      (r[4] >> 24) & 255,
      (r[4] >> 16) & 255,
      (r[4] >> 8) & 255,
      r[4] & 255,
    ];
  }
  const hg = vp('v5', 80, pg);
  var yg = '00000000-0000-0000-0000-000000000000';
  function vg(i) {
    if (!Ni(i)) throw TypeError('Invalid UUID');
    return parseInt(i.slice(14, 15), 16);
  }
  var gg = Object.freeze({
      __proto__: null,
      NIL: yg,
      parse: yp,
      stringify: eg,
      v1: tg,
      v3: cg,
      v4: dg,
      v5: hg,
      validate: Ni,
      version: vg,
    }),
    _g = ss(gg),
    Sp;
  function Sg() {
    return (
      Sp ||
        ((Sp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.CONTEXTUAL_HINTS =
              i.PLAY_KEYWORDS =
              i.PLAY_REPLACEMENTS =
              i.WORD_REPLACEMENTS =
              i.BASIC_REPLACEMENTS =
              i.VoiceScoringEngine =
                void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(_g),
            v = we(),
            h = (function () {
              function s(l, u, y, o) {
                (this.activePlayer = l),
                  (this.scoreEngine = u),
                  (this.sportConfiguration = y),
                  (this.isHomeTeam = o),
                  (this.recordedEvents = []),
                  (this.currentEvent = {}),
                  (this.TEAM_KEYWORDS = r.Map({})),
                  (this.ownTeamId = o ? u.latestState.homeId : u.latestState.awayId),
                  (this.opponentTeamId = o ? u.latestState.awayId : u.latestState.homeId),
                  (this.ownTeamPlayers = l.latestState.activePlayers[this.ownTeamId].map(
                    function (a) {
                      return a.toLowerCase();
                    }
                  )),
                  (this.opponentTeamPlayers = l.latestState.activePlayers[this.opponentTeamId].map(
                    function (a) {
                      return a.toLowerCase();
                    }
                  )),
                  (this.TEAM_KEYWORDS = this.TEAM_KEYWORDS.set(
                    'home',
                    o ? this.ownTeamId : this.opponentTeamId
                  )
                    .set('away', o ? this.opponentTeamId : this.ownTeamId)
                    .set('opponent', this.opponentTeamId));
              }
              return (
                (s.prototype.processSpeech = function (l) {
                  var u = this,
                    y = l.toLowerCase();
                  return (
                    [
                      Object.entries(i.BASIC_REPLACEMENTS),
                      Object.entries(i.WORD_REPLACEMENTS),
                      Object.entries(i.PLAY_REPLACEMENTS),
                    ].forEach(function (o) {
                      for (var a = 0, n = o; a < n.length; a++) {
                        var e = n[a],
                          t = e[0],
                          d = e[1],
                          f = new RegExp(t, 'gi');
                        y = y.replace(f, d);
                      }
                    }),
                    y
                      .toLowerCase()
                      .split(' ')
                      .forEach(function (o) {
                        switch (!0) {
                          case i.PLAY_KEYWORDS.hasOwnProperty(o):
                            var a = i.PLAY_KEYWORDS[o];
                            u.currentEventIsValid() &&
                              (u.recordedEvents.push(u.currentEvent), (u.currentEvent = {})),
                              (u.currentEvent.play_code = a),
                              u.currentEvent.team_id || (u.currentEvent.team_id = u.ownTeamId);
                            break;
                          case u.TEAM_KEYWORDS.get(o) !== void 0:
                            var n = u.TEAM_KEYWORDS.get(o);
                            (u.currentEvent.team_id = n),
                              u.currentEvent.player_id &&
                                u.currentEvent.player_word &&
                                ((n === u.ownTeamId && u.ownTeamPlayers.includes(o)) ||
                                (n === u.opponentTeamId && u.opponentTeamPlayers.includes(o))
                                  ? (u.currentEvent.player_id = o)
                                  : ((u.currentEvent.player_id = void 0),
                                    (u.currentEvent.player_word = void 0)));
                            break;
                          case u.ownTeamPlayers.includes(o):
                            (u.currentEvent.player_word = o),
                              (u.currentEvent.player_id = o),
                              (u.currentEvent.team_id = u.ownTeamId);
                            break;
                          case u.opponentTeamPlayers.includes(o):
                            (u.currentEvent.player_word = o),
                              (u.currentEvent.player_id = o),
                              (u.currentEvent.team_id = u.opponentTeamId);
                            break;
                          default:
                            return;
                        }
                      }),
                    this.currentEventIsValid() && this.recordedEvents.push(this.currentEvent),
                    this.convertToActualEvents(this.recordedEvents)
                  );
                }),
                (s.prototype.convertToActualEvents = function (l) {
                  var u = [];
                  return (
                    l.forEach(function (y) {
                      if (y.team_id && y.play_code) {
                        var o = {
                          id: p.v4(),
                          code: v.MultiSportEventCode.Play,
                          attributes: {
                            team_id: y.team_id,
                            play_code: y.play_code,
                            pbp_entry_id: p.v4(),
                          },
                        };
                        if ((u.push(o), y.player_id)) {
                          var a = {
                            id: p.v4(),
                            code: v.MultiSportEventCode.AssignPlayer,
                            attributes: {
                              play_event_id: o.id,
                              player_id: y.player_id,
                              is_edit: !1,
                            },
                          };
                          u.push(a);
                        }
                      }
                    }),
                    u
                  );
                }),
                (s.prototype.currentEventIsValid = function () {
                  return this.currentEvent.play_code && this.currentEvent.team_id
                    ? this.currentEvent.team_id === this.ownTeamId
                      ? this.sportConfiguration.play_codes.includes(this.currentEvent.play_code)
                      : this.sportConfiguration.opponent_play_codes
                        ? this.sportConfiguration.opponent_play_codes.includes(
                            this.currentEvent.play_code
                          )
                        : !1
                    : !1;
                }),
                s
              );
            })();
          (i.VoiceScoringEngine = h),
            (i.BASIC_REPLACEMENTS = { ' a ': '', ' an ': '', '\\.': ' point ', "'s": '' }),
            (i.WORD_REPLACEMENTS = {
              for: 'four',
              fourty: 'forty',
              "'s": '',
              'two point ': 'two-point ',
              'two points': 'two-points',
              'two pointer': 'two-pointer',
              'three point ': 'three-point ',
              'three points': 'three-points',
              'three pointer': 'three-pointer',
              'free throw': 'free-throw',
              file: 'foul',
              far: 'foul',
              fell: 'foul',
              steel: 'steal',
              access: 'assist',
              assess: 'assist',
              assessed: 'assist',
              black: 'block',
            }),
            (i.PLAY_REPLACEMENTS = {
              'two point': 'two-point',
              'two points': 'two-points',
              'two pointer': 'two-pointer',
              'three point': 'three-point',
              'three points': 'three-points',
              'three pointer': 'three-pointer',
              'free throw': 'free-throw',
              'point miss': 'point-miss',
              'point missed': 'point-miss',
              'miss two': 'missed-two',
              'missed two': 'missed-two',
              'miss three': 'missed-three',
              'missed three': 'missed-three',
              'throw miss': 'throw-miss',
              'miss free': 'missed-free',
              'missed free': 'missed-free',
            }),
            (i.PLAY_KEYWORDS = {
              steal: 'steal',
              rebound: 'rebound',
              assist: 'assist',
              turnover: 'turnover',
              block: 'block',
              'two-point': 'made2',
              'two-points': 'made2',
              'two-pointer': 'made2',
              'two-point-miss': 'missed2',
              'missed-two-points': 'missed2',
              'missed-two-pointer': 'missed2',
              'three-point': 'made3',
              'three-points': 'made3',
              'three-pointer': 'made3',
              'three-point-miss': 'missed3',
              'missed-three-points': 'missed3',
              'missed-three-pointer': 'missed3',
              'missed-three': 'missed3',
              'free-throw': 'madeFreeThrow',
              'free-throw-miss': 'missedFreeThrow',
              'missed-free-throw': 'missedFreeThrow',
            }),
            (i.CONTEXTUAL_HINTS = [
              'two-point miss',
              'two-point make',
              'three-point miss',
              'three-point make',
            ]);
        })(Mo)),
      Mo
    );
  }
  var $r = {},
    Pp;
  function Pg() {
    if (Pp) return $r;
    (Pp = 1),
      Object.defineProperty($r, '__esModule', { value: !0 }),
      ($r.BoxScoreEngine = $r.BoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = Di(),
      v = we(),
      h = Mr(),
      s = Pa(),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'stats', {
            get: function () {
              return s.TeamPlayerStats.toTeamsStatDoc(this.teamPlayerStats, this.teamPoints);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPoints', {
            get: function () {
              return this.get('teamPoints');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPlayerStats', {
            get: function () {
              return this.get('stats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(p.MultiSportBoxScoreState);
    $r.BoxScoreState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n, e) {
        var t = y.call(this, a, n, e) || this;
        return (t.baseEvents = a), (t.score = n), (t.activePlayerEngine = e), t;
      }
      return (
        (o.prototype.initialState = function () {
          return new l(
            c.fromJS({
              teams: [],
              teamPoints: {},
              playForPlayer: {},
              startedPlayerCount: 0,
              stats: c.Map(),
            })
          );
        }),
        (o.prototype.processOneEvent = function (a, n) {
          var e = this;
          switch (n.code) {
            case v.MultiSportEventCode.SetTeams:
              return o.handleSetTeams(a, n);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(
                a,
                n,
                h.HOOPS_CONFIGURATION.play_codes,
                function (t, d) {
                  return (t = e.handlePlusMinusCalculation(t, d)), e.handlePlay(t, d);
                }
              );
            case v.MultiSportEventCode.AssignPlayer:
              return (
                (a = this.handleAssignPlayer(a, n)), this.handlePlusMinusCalcForImplicitSub(a, n)
              );
            case v.MultiSportEventCode.AdjustScore:
              return (a = this.handlePlusMinusCalculation(a, n)), this.handleScoreChange(a, n);
            case v.MultiSportEventCode.OverrideScore:
              return (a = this.handlePlusMinusCalculation(a, n)), this.handleScoreChange(a, n);
            case v.MultiSportEventCode.ActivatePlayer:
              return o.handleActivatePlayer(a, n);
            default:
              return a;
          }
        }),
        (o.handleSetTeams = function (a, n) {
          var e = n.attributes,
            t = e.homeId,
            d = e.awayId;
          return a
            .setIn(['teamPoints', t], 0)
            .setIn(['teamPoints', d], 0)
            .setIn(['teams'], c.List.of(t, d))
            .setIn(['stats'], s.TeamPlayerStats.fromTeams(c.List.of(t, d)))
            .updateIn(['stats', t, r.TOTAL], s.Stats.empty(), function (f) {
              return f.setIn([s.HoopsStat.GP], 1);
            })
            .updateIn(['stats', d, r.TOTAL], s.Stats.empty(), function (f) {
              return f.setIn([s.HoopsStat.GP], 1);
            });
        }),
        (o.prototype.handleScoreChange = function (a, n) {
          var e = n.attributes.team_id,
            t = this.score.stateAfterEvent(this.nextEventOffset).scores[e];
          return a.setIn(['teamPoints', e], t);
        }),
        (o.handleActivatePlayer = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.player_id;
          return o.markPlayerSeen(d, t, a);
        }),
        (o.prototype.handlePlusMinusCalculation = function (a, n) {
          var e = n.attributes.team_id,
            t = this.determineEventPlayValue(n),
            d = this.activePlayerEngine.stateAfterEvent(this.nextEventOffset).activePlayers;
          return Object.entries(d).reduce(function (f, _) {
            var S = _[0],
              P = _[1],
              I = S === e ? t : -t;
            return P.reduce(function (b, E) {
              return b.updateIn(['stats', S, E, s.HoopsStat.PM], 0, function (T) {
                return T + I;
              });
            }, f);
          }, a);
        }),
        (o.prototype.determineEventPlayValue = function (a) {
          switch (a.code) {
            case v.MultiSportEventCode.Play:
              var n = a.attributes.play_code;
              switch (n) {
                case h.PlayCode.MadeFreeThrow:
                  return 1;
                case h.PlayCode.Made2:
                  return 2;
                case h.PlayCode.Made3:
                  return 3;
                default:
                  return 0;
              }
            case v.MultiSportEventCode.AdjustScore:
              return a.attributes.adjustment;
            case v.MultiSportEventCode.OverrideScore:
              return a.attributes.points;
            default:
              return 0;
          }
        }),
        (o.prototype.handlePlay = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.play_code;
          return this.handleScoreChange(
            a
              .updateIn(['stats', t, r.UNASSIGNED_PLAYER], s.Stats.empty(), function (f) {
                return s.Stats.addPlay(f, d);
              })
              .updateIn(['stats', t, r.TOTAL], s.Stats.empty(), function (f) {
                return s.Stats.addPlay(f, d);
              }),
            n
          );
        }),
        (o.prototype.handleAssignPlayer = function (a, n) {
          var e = n.attributes,
            t = e.play_event_id,
            d = e.player_id,
            f = this.baseEvents,
            _ = a.getIn(['playForPlayer', t], r.UNASSIGNED_PLAYER),
            S =
              f[this.indexForEventId(t)] ||
              f.slice(this.nextEventOffset).find(function (E) {
                return E.id === t;
              }),
            P = S.attributes,
            I = P.team_id,
            b = P.play_code;
          return (0, v.onValidPlayCode)(a, S, h.HOOPS_CONFIGURATION.play_codes, function () {
            return o.markPlayerSeen(
              d,
              I,
              a
                .setIn(['playForPlayer', t], d)
                .updateIn(['stats', I, d], s.Stats.empty(), function (E) {
                  return s.Stats.addPlay(E, b);
                })
                .updateIn(['stats', I, _], s.Stats.empty(), function (E) {
                  return s.Stats.removePlay(E, b);
                })
            );
          });
        }),
        (o.prototype.handlePlusMinusCalcForImplicitSub = function (a, n) {
          var e,
            t = n.attributes,
            d = t.play_event_id,
            f = t.player_id,
            _ = this.baseEvents,
            S =
              _[this.indexForEventId(d)] ||
              _.slice(this.nextEventOffset).find(function (b) {
                return b.id === d;
              }),
            P = S.attributes.team_id,
            I = this.determineEventPlayValue(S);
          return !(
            (e = this.activePlayerEngine.stateBeforeEvent(this.nextEventOffset)) === null ||
            e === void 0
          ) && e.isPlayerActive(P, f)
            ? a
            : a.updateIn(['stats', P, f, s.HoopsStat.PM], 0, function (b) {
                return b + I;
              });
        }),
        (o.markPlayerSeen = function (a, n, e) {
          var t = ['stats', n, a],
            d = e.get('startedPlayerCount'),
            f =
              d < 5
                ? 1
                : e.getIn(i.__spreadArray(i.__spreadArray([], t, !0), [s.HoopsStat.GS], !1), 0);
          return e
            .updateIn(t, s.Stats.empty(), function (_) {
              return _.setIn([s.HoopsStat.GP], 1);
            })
            .updateIn(t, s.Stats.empty(), function (_) {
              return _.setIn([s.HoopsStat.GS], f);
            })
            .updateIn(['startedPlayerCount'], function (_) {
              return ++_;
            });
        }),
        o
      );
    })(p.MultiSportBoxScoreEngine);
    return ($r.BoxScoreEngine = u), $r;
  }
  var zr = {},
    Ip;
  function Ig() {
    if (Ip) return zr;
    (Ip = 1),
      Object.defineProperty(zr, '__esModule', { value: !0 }),
      (zr.PerPeriodBoxScoreEngine = zr.PeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = we(),
      v = Gi(),
      h = Pa(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'periodStats', {
            get: function () {
              var o = this.get('statsPerPeriod');
              return o.reduce(function (a, n, e) {
                var t = n.reduce(function (d, f, _) {
                  return d.setIn([_], f.getIn([r.TOTAL, h.HoopsStat.PTS]));
                }, c.Map());
                return (a[e] = h.TeamPlayerStats.toTeamsStatDoc(n, t)), a;
              }, {});
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'lineScores', {
            get: function () {
              return Object.entries(this.periodStats)
                .reduce(function (o, a) {
                  var n = a[0],
                    e = a[1],
                    t = parseInt(n, 10),
                    d = Object.entries(e).reduce(function (f, _) {
                      var S = _[0],
                        P = _[1];
                      return (f[S] = P.stats.offense[h.HoopsStat.PTS]), f;
                    }, {});
                  return Object.entries(d).reduce(function (f, _) {
                    var S = _[0],
                      P = _[1],
                      I = f.getIn([S], c.List());
                    return (I = I.insert(t, P)), f.setIn([S], I);
                  }, o);
                }, c.Map())
                .toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(v.MultiSportPeriodBoxScoreState);
    zr.PeriodBoxScoreState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o, a, n) {
        var e = u.call(this, o, a, n) || this;
        return (e.baseEvents = o), (e.period = a), (e.stats = n), e;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ statsPerPeriod: c.Map() }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          switch (a.code) {
            case p.MultiSportEventCode.Play:
            case p.MultiSportEventCode.SetTeams:
            case p.MultiSportEventCode.AssignPlayer:
            case p.MultiSportEventCode.AdjustScore:
            case p.MultiSportEventCode.OverrideScore:
              return this.handleStatsChange(o);
            default:
              return o;
          }
        }),
        (y.prototype.handleStatsChange = function (o) {
          var a;
          if (this.stats) {
            var n = this.stats.stateAfterEvent(this.nextEventOffset),
              e = h.TeamPlayerStats.fromTeamsStatDoc(n.stats),
              t = this.period.stateAfterEvent(this.nextEventOffset),
              d = Math.max(1, t.period - (t.isActive ? 0 : 1)),
              f = (a = c.List).of.apply(a, e.keySeq().toArray()),
              _ = function (b) {
                return o.getIn(['statsPerPeriod', b], P);
              },
              S = Array.from({ length: d }, function (b, E) {
                return ++E;
              }),
              P = h.TeamPlayerStats.fromTeams(f),
              I =
                d === 1
                  ? e
                  : S.slice(0, -1).reduce(function (b, E) {
                      return h.TeamPlayerStats.subtract(b, _(E));
                    }, e);
            return S.reduce(function (b, E) {
              return b.updateIn(['statsPerPeriod', E], function (T) {
                return E === d ? I : T || P;
              });
            }, o);
          } else return o;
        }),
        y
      );
    })(v.MultiSportPerPeriodBoxScoreEngine);
    return (zr.PerPeriodBoxScoreEngine = l), zr;
  }
  var Na = {},
    mp;
  function mg() {
    if (mp) return Na;
    (mp = 1),
      Object.defineProperty(Na, '__esModule', { value: !0 }),
      (Na.PlayByPlayEngine = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = mt(),
      p = Mr(),
      v = Hf(),
      h = (function (s) {
        i.__extends(l, s);
        function l() {
          var u = (s !== null && s.apply(this, arguments)) || this;
          return (
            (u.playsForStreakTracking = [p.PlayCode.Made2, p.PlayCode.Made3]),
            (u.playsForStreakBreaking = [p.PlayCode.Missed2, p.PlayCode.Missed3]),
            u
          );
        }
        return (
          (l.prototype.handlePlay = function (u, y) {
            var o = this.period.stateBeforeEvent(this.nextEventOffset),
              a = this.score.stateAfterEvent(this.nextEventOffset),
              n = u;
            if (o && o.isActive === !1) {
              var e = o.period,
                t = new r.PlayByPlayEntry(
                  c.fromJS({
                    template: 'Start of period '.concat(o.period),
                    id: 'start_of_period_'.concat(o.period),
                    playByPlayType: r.PlayByPlayType.StartPeriod,
                    period: e,
                    playerAssignable: !1,
                    teamAssignable: !1,
                    deletable: !1,
                    createdAt: y.createdAt,
                    summary: this.getPeriodSummary(a, e),
                  })
                );
              n = n.pushEntry(t);
            }
            var d = y.attributes.play_code,
              f;
            d === p.PlayCode.Made2 || d === p.PlayCode.Made3 || d === p.PlayCode.MadeFreeThrow
              ? (f = a.scoresImmutable)
              : (f = void 0);
            var _ = y.attributes.team_id,
              S = new r.PlayByPlayEntry(
                c.fromJS({
                  template: ''.concat(d, ' by ').concat(_),
                  id: y.attributes.pbp_entry_id,
                  playByPlayType: r.PlayByPlayType.Play,
                  eventIds: [y.id],
                  playCode: d,
                  teamId: _,
                  teamScores: f,
                  playerAssignable: !0,
                  teamAssignable: !0,
                  deletable: !0,
                  createdAt: y.createdAt,
                  summary: (0, v.getPlayCommentary)(d, _),
                  playDetails: y.attributes.play_details,
                })
              );
            return n.pushEntry(S);
          }),
          (l.prototype.getPeriodSummary = function (u, y) {
            var o = u.awayId,
              a = u.homeId,
              n = u.scores[o],
              e = u.scores[a];
            return (0, v.getPeriodStartCommentary)(o, a, n, e, y);
          }),
          (l.prototype.getColorCommentaryMaybe = function (u, y, o, a, n) {
            return (0, v.getColorCommentaryMaybe)(u, y, o, a, n);
          }),
          (l.prototype.getAdjustScoreSummary = function (u, y) {
            return (0, v.getAdjustScoreCommentary)(u, y);
          }),
          (l.prototype.getEndPeriodSummary = function (u, y) {
            return (0, v.getEndPeriodCommentary)(u, y);
          }),
          (l.prototype.getActivatePlayerSummary = function (u) {
            return (0, v.getActivatePlayerCommentary)(u);
          }),
          (l.prototype.getDeactivatePlayerSummary = function (u) {
            return (0, v.getDeactivatePlayerCommentary)(u);
          }),
          l
        );
      })(r.MultiSportPlayByPlayEngine);
    return (Na.PlayByPlayEngine = h), Na;
  }
  var ja = {},
    bp;
  function bg() {
    if (bp) return ja;
    (bp = 1), Object.defineProperty(ja, '__esModule', { value: !0 }), (ja.ScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = Mr(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.handlePlay = function (s, l) {
            var u = l.attributes.play_code,
              y = l.attributes.team_id;
            switch (u) {
              case r.PlayCode.Made2:
                return s.incrementScore(y, 2);
              case r.PlayCode.Made3:
                return s.incrementScore(y, 3);
              case r.PlayCode.MadeFreeThrow:
                return s.incrementScore(y, 1);
              default:
                return s;
            }
          }),
          h
        );
      })(c.MultiSportScoreEngine);
    return (ja.ScoreEngine = p), ja;
  }
  var Vr = {},
    qa = {},
    Ep;
  function Eg() {
    if (Ep) return qa;
    (Ep = 1),
      Object.defineProperty(qa, '__esModule', { value: !0 }),
      (qa.MultiSportGameSettingsState = void 0);
    var i = Q,
      c = i.__importStar(be()),
      r = (function (p) {
        i.__extends(v, p);
        function v() {
          return (p !== null && p.apply(this, arguments)) || this;
        }
        return v;
      })(c.ImmutableState);
    return (qa.MultiSportGameSettingsState = r), qa;
  }
  var Bp;
  function Bg() {
    if (Bp) return Vr;
    (Bp = 1),
      Object.defineProperty(Vr, '__esModule', { value: !0 }),
      (Vr.HoopsGameSettingsEngine = Vr.HoopsGameSettingsState = void 0);
    var i = Q,
      c = i.__importStar(Ie()),
      r = we(),
      p = i.__importStar(de()),
      v = Eg(),
      h = tp(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'gameSettingsDoc', {
            get: function () {
              return h.GameSettings.fromHoopsMap(this.gameSettingsImmutable);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'gameSettingsImmutable', {
            get: function () {
              return this.get('gameSettings');
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(v.MultiSportGameSettingsState);
    Vr.HoopsGameSettingsState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o) {
        var a = u.call(this, o) || this;
        return (a.baseEvents = o), a;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(p.fromJS({ gameSettings: void 0 }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          switch (a.code) {
            case r.MultiSportEventCode.SetGameSettings:
              return this.handleGameSettingsChange(a);
            default:
              return o;
          }
        }),
        (y.prototype.handleGameSettingsChange = function (o) {
          var a = o.attributes;
          return new s(
            p.fromJS({
              gameSettings: {
                gameClock: a.game_clock,
                periodType: a.period_type.toLowerCase(),
                periodLength: a.period_length,
                teamTimeouts: a.team_timeouts,
                timeoutsReset: a.timeouts_reset.toLowerCase(),
              },
            })
          );
        }),
        y
      );
    })(c.VersionedStateEngine);
    return (Vr.HoopsGameSettingsEngine = l), Vr;
  }
  var Ua = {},
    Wa = {},
    Tp;
  function Tg() {
    if (Tp) return Wa;
    (Tp = 1),
      Object.defineProperty(Wa, '__esModule', { value: !0 }),
      (Wa.SabertoothPlayCodeTransformer = void 0);
    var i = (function () {
      function c() {}
      return c;
    })();
    return (Wa.SabertoothPlayCodeTransformer = i), Wa;
  }
  var Op;
  function Og() {
    if (Op) return Ua;
    (Op = 1),
      Object.defineProperty(Ua, '__esModule', { value: !0 }),
      (Ua.HoopsPlayCodeTransformer = void 0);
    var i = Q,
      c = Tg(),
      r = Mr(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.transform = function (s, l) {
            switch (s) {
              case r.PlayCode.Rebound:
                if (l && l.rebound_type) {
                  var u = l.rebound_type;
                  if (u === r.PlayCode.OffensiveRebound) return r.PlayCode.OffensiveRebound;
                  if (u === r.PlayCode.DefensiveRebound) return r.PlayCode.DefensiveRebound;
                }
                break;
            }
            return s;
          }),
          h
        );
      })(c.SabertoothPlayCodeTransformer);
    return (Ua.HoopsPlayCodeTransformer = p), Ua;
  }
  var Ap;
  function Ag() {
    if (Ap) return Ha;
    (Ap = 1),
      Object.defineProperty(Ha, '__esModule', { value: !0 }),
      (Ha.HoopsCompactorController = void 0);
    var i = Q,
      c = Tr(),
      r = Oa(),
      p = Aa(),
      v = Sg(),
      h = Ra(),
      s = Pg(),
      l = Mr(),
      u = Fa(),
      y = Ig(),
      o = mg(),
      a = bg(),
      n = Pa(),
      e = Df(),
      t = Bg(),
      d = Ma(),
      f = Og(),
      _ = (function (S) {
        i.__extends(P, S);
        function P() {
          var I = S.call(this) || this;
          (I.stateAccessorClass = d.SharedStateAccessor),
            (I.activePlayer = new h.MultiSportActivePlayerEngine([], l.HOOPS_CONFIGURATION)),
            (I.period = new u.MultiSportPeriodEngine([], l.HOOPS_CONFIGURATION)),
            (I.score = new a.ScoreEngine([], l.HOOPS_CONFIGURATION)),
            (I.stats = new s.BoxScoreEngine([], I.score, I.activePlayer)),
            (I.gameSettings = new t.HoopsGameSettingsEngine([])),
            (I.playByPlay = new o.PlayByPlayEngine(
              [],
              l.HOOPS_CONFIGURATION,
              I.activePlayer,
              I.period,
              I.score,
              I.stats
            )),
            (I.lineScore = new p.LinescoreEngine([], I.period, I.score, l.HOOPS_CONFIGURATION)),
            (I.statsPerPeriod = new y.PerPeriodBoxScoreEngine([], I.period, I.stats)),
            (I.engines = [
              I.activePlayer,
              I.period,
              I.score,
              I.playByPlay,
              I.lineScore,
              I.statsPerPeriod,
              I.stats,
              I.gameSettings,
            ]),
            (I.compactor = new c.SabertoothEventCompactor(new f.HoopsPlayCodeTransformer()));
          for (var b = 0, E = I.engines; b < E.length; b++) {
            var T = E[b];
            T.baseEvents = I.compactor.outStream;
          }
          return I;
        }
        return (
          (P.prototype.getDerivedMultiGameStatsWithBaseStats = function (I) {
            return n.TeamPlayerStats.getDerivedMultiGameStatsWithBaseStats(I);
          }),
          (P.prototype.processVoiceEvents = function (I, b) {
            var E = new v.VoiceScoringEngine(
              this.activePlayer,
              this.score,
              l.HOOPS_CONFIGURATION,
              b
            );
            return E.processSpeech(I);
          }),
          (P.prototype.announcements = function (I) {
            return (0, e.generateAnnouncements)(I);
          }),
          P
        );
      })(r.MultiSportCompactorController);
    return (Ha.HoopsCompactorController = _), Ha;
  }
  var Ho = {},
    Rp;
  function Rg() {
    return (
      Rp ||
        ((Rp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.HOOPS_STATS = i.RUGBY_STATS = i.GOAL_STATS = i.StatTableColumnsAccessor = void 0);
          var c = we(),
            r = (function () {
              function v(h) {
                this.sport = h.sport;
              }
              return (
                (v.prototype.getGameStatTableColumns = function () {
                  var h = [];
                  switch (this.sport) {
                    case c.Sport.SOCCER:
                    case c.Sport.FIELD_HOCKEY:
                      return (
                        (h = Object.keys(i.GOAL_STATS).filter(function (s) {
                          return !['GP', 'PTS'].includes(s);
                        })),
                        h.map(function (s) {
                          return i.GOAL_STATS[s];
                        })
                      );
                    case c.Sport.HOCKEY:
                    case c.Sport.LACROSSE:
                    case c.Sport.WATER_POLO:
                      return (
                        (h = Object.keys(i.GOAL_STATS).filter(function (s) {
                          return !['GP', 'PTS2'].includes(s);
                        })),
                        h.map(function (s) {
                          return i.GOAL_STATS[s];
                        })
                      );
                    case c.Sport.RUGBY:
                      return (
                        (h = Object.keys(i.RUGBY_STATS).filter(function (s) {
                          return s !== 'GP';
                        })),
                        h.map(function (s) {
                          return i.RUGBY_STATS[s];
                        })
                      );
                    case c.Sport.BASKETBALL:
                      return (
                        (h = [
                          'PTS',
                          'PF',
                          'FG',
                          'FGP',
                          'PT3',
                          'P3PT',
                          'FT',
                          'FTP',
                          'TO',
                          'ORB',
                          'DRB',
                          'REB',
                          'AST',
                          'STL',
                          'BLK',
                          'PM',
                        ]),
                        h.map(function (s) {
                          return i.HOOPS_STATS[s];
                        })
                      );
                    default:
                      return [];
                  }
                }),
                (v.prototype.getDerivedStatTableColumns = function () {
                  var h = [];
                  switch (this.sport) {
                    case c.Sport.SOCCER:
                    case c.Sport.FIELD_HOCKEY:
                      return (
                        (h = Object.keys(i.GOAL_STATS).filter(function (s) {
                          return s !== 'PTS';
                        })),
                        h.map(function (s) {
                          return i.GOAL_STATS[s];
                        })
                      );
                    case c.Sport.HOCKEY:
                    case c.Sport.LACROSSE:
                    case c.Sport.WATER_POLO:
                      return (
                        (h = Object.keys(i.GOAL_STATS).filter(function (s) {
                          return s !== 'PTS2';
                        })),
                        h.map(function (s) {
                          return i.GOAL_STATS[s];
                        })
                      );
                    case c.Sport.RUGBY:
                      return Object.values(i.RUGBY_STATS);
                    case c.Sport.BASKETBALL:
                      return Object.values(i.HOOPS_STATS);
                    default:
                      return [];
                  }
                }),
                (v.prototype.getOpponentGameStatTableColumns = function () {
                  var h = [];
                  switch (this.sport) {
                    case c.Sport.BASKETBALL:
                      return (
                        (h = ['PTS', 'PF', 'FGM', 'M3PT', 'FT', 'FTP', 'TO', 'ORB', 'DRB', 'REB']),
                        h.map(function (s) {
                          return i.HOOPS_STATS[s];
                        })
                      );
                    default:
                      return [];
                  }
                }),
                v
              );
            })();
          (i.StatTableColumnsAccessor = r),
            (i.GOAL_STATS = {
              GP: {
                type: 'GP',
                display_name: 'GP',
                definition: 'Games Played',
                format: c.StatFormat.INTEGER,
              },
              G: {
                type: 'G',
                display_name: 'G',
                definition: 'Goals',
                format: c.StatFormat.INTEGER,
              },
              A: {
                type: 'A',
                display_name: 'A',
                definition: 'Assists',
                format: c.StatFormat.INTEGER,
              },
              PTS: {
                type: 'PTS',
                display_name: 'PTS',
                definition: 'Points (goals + assists)',
                format: c.StatFormat.INTEGER,
              },
              PTS2: {
                type: 'PTS2',
                display_name: 'PTS',
                definition: 'Points (goals x 2 + assists)',
                format: c.StatFormat.INTEGER,
              },
              SH: {
                type: 'SH',
                display_name: 'SH',
                definition: 'Shots',
                format: c.StatFormat.INTEGER,
              },
              'SH%': {
                type: 'SH%',
                display_name: 'SH%',
                definition: 'Shot Percentage',
                format: c.StatFormat.PERCENTAGE,
              },
              SV: {
                type: 'SV',
                display_name: 'SV',
                definition: 'Saves',
                format: c.StatFormat.INTEGER,
              },
            }),
            (i.RUGBY_STATS = {
              GP: {
                type: 'GP',
                display_name: 'GP',
                definition: 'Games Played',
                format: c.StatFormat.INTEGER,
              },
              T: {
                type: 'T',
                display_name: 'T',
                definition: 'Tries Scored',
                format: c.StatFormat.INTEGER,
              },
              C: {
                type: 'C',
                display_name: 'C',
                definition: 'Conversions',
                format: c.StatFormat.INTEGER,
              },
              PC: {
                type: 'PC',
                display_name: 'PC',
                definition: 'Penalty Conversions',
                format: c.StatFormat.INTEGER,
              },
              DG: {
                type: 'DG',
                display_name: 'DG',
                definition: 'Drop Goals',
                format: c.StatFormat.INTEGER,
              },
              PTS: {
                type: 'PTS',
                display_name: 'PTS',
                definition: 'Points Scored',
                format: c.StatFormat.INTEGER,
              },
            });
          var p = {
            FGM: {
              type: 'FGM',
              display_name: 'FGM',
              definition: 'Field Goals Made',
              format: c.StatFormat.INTEGER,
            },
            FGA: {
              type: 'FGA',
              display_name: 'FGA',
              definition: 'Field Goals Attempted',
              format: c.StatFormat.INTEGER,
            },
            M3PT: {
              type: '3PTM',
              display_name: '3PTM',
              definition: 'Three Point Field Goals Made',
              format: c.StatFormat.INTEGER,
            },
            A3PT: {
              type: '3PTA',
              display_name: '3PTA',
              definition: 'Three Point Field Goals Attempted',
              format: c.StatFormat.INTEGER,
            },
            FTM: {
              type: 'FTM',
              display_name: 'FTM',
              definition: 'Free Throws Made',
              format: c.StatFormat.INTEGER,
            },
            FTA: {
              type: 'FTA',
              display_name: 'FTA',
              definition: 'Free Throws Attempted',
              format: c.StatFormat.INTEGER,
            },
          };
          i.HOOPS_STATS = {
            GP: {
              type: 'GP',
              display_name: 'GP',
              definition: 'Games Played',
              format: c.StatFormat.INTEGER,
            },
            GS: {
              type: 'GS',
              display_name: 'GS',
              definition: 'Games Started',
              format: c.StatFormat.INTEGER,
            },
            PTS: {
              type: 'PTS',
              display_name: 'PTS',
              definition: 'Points',
              format: c.StatFormat.INTEGER,
            },
            PF: {
              type: 'PF',
              display_name: 'PF',
              definition: 'Personal fouls',
              format: c.StatFormat.INTEGER,
            },
            PPG: {
              type: 'PPG',
              display_name: 'PPG',
              definition: 'Points per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            PFPG: {
              type: 'PFPG',
              display_name: 'PFPG',
              definition: 'Personal fouls per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            FGM: p.FGM,
            FGA: p.FGA,
            FG: {
              type: 'FG',
              display_name: 'FG',
              definition: 'Field goals made-attempted',
              format: c.StatFormat.JOIN,
              joined_stats: [p.FGM, p.FGA],
            },
            FGP: {
              type: 'FG%',
              display_name: 'FG%',
              definition: 'Percentage of field goals made',
              format: c.StatFormat.PERCENTAGE,
            },
            M3PT: p.M3PT,
            A3PT: p.A3PT,
            PT3: {
              type: '3PT',
              display_name: '3PT',
              definition: '3-point field goals made-attempted',
              format: c.StatFormat.JOIN,
              joined_stats: [p.M3PT, p.A3PT],
            },
            P3PT: {
              type: '3PT%',
              display_name: '3PT%',
              definition: 'Percentage of 3-point field goals made',
              format: c.StatFormat.PERCENTAGE,
            },
            FTM: p.FTM,
            FTA: p.FTA,
            FT: {
              type: 'FT',
              display_name: 'FT',
              definition: 'Free throws made-attempted',
              format: c.StatFormat.JOIN,
              joined_stats: [p.FTM, p.FTA],
            },
            FTP: {
              type: 'FT%',
              display_name: 'FT%',
              definition: 'Percentage of free throws made',
              format: c.StatFormat.PERCENTAGE,
            },
            TO: {
              type: 'TO',
              display_name: 'TO',
              definition: 'Turnovers',
              format: c.StatFormat.INTEGER,
            },
            ORB: {
              type: 'ORB',
              display_name: 'ORB',
              definition: 'Offensive Rebounds',
              format: c.StatFormat.INTEGER,
            },
            DRB: {
              type: 'DRB',
              display_name: 'DRB',
              definition: 'Defensive Rebounds',
              format: c.StatFormat.INTEGER,
            },
            REB: {
              type: 'REB',
              display_name: 'REB',
              definition: 'Total Rebounds',
              format: c.StatFormat.INTEGER,
            },
            AST: {
              type: 'AST',
              display_name: 'AST',
              definition: 'Assists',
              format: c.StatFormat.INTEGER,
            },
            STL: {
              type: 'STL',
              display_name: 'STL',
              definition: 'Steals',
              format: c.StatFormat.INTEGER,
            },
            BLK: {
              type: 'BLK',
              display_name: 'BLK',
              definition: 'Blocks',
              format: c.StatFormat.INTEGER,
            },
            PM: {
              type: '+/-',
              display_name: '+/-',
              definition: "The team's net points while the player is on the court",
              format: c.StatFormat.INTEGER,
            },
            TOPG: {
              type: 'TOPG',
              display_name: 'TOPG',
              definition: 'Turnovers per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            RPG: {
              type: 'RPG',
              display_name: 'RPG',
              definition: 'Rebounds per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            APG: {
              type: 'APG',
              display_name: 'APG',
              definition: 'Assists per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            SPG: {
              type: 'SPG',
              display_name: 'SPG',
              definition: 'Steals per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            BPG: {
              type: 'BPG',
              display_name: 'BPG',
              definition: 'Blocks per game',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
            EFGP: {
              type: 'eFG%',
              display_name: 'eFG%',
              definition: 'Effective field goal percentage',
              format: c.StatFormat.PERCENTAGE,
            },
            TSP: {
              type: 'TS%',
              display_name: 'TS%',
              definition: 'True shooting percentage',
              format: c.StatFormat.PERCENTAGE,
            },
            AST2TO: {
              type: 'AST/TO',
              display_name: 'AST/TO',
              definition: 'Assist to turnover ratio',
              format: c.StatFormat.FLOAT_PERCENTAGE,
            },
          };
        })(Ho)),
      Ho
    );
  }
  var $a = {},
    Kr = {},
    No = {},
    Fp;
  function za() {
    return (
      Fp ||
        ((Fp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.RUGBY_POINTS = i.RUGBY_CONFIGURATION = i.PlayCode = void 0);
          var c;
          (function (r) {
            (r.Try = 'try'),
              (r.Conversion = 'conversion'),
              (r.PenaltyGoal = 'penalty_goal'),
              (r.DropGoal = 'drop_goal');
          })((c = i.PlayCode || (i.PlayCode = {}))),
            (i.RUGBY_CONFIGURATION = { play_codes: Object.values(c) }),
            (i.RUGBY_POINTS = { penalty_goal: 3, drop_goal: 3, conversion: 2, try: 5 });
        })(No)),
      No
    );
  }
  var jo = {},
    kp;
  function qo() {
    return (
      kp ||
        ((kp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.TeamPlayerStats = i.Stats = i.RugbyStat = void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Sa()),
            v = He(),
            h = we(),
            s = za(),
            l;
          (function (e) {
            (e.T = 'T'), (e.C = 'C'), (e.PC = 'PC'), (e.DG = 'DG'), (e.GP = 'GP'), (e.PTS = 'PTS');
          })((l = i.RugbyStat || (i.RugbyStat = {})));
          var u;
          (function (e) {
            function t() {
              return Object.values(l);
            }
            e.values = t;
            function d() {
              return y(
                e.values().reduce(function (b, E) {
                  return b.set(E, 0);
                }, r.Map())
              );
            }
            e.empty = d;
            function f(b, E) {
              if ((0, h.isValidPlayCode)(E, s.RUGBY_CONFIGURATION.play_codes)) return P(!0, b, E);
              p.unreachablePlayCode(E);
            }
            e.addPlay = f;
            function _(b, E) {
              if ((0, h.isValidPlayCode)(E, s.RUGBY_CONFIGURATION.play_codes)) return P(!1, b, E);
              p.unreachablePlayCode(E);
            }
            e.removePlay = _;
            function S(b) {
              switch (b) {
                default:
                  return;
              }
            }
            e.averageKey = S;
            function P(b, E, T) {
              return y(
                (function () {
                  switch (T) {
                    case s.PlayCode.Try:
                      return I(b, E, l.T);
                    case s.PlayCode.Conversion:
                      return I(b, E, l.C);
                    case s.PlayCode.PenaltyGoal:
                      return I(b, E, l.PC);
                    case s.PlayCode.DropGoal:
                      return I(b, E, l.DG);
                    default:
                      p.unreachablePlayCode(T);
                  }
                })()
              );
            }
            function I(b, E) {
              for (var T = [], F = 2; F < arguments.length; F++) T[F - 2] = arguments[F];
              return T.reduce(function (R, L) {
                return R.updateIn([L], 0, function (x) {
                  return b ? ++x : --x;
                });
              }, E);
            }
          })((u = i.Stats || (i.Stats = {}))),
            (function (e) {
              function t(R) {
                var L = Object.entries(R).reduce(function (N, M) {
                    var J = M[0],
                      D = M[1];
                    return N.setIn([J], D.stats.offense[l.PTS]);
                  }, r.Map.of()),
                  x = e.fromTeamsStatDoc(R, !1);
                return e.toTeamsStatDoc(x, L);
              }
              e.getDerivedMultiGameStatsWithBaseStats = t;
              function d(R) {
                return R.toJS().reduce(function (L, x) {
                  var N = r.Map().set(v.TOTAL, u.empty()).set(v.UNASSIGNED_PLAYER, u.empty());
                  return L.set(x, N);
                }, r.Map());
              }
              e.fromTeams = d;
              function f(R, L) {
                return L.reduce(function (x, N, M) {
                  var J = R.getIn([M, v.TOTAL, l.PTS]),
                    D = R.getIn([M, v.UNASSIGNED_PLAYER, l.PTS]),
                    $ = J - D,
                    z = N - $,
                    q = R.setIn([M, v.TOTAL, l.PTS], N).setIn([M, v.UNASSIGNED_PLAYER, l.PTS], z);
                  return (x[M] = E(q.get(M))), x;
                }, {});
              }
              e.toTeamsStatDoc = f;
              function _(R, L) {
                return Object.entries(R).reduce(function (x, N) {
                  var M = N[0],
                    J = N[1],
                    D = J.stats,
                    $ = J.unassigned,
                    z = J.players,
                    q = Object.entries(z)
                      .reduce(function (V, U) {
                        var j = U[0],
                          re = U[1];
                        return V.setIn([M, j], b(re.stats, !!L));
                      }, x)
                      .setIn([M, v.TOTAL], b(D, !!L));
                  return $ ? q.setIn([M, v.UNASSIGNED_PLAYER], b($.stats, !1)) : q;
                }, r.fromJS({}));
              }
              e.fromTeamsStatDoc = _;
              function S(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], P(R.get(M), L.get(M)));
                }, r.Map());
              }
              e.subtract = S;
              function P(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], I(R.get(M), L.get(M, u.empty())));
                }, r.Map());
              }
              function I(R, L) {
                return n(
                  R.reduce(function (x, N, M) {
                    return x.setIn([M], R.get(M) - L.get(M, 0));
                  }, u.empty()),
                  void 0
                );
              }
              function b(R, L) {
                return n(r.fromJS(R.offense), L);
              }
              function E(R) {
                return R.reduce(
                  function (L, x, N) {
                    switch (N) {
                      case v.TOTAL:
                      case v.UNASSIGNED_PLAYER:
                        return L;
                      default:
                        return (L.players[N] = T(x)), L;
                    }
                  },
                  {
                    players: {},
                    unassigned: T(R.get(v.UNASSIGNED_PLAYER)),
                    stats: F(R.get(v.TOTAL)),
                  }
                );
              }
              function T(R) {
                return { stats: F(R) };
              }
              function F(R) {
                return { offense: R.toJS() };
              }
            })(i.TeamPlayerStats || (i.TeamPlayerStats = {}));
          function y(e) {
            return o(e, a, n);
          }
          function o(e) {
            for (var t = [], d = 1; d < arguments.length; d++) t[d - 1] = arguments[d];
            return t.reduce(function (f, _) {
              return _(f);
            }, e);
          }
          function a(e) {
            var t = function (f) {
                return e.get(f, 0);
              },
              d =
                t(l.T) * s.RUGBY_POINTS.try +
                t(l.C) * s.RUGBY_POINTS.conversion +
                t(l.DG) * s.RUGBY_POINTS.drop_goal +
                t(l.PC) * s.RUGBY_POINTS.penalty_goal;
            return e.setIn([l.PTS], d);
          }
          function n(e, t) {
            var d = function (S) {
                return e.get(S, 0);
              },
              f = function (S, P) {
                return d(S) / d(P);
              },
              _ = e;
            return (
              (_ = o(_)),
              t
                ? u.values().reduce(function (S, P) {
                    var I = u.averageKey(P);
                    return I ? S.setIn([I], f(P, l.GP)) : S;
                  }, _)
                : _
            );
          }
        })(jo)),
      jo
    );
  }
  var wp;
  function Fg() {
    if (wp) return Kr;
    (wp = 1),
      Object.defineProperty(Kr, '__esModule', { value: !0 }),
      (Kr.BoxScoreEngine = Kr.BoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = Di(),
      v = we(),
      h = za(),
      s = qo(),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'stats', {
            get: function () {
              return s.TeamPlayerStats.toTeamsStatDoc(this.teamPlayerStats, this.teamPoints);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPoints', {
            get: function () {
              return this.get('teamPoints');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPlayerStats', {
            get: function () {
              return this.get('stats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(p.MultiSportBoxScoreState);
    Kr.BoxScoreState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n, e) {
        var t = y.call(this, a, n, e) || this;
        return (t.baseEvents = a), (t.score = n), (t.activePlayerEngine = e), t;
      }
      return (
        (o.prototype.initialState = function () {
          return new l(
            c.fromJS({
              teams: [],
              teamPoints: {},
              playForPlayer: {},
              startedPlayerCount: 0,
              stats: c.Map(),
            })
          );
        }),
        (o.prototype.processOneEvent = function (a, n) {
          var e = this;
          switch (n.code) {
            case v.MultiSportEventCode.SetTeams:
              return o.handleSetTeams(a, n);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(
                a,
                n,
                h.RUGBY_CONFIGURATION.play_codes,
                function (t, d) {
                  return e.handlePlay(t, d);
                }
              );
            case v.MultiSportEventCode.AssignPlayer:
              return this.handleAssignPlayer(a, n);
            case v.MultiSportEventCode.AdjustScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.OverrideScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.ActivatePlayer:
              return o.handleActivatePlayer(a, n);
            default:
              return a;
          }
        }),
        (o.handleSetTeams = function (a, n) {
          var e = n.attributes,
            t = e.homeId,
            d = e.awayId;
          return a
            .setIn(['teamPoints', t], 0)
            .setIn(['teamPoints', d], 0)
            .setIn(['teams'], c.List.of(t, d))
            .setIn(['stats'], s.TeamPlayerStats.fromTeams(c.List.of(t, d)))
            .updateIn(['stats', t, r.TOTAL], s.Stats.empty(), function (f) {
              return f.setIn([s.RugbyStat.GP], 1);
            })
            .updateIn(['stats', d, r.TOTAL], s.Stats.empty(), function (f) {
              return f.setIn([s.RugbyStat.GP], 1);
            });
        }),
        (o.prototype.handleScoreChange = function (a, n) {
          var e = n.attributes.team_id,
            t = this.score.stateAfterEvent(this.nextEventOffset).scores[e];
          return a.setIn(['teamPoints', e], t);
        }),
        (o.handleActivatePlayer = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.player_id;
          return o.markPlayerSeen(d, t, a);
        }),
        (o.prototype.determineEventPlayValue = function (a) {
          switch (a.code) {
            case v.MultiSportEventCode.Play:
              var n = a.attributes.play_code;
              switch (n) {
                case h.PlayCode.Try:
                  return h.RUGBY_POINTS.try;
                case h.PlayCode.Conversion:
                  return h.RUGBY_POINTS.conversion;
                case h.PlayCode.PenaltyGoal:
                  return h.RUGBY_POINTS.penalty_goal;
                case h.PlayCode.DropGoal:
                  return h.RUGBY_POINTS.drop_goal;
                default:
                  return 0;
              }
            case v.MultiSportEventCode.AdjustScore:
              return a.attributes.adjustment;
            case v.MultiSportEventCode.OverrideScore:
              return a.attributes.points;
            default:
              return 0;
          }
        }),
        (o.prototype.handlePlay = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.play_code;
          return this.handleScoreChange(
            a
              .updateIn(['stats', t, r.UNASSIGNED_PLAYER], s.Stats.empty(), function (f) {
                return s.Stats.addPlay(f, d);
              })
              .updateIn(['stats', t, r.TOTAL], s.Stats.empty(), function (f) {
                return s.Stats.addPlay(f, d);
              }),
            n
          );
        }),
        (o.prototype.handleAssignPlayer = function (a, n) {
          var e = n.attributes,
            t = e.play_event_id,
            d = e.player_id,
            f = this.baseEvents,
            _ = a.getIn(['playForPlayer', t], r.UNASSIGNED_PLAYER),
            S =
              f[this.indexForEventId(t)] ||
              f.slice(this.nextEventOffset).find(function (E) {
                return E.id === t;
              }),
            P = S.attributes,
            I = P.team_id,
            b = P.play_code;
          return (0, v.onValidPlayCode)(a, S, h.RUGBY_CONFIGURATION.play_codes, function () {
            return o.markPlayerSeen(
              d,
              I,
              a
                .setIn(['playForPlayer', t], d)
                .updateIn(['stats', I, d], s.Stats.empty(), function (E) {
                  return s.Stats.addPlay(E, b);
                })
                .updateIn(['stats', I, _], s.Stats.empty(), function (E) {
                  return s.Stats.removePlay(E, b);
                })
            );
          });
        }),
        (o.markPlayerSeen = function (a, n, e) {
          var t = ['stats', n, a];
          return e.updateIn(t, s.Stats.empty(), function (d) {
            return d.setIn([s.RugbyStat.GP], 1);
          });
        }),
        o
      );
    })(p.MultiSportBoxScoreEngine);
    return (Kr.BoxScoreEngine = u), Kr;
  }
  var Jr = {},
    Cp;
  function kg() {
    if (Cp) return Jr;
    (Cp = 1),
      Object.defineProperty(Jr, '__esModule', { value: !0 }),
      (Jr.PerPeriodBoxScoreEngine = Jr.PeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = we(),
      v = Gi(),
      h = qo(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'periodStats', {
            get: function () {
              var o = this.get('statsPerPeriod');
              return o.reduce(function (a, n, e) {
                var t = n.reduce(function (d, f, _) {
                  return d.setIn([_], f.getIn([r.TOTAL, h.RugbyStat.PTS]));
                }, c.Map());
                return (a[e] = h.TeamPlayerStats.toTeamsStatDoc(n, t)), a;
              }, {});
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'lineScores', {
            get: function () {
              return Object.entries(this.periodStats)
                .reduce(function (o, a) {
                  var n = a[0],
                    e = a[1],
                    t = parseInt(n, 10),
                    d = Object.entries(e).reduce(function (f, _) {
                      var S = _[0],
                        P = _[1];
                      return (f[S] = P.stats.offense[h.RugbyStat.PTS]), f;
                    }, {});
                  return Object.entries(d).reduce(function (f, _) {
                    var S = _[0],
                      P = _[1],
                      I = f.getIn([S], c.List());
                    return (I = I.insert(t, P)), f.setIn([S], I);
                  }, o);
                }, c.Map())
                .toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(v.MultiSportPeriodBoxScoreState);
    Jr.PeriodBoxScoreState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o, a, n) {
        var e = u.call(this, o, a, n) || this;
        return (e.baseEvents = o), (e.period = a), (e.stats = n), e;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ statsPerPeriod: c.Map() }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          switch (a.code) {
            case p.MultiSportEventCode.Play:
            case p.MultiSportEventCode.SetTeams:
            case p.MultiSportEventCode.AssignPlayer:
            case p.MultiSportEventCode.AdjustScore:
            case p.MultiSportEventCode.OverrideScore:
              return this.handleStatsChange(o);
            default:
              return o;
          }
        }),
        (y.prototype.handleStatsChange = function (o) {
          var a;
          if (this.stats) {
            var n = this.stats.stateAfterEvent(this.nextEventOffset),
              e = h.TeamPlayerStats.fromTeamsStatDoc(n.stats),
              t = this.period.stateAfterEvent(this.nextEventOffset),
              d = Math.max(1, t.period - (t.isActive ? 0 : 1)),
              f = (a = c.List).of.apply(a, e.keySeq().toArray()),
              _ = function (b) {
                return o.getIn(['statsPerPeriod', b], P);
              },
              S = Array.from({ length: d }, function (b, E) {
                return ++E;
              }),
              P = h.TeamPlayerStats.fromTeams(f),
              I =
                d === 1
                  ? e
                  : S.slice(0, -1).reduce(function (b, E) {
                      return h.TeamPlayerStats.subtract(b, _(E));
                    }, e);
            return S.reduce(function (b, E) {
              return b.updateIn(['statsPerPeriod', E], function (T) {
                return E === d ? I : T || P;
              });
            }, o);
          } else return o;
        }),
        y
      );
    })(v.MultiSportPerPeriodBoxScoreEngine);
    return (Jr.PerPeriodBoxScoreEngine = l), Jr;
  }
  var Va = {},
    Mp;
  function wg() {
    if (Mp) return Va;
    (Mp = 1),
      Object.defineProperty(Va, '__esModule', { value: !0 }),
      (Va.PlayByPlayEngine = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = mt(),
      p = za(),
      v = (function (h) {
        i.__extends(s, h);
        function s() {
          return (h !== null && h.apply(this, arguments)) || this;
        }
        return (
          (s.prototype.handlePlay = function (l, u) {
            var y = this.period.stateBeforeEvent(this.nextEventOffset),
              o = l;
            if (y && y.isActive === !1) {
              var a = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'Start of period '.concat(y.period),
                  id: 'start_of_period_'.concat(y.period),
                  playByPlayType: r.PlayByPlayType.StartPeriod,
                  period: y.period,
                  playerAssignable: !1,
                  teamAssignable: !1,
                  deletable: !1,
                  createdAt: u.createdAt,
                })
              );
              o = o.pushEntry(a);
            }
            var n = u.attributes.play_code,
              e;
            if (
              n === p.PlayCode.Try ||
              n === p.PlayCode.Conversion ||
              n === p.PlayCode.PenaltyGoal ||
              n === p.PlayCode.DropGoal
            ) {
              var t = this.score.stateAfterEvent(this.nextEventOffset);
              e = t == null ? void 0 : t.scoresImmutable;
            } else e = void 0;
            var d = new r.PlayByPlayEntry(
              c.fromJS({
                template: ''.concat(u.attributes.play_code, ' by ').concat(u.attributes.team_id),
                id: u.attributes.pbp_entry_id,
                playByPlayType: r.PlayByPlayType.Play,
                eventIds: [u.id],
                playCode: n,
                teamId: u.attributes.team_id,
                teamScores: e,
                playerAssignable: !0,
                teamAssignable: !0,
                deletable: !0,
                createdAt: u.createdAt,
              })
            );
            return o.pushEntry(d);
          }),
          s
        );
      })(r.MultiSportPlayByPlayEngine);
    return (Va.PlayByPlayEngine = v), Va;
  }
  var Ka = {},
    xp;
  function Cg() {
    if (xp) return Ka;
    (xp = 1), Object.defineProperty(Ka, '__esModule', { value: !0 }), (Ka.ScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = za(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.handlePlay = function (s, l) {
            var u = l.attributes.play_code,
              y = l.attributes.team_id;
            switch (u) {
              case r.PlayCode.Try:
                return s.incrementScore(y, r.RUGBY_POINTS.try);
              case r.PlayCode.Conversion:
                return s.incrementScore(y, r.RUGBY_POINTS.conversion);
              case r.PlayCode.PenaltyGoal:
                return s.incrementScore(y, r.RUGBY_POINTS.penalty_goal);
              case r.PlayCode.DropGoal:
                return s.incrementScore(y, r.RUGBY_POINTS.drop_goal);
              default:
                return s;
            }
          }),
          h
        );
      })(c.MultiSportScoreEngine);
    return (Ka.ScoreEngine = p), Ka;
  }
  var Lp;
  function Mg() {
    if (Lp) return $a;
    (Lp = 1),
      Object.defineProperty($a, '__esModule', { value: !0 }),
      ($a.RugbyCompactorController = void 0);
    var i = Q,
      c = Tr(),
      r = Oa(),
      p = Aa(),
      v = Ra(),
      h = Fg(),
      s = za(),
      l = Fa(),
      u = kg(),
      y = wg(),
      o = Cg(),
      a = qo(),
      n = Ma(),
      e = (function (t) {
        i.__extends(d, t);
        function d() {
          var f = t.call(this) || this;
          (f.stateAccessorClass = n.SharedStateAccessor),
            (f.activePlayer = new v.MultiSportActivePlayerEngine([], s.RUGBY_CONFIGURATION)),
            (f.period = new l.MultiSportPeriodEngine([], s.RUGBY_CONFIGURATION)),
            (f.score = new o.ScoreEngine([], s.RUGBY_CONFIGURATION)),
            (f.stats = new h.BoxScoreEngine([], f.score, f.activePlayer)),
            (f.playByPlay = new y.PlayByPlayEngine(
              [],
              s.RUGBY_CONFIGURATION,
              f.activePlayer,
              f.period,
              f.score
            )),
            (f.lineScore = new p.LinescoreEngine([], f.period, f.score, s.RUGBY_CONFIGURATION)),
            (f.statsPerPeriod = new u.PerPeriodBoxScoreEngine([], f.period, f.stats)),
            (f.engines = [
              f.activePlayer,
              f.period,
              f.score,
              f.playByPlay,
              f.lineScore,
              f.statsPerPeriod,
              f.stats,
            ]),
            (f.compactor = new c.SabertoothEventCompactor());
          for (var _ = 0, S = f.engines; _ < S.length; _++) {
            var P = S[_];
            P.baseEvents = f.compactor.outStream;
          }
          return f;
        }
        return (
          (d.prototype.getDerivedMultiGameStatsWithBaseStats = function (f) {
            return a.TeamPlayerStats.getDerivedMultiGameStatsWithBaseStats(f);
          }),
          (d.prototype.processVoiceEvents = function (f, _) {
            throw new Error('Voice Scoring not supported by this sport');
          }),
          (d.prototype.announcements = function (f) {
            throw new Error('Announcements not supported by this sport');
          }),
          d
        );
      })(r.MultiSportCompactorController);
    return ($a.RugbyCompactorController = e), $a;
  }
  var Ja = {},
    Yr = {},
    Uo = {},
    Wo = {},
    Dp;
  function ln() {
    return (
      Dp ||
        ((Dp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.ServeOutcome = i.VOLLEYBALL_CONFIGURATION = i.PlayCode = void 0);
          var c;
          (function (r) {
            (r.Point = 'point'), (r.Serve = 'serve');
          })((c = i.PlayCode || (i.PlayCode = {}))),
            (i.VOLLEYBALL_CONFIGURATION = { play_codes: Object.values(c) }),
            (function (r) {
              (r.In = 'in'), (r.Ace = 'ace'), (r.Error = 'error');
            })(i.ServeOutcome || (i.ServeOutcome = {}));
        })(Wo)),
      Wo
    );
  }
  var Gp;
  function $o() {
    return (
      Gp ||
        ((Gp = 1),
        (function (i) {
          Object.defineProperty(i, '__esModule', { value: !0 }),
            (i.TeamPlayerStats = i.Stats = i.VolleyballStat = void 0);
          var c = Q,
            r = c.__importStar(de()),
            p = c.__importStar(Sa()),
            v = He(),
            h = we(),
            s = ln(),
            l;
          (function (e) {
            (e.PTS = 'PTS'), (e.GP = 'GP'), (e.SH = 'SH');
          })((l = i.VolleyballStat || (i.VolleyballStat = {})));
          var u;
          (function (e) {
            function t() {
              return Object.values(l);
            }
            e.values = t;
            function d() {
              return y(
                e.values().reduce(function (b, E) {
                  return b.set(E, 0);
                }, r.Map())
              );
            }
            e.empty = d;
            function f(b, E) {
              if ((0, h.isValidPlayCode)(E, s.VOLLEYBALL_CONFIGURATION.play_codes))
                return P(!0, b, E);
              p.unreachablePlayCode(E);
            }
            e.addPlay = f;
            function _(b, E) {
              if ((0, h.isValidPlayCode)(E, s.VOLLEYBALL_CONFIGURATION.play_codes))
                return P(!1, b, E);
              p.unreachablePlayCode(E);
            }
            e.removePlay = _;
            function S(b) {
              switch (b) {
                default:
                  return;
              }
            }
            e.averageKey = S;
            function P(b, E, T) {
              return y(
                (function () {
                  switch (T) {
                    case s.PlayCode.Point:
                      return I(b, E, l.SH);
                    default:
                      return E;
                  }
                })()
              );
            }
            function I(b, E) {
              for (var T = [], F = 2; F < arguments.length; F++) T[F - 2] = arguments[F];
              return T.reduce(function (R, L) {
                return R.updateIn([L], 0, function (x) {
                  return b ? ++x : --x;
                });
              }, E);
            }
          })((u = i.Stats || (i.Stats = {}))),
            (function (e) {
              function t(R) {
                var L = Object.entries(R).reduce(function (N, M) {
                    var J = M[0],
                      D = M[1];
                    return N.setIn([J], D.stats.offense[l.PTS]);
                  }, r.Map.of()),
                  x = e.fromTeamsStatDoc(R, !1);
                return e.toTeamsStatDoc(x, L);
              }
              e.getDerivedMultiGameStatsWithBaseStats = t;
              function d(R) {
                return R.toJS().reduce(function (L, x) {
                  var N = r.Map().set(v.TOTAL, u.empty()).set(v.UNASSIGNED_PLAYER, u.empty());
                  return L.set(x, N);
                }, r.Map());
              }
              e.fromTeams = d;
              function f(R, L) {
                return L.reduce(function (x, N, M) {
                  var J = R.getIn([M, v.TOTAL, l.PTS]),
                    D = R.getIn([M, v.UNASSIGNED_PLAYER, l.PTS]),
                    $ = R.setIn([M, v.TOTAL, l.PTS], J).setIn([M, v.UNASSIGNED_PLAYER, l.PTS], D);
                  return (x[M] = E($.get(M))), x;
                }, {});
              }
              e.toTeamsStatDoc = f;
              function _(R, L) {
                return Object.entries(R).reduce(function (x, N) {
                  var M = N[0],
                    J = N[1],
                    D = J.stats,
                    $ = J.unassigned,
                    z = J.players,
                    q = Object.entries(z)
                      .reduce(function (V, U) {
                        var j = U[0],
                          re = U[1];
                        return V.setIn([M, j], b(re.stats, !!L));
                      }, x)
                      .setIn([M, v.TOTAL], b(D, !!L));
                  return $ ? q.setIn([M, v.UNASSIGNED_PLAYER], b($.stats, !1)) : q;
                }, r.fromJS({}));
              }
              e.fromTeamsStatDoc = _;
              function S(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], P(R.get(M), L.get(M)));
                }, r.Map());
              }
              e.subtract = S;
              function P(R, L) {
                return R.reduce(function (x, N, M) {
                  return x.setIn([M], I(R.get(M), L.get(M, u.empty())));
                }, r.Map());
              }
              function I(R, L) {
                return n(
                  R.reduce(function (x, N, M) {
                    return x.setIn([M], R.get(M) - L.get(M, 0));
                  }, u.empty()),
                  void 0
                );
              }
              function b(R, L) {
                return n(r.fromJS(R.offense), L);
              }
              function E(R) {
                return R.reduce(
                  function (L, x, N) {
                    switch (N) {
                      case v.TOTAL:
                      case v.UNASSIGNED_PLAYER:
                        return L;
                      default:
                        return (L.players[N] = T(x)), L;
                    }
                  },
                  {
                    players: {},
                    unassigned: T(R.get(v.UNASSIGNED_PLAYER)),
                    stats: F(R.get(v.TOTAL)),
                  }
                );
              }
              function T(R) {
                return { stats: F(R) };
              }
              function F(R) {
                return { offense: R.toJS() };
              }
            })(i.TeamPlayerStats || (i.TeamPlayerStats = {}));
          function y(e) {
            return o(e, a, n);
          }
          function o(e) {
            for (var t = [], d = 1; d < arguments.length; d++) t[d - 1] = arguments[d];
            return t.reduce(function (f, _) {
              return _(f);
            }, e);
          }
          function a(e) {
            var t = function (f) {
                return e.get(f, 0);
              },
              d = t(l.SH);
            return e.setIn([l.PTS], d);
          }
          function n(e, t) {
            var d = function (S) {
                return e.get(S, 0);
              },
              f = function (S, P) {
                return d(S) / d(P);
              },
              _ = e;
            return (
              (_ = o(_)),
              t
                ? u.values().reduce(function (S, P) {
                    var I = u.averageKey(P);
                    return I ? S.setIn([I], f(P, l.GP)) : S;
                  }, _)
                : _
            );
          }
        })(Uo)),
      Uo
    );
  }
  var Hp;
  function xg() {
    if (Hp) return Yr;
    (Hp = 1),
      Object.defineProperty(Yr, '__esModule', { value: !0 }),
      (Yr.BoxScoreEngine = Yr.BoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = Di(),
      v = we(),
      h = $o(),
      s = ln(),
      l = (function (y) {
        i.__extends(o, y);
        function o() {
          return (y !== null && y.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(o.prototype, 'stats', {
            get: function () {
              return h.TeamPlayerStats.toTeamsStatDoc(this.teamPlayerStats, this.teamPoints);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPoints', {
            get: function () {
              return this.get('teamPoints');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(o.prototype, 'teamPlayerStats', {
            get: function () {
              return this.get('stats');
            },
            enumerable: !1,
            configurable: !0,
          }),
          o
        );
      })(p.MultiSportBoxScoreState);
    Yr.BoxScoreState = l;
    var u = (function (y) {
      i.__extends(o, y);
      function o(a, n, e) {
        var t = y.call(this, a, n, e) || this;
        return (t.baseEvents = a), (t.score = n), (t.activePlayerEngine = e), t;
      }
      return (
        (o.prototype.initialState = function () {
          return new l(
            c.fromJS({
              teams: [],
              teamPoints: {},
              playForPlayer: {},
              startedPlayerCount: 0,
              stats: c.Map(),
            })
          );
        }),
        (o.prototype.processOneEvent = function (a, n) {
          var e = this;
          switch (n.code) {
            case v.MultiSportEventCode.SetTeams:
              return o.handleSetTeams(a, n);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(
                a,
                n,
                s.VOLLEYBALL_CONFIGURATION.play_codes,
                function (t, d) {
                  return e.handlePlay(t, d);
                }
              );
            case v.MultiSportEventCode.AssignPlayer:
              return this.handleAssignPlayer(a, n);
            case v.MultiSportEventCode.AdjustScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.OverrideScore:
              return this.handleScoreChange(a, n);
            case v.MultiSportEventCode.ActivatePlayer:
              return o.handleActivatePlayer(a, n);
            default:
              return a;
          }
        }),
        (o.handleSetTeams = function (a, n) {
          var e = n.attributes,
            t = e.homeId,
            d = e.awayId;
          return a
            .setIn(['teamPoints', t], 0)
            .setIn(['teamPoints', d], 0)
            .setIn(['teams'], c.List.of(t, d))
            .setIn(['stats'], h.TeamPlayerStats.fromTeams(c.List.of(t, d)))
            .updateIn(['stats', t, r.TOTAL], h.Stats.empty(), function (f) {
              return f.setIn([h.VolleyballStat.GP], 1);
            })
            .updateIn(['stats', d, r.TOTAL], h.Stats.empty(), function (f) {
              return f.setIn([h.VolleyballStat.GP], 1);
            });
        }),
        (o.prototype.handleScoreChange = function (a, n) {
          var e = n.attributes.team_id,
            t = this.score.stateAfterEvent(this.nextEventOffset).scores[e];
          return a.setIn(['teamPoints', e], t);
        }),
        (o.handleActivatePlayer = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.player_id;
          return o.markPlayerSeen(d, t, a);
        }),
        (o.prototype.determineEventPlayValue = function (a) {
          switch (a.code) {
            case v.MultiSportEventCode.Play:
              var n = a.attributes.play_code;
              switch (n) {
                case s.PlayCode.Point:
                  return 1;
                default:
                  return 0;
              }
            case v.MultiSportEventCode.AdjustScore:
              return a.attributes.adjustment;
            case v.MultiSportEventCode.OverrideScore:
              return a.attributes.points;
            default:
              return 0;
          }
        }),
        (o.prototype.handlePlay = function (a, n) {
          var e = n.attributes,
            t = e.team_id,
            d = e.play_code;
          return this.handleScoreChange(
            a
              .updateIn(['stats', t, r.UNASSIGNED_PLAYER], h.Stats.empty(), function (f) {
                return h.Stats.addPlay(f, d);
              })
              .updateIn(['stats', t, r.TOTAL], h.Stats.empty(), function (f) {
                return h.Stats.addPlay(f, d);
              }),
            n
          );
        }),
        (o.prototype.handleAssignPlayer = function (a, n) {
          var e = n.attributes,
            t = e.play_event_id,
            d = e.player_id,
            f = this.baseEvents,
            _ = a.getIn(['playForPlayer', t], r.UNASSIGNED_PLAYER),
            S =
              f[this.indexForEventId(t)] ||
              f.slice(this.nextEventOffset).find(function (E) {
                return E.id === t;
              }),
            P = S.attributes,
            I = P.team_id,
            b = P.play_code;
          return (0, v.onValidPlayCode)(a, S, s.VOLLEYBALL_CONFIGURATION.play_codes, function () {
            return o.markPlayerSeen(
              d,
              I,
              a
                .setIn(['playForPlayer', t], d)
                .updateIn(['stats', I, d], h.Stats.empty(), function (E) {
                  return h.Stats.addPlay(E, b);
                })
                .updateIn(['stats', I, _], h.Stats.empty(), function (E) {
                  return h.Stats.removePlay(E, b);
                })
            );
          });
        }),
        (o.markPlayerSeen = function (a, n, e) {
          var t = ['stats', n, a];
          return e.updateIn(t, h.Stats.empty(), function (d) {
            return d.setIn([h.VolleyballStat.GP], 1);
          });
        }),
        o
      );
    })(p.MultiSportBoxScoreEngine);
    return (Yr.BoxScoreEngine = u), Yr;
  }
  var Qr = {},
    Np;
  function Lg() {
    if (Np) return Qr;
    (Np = 1),
      Object.defineProperty(Qr, '__esModule', { value: !0 }),
      (Qr.PerPeriodBoxScoreEngine = Qr.PeriodBoxScoreState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = He(),
      p = $o(),
      v = Gi(),
      h = we(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'periodStats', {
            get: function () {
              var o = this.get('statsPerPeriod');
              return o.reduce(function (a, n, e) {
                var t = n.reduce(function (d, f, _) {
                  return d.setIn([_], f.getIn([r.TOTAL, p.VolleyballStat.PTS]));
                }, c.Map());
                return (a[e] = p.TeamPlayerStats.toTeamsStatDoc(n, t)), a;
              }, {});
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'lineScores', {
            get: function () {
              return Object.entries(this.periodStats)
                .reduce(function (o, a) {
                  var n = a[0],
                    e = a[1],
                    t = parseInt(n, 10),
                    d = Object.entries(e).reduce(function (f, _) {
                      var S = _[0],
                        P = _[1];
                      return (f[S] = P.stats.offense[p.VolleyballStat.PTS]), f;
                    }, {});
                  return Object.entries(d).reduce(function (f, _) {
                    var S = _[0],
                      P = _[1],
                      I = f.getIn([S], c.List());
                    return (I = I.insert(t, P)), f.setIn([S], I);
                  }, o);
                }, c.Map())
                .toJS();
            },
            enumerable: !1,
            configurable: !0,
          }),
          y
        );
      })(v.MultiSportPeriodBoxScoreState);
    Qr.PeriodBoxScoreState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o, a, n) {
        var e = u.call(this, o, a, n) || this;
        return (e.baseEvents = o), (e.period = a), (e.stats = n), e;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ statsPerPeriod: c.Map() }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          switch (a.code) {
            case h.MultiSportEventCode.Play:
            case h.MultiSportEventCode.SetTeams:
            case h.MultiSportEventCode.AssignPlayer:
            case h.MultiSportEventCode.AdjustScore:
            case h.MultiSportEventCode.OverrideScore:
              return this.handleStatsChange(o);
            default:
              return o;
          }
        }),
        (y.prototype.handleStatsChange = function (o) {
          var a;
          if (this.stats) {
            var n = this.stats.stateAfterEvent(this.nextEventOffset),
              e = p.TeamPlayerStats.fromTeamsStatDoc(n.stats),
              t = this.period.stateAfterEvent(this.nextEventOffset),
              d = Math.max(1, t.period - (t.isActive ? 0 : 1)),
              f = (a = c.List).of.apply(a, e.keySeq().toArray()),
              _ = function (b) {
                return o.getIn(['statsPerPeriod', b], P);
              },
              S = Array.from({ length: d }, function (b, E) {
                return ++E;
              }),
              P = p.TeamPlayerStats.fromTeams(f),
              I =
                d === 1
                  ? e
                  : S.slice(0, -1).reduce(function (b, E) {
                      return p.TeamPlayerStats.subtract(b, _(E));
                    }, e);
            return S.reduce(function (b, E) {
              return b.updateIn(['statsPerPeriod', E], function (T) {
                return E === d ? I : T || P;
              });
            }, o);
          } else return o;
        }),
        y
      );
    })(v.MultiSportPerPeriodBoxScoreEngine);
    return (Qr.PerPeriodBoxScoreEngine = l), Qr;
  }
  var Ya = {},
    jp;
  function Dg() {
    if (jp) return Ya;
    (jp = 1),
      Object.defineProperty(Ya, '__esModule', { value: !0 }),
      (Ya.PlayByPlayEngine = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = mt(),
      p = ln(),
      v = (function (h) {
        i.__extends(s, h);
        function s(l, u, y, o, a, n, e, t) {
          var d = h.call(this, l, u, o, a, n, t) || this;
          return (
            (d.baseEvents = l),
            (d.configuration = u),
            (d.setScoreEngine = y),
            (d.activePlayer = o),
            (d.period = a),
            (d.score = n),
            (d.servingEngine = e),
            (d.stats = t),
            d
          );
        }
        return (
          (s.prototype.handleBeginPlay = function (l, u) {
            var y = new r.PlayByPlayEntry(
              c.fromJS({
                template: 'Begin Play',
                id: 'begin_play',
                playByPlayType: r.PlayByPlayType.BeginPlay,
                eventIds: [u.id],
                playerAssignable: !1,
                teamAssignable: !1,
                deletable: !0,
              })
            );
            return (l = l.pushInProgressEntry(y)), l.setInProgress(!0);
          }),
          (s.prototype.handleEndPlay = function (l, u) {
            var y = l.setInProgress(!1),
              o = y.inProgressEntries;
            if (o.isEmpty()) return y;
            var a = o.reduce(function (e, t) {
                var d,
                  f = e;
                switch (t == null ? void 0 : t.playCode) {
                  case p.PlayCode.Point:
                    switch (f.playCode) {
                      case p.PlayCode.Serve:
                        if (f.playDetails) {
                          var _ = f.playDetails.get('serve_outcome'),
                            S = {
                              serve_outcome: _ ?? '',
                              serving_team_id:
                                (d = f == null ? void 0 : f.teamId) !== null && d !== void 0
                                  ? d
                                  : '',
                            };
                          return t
                            .setIn(['playDetails'], S)
                            .setIn(['playerId'], f.playerId)
                            .setIn(
                              ['template'],
                              'Serve '
                                .concat(_, ' by ')
                                .concat(f.teamId, ', Point by ')
                                .concat(t.teamId)
                            );
                        } else return t;
                      default:
                        return t;
                    }
                  default:
                    return t;
                }
              }),
              n = [];
            return (
              o.map(function (e) {
                var t, d;
                return n.push.apply(
                  n,
                  (d =
                    (t = e == null ? void 0 : e.eventIds) === null || t === void 0
                      ? void 0
                      : t.toArray()) !== null && d !== void 0
                    ? d
                    : []
                );
              }),
              n.push.apply(n, [u.id]),
              (a = a == null ? void 0 : a.setIn(['eventIds'], c.List(n))),
              (y = y.clearInProgressEntries()),
              y.pushEntry(a)
            );
          }),
          (s.prototype.handlePlay = function (l, u) {
            var y = this.period.stateBeforeEvent(this.nextEventOffset),
              o = l;
            if (y && !y.isActive) {
              var a = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'Start of period '.concat(y.period),
                  id: 'start_of_period_'.concat(y.period),
                  playByPlayType: r.PlayByPlayType.StartPeriod,
                  period: y.period,
                  playerAssignable: !1,
                  teamAssignable: !1,
                  deletable: !1,
                  createdAt: u.createdAt,
                })
              );
              o = o.pushEntry(a);
            }
            var n, e;
            switch (u.attributes.play_code) {
              case p.PlayCode.Point:
                n = this.setScoreEngine.stateAfterEvent(this.nextEventOffset).scoresImmutable;
                break;
              case p.PlayCode.Serve:
                e = this.servingEngine.stateBeforeEvent(this.nextEventOffset).servingInfo.playerId;
                break;
            }
            var t = new r.PlayByPlayEntry(
              c.fromJS({
                template: ''
                  .concat(u.attributes.play_code, ' by ')
                  .concat(e ?? u.attributes.team_id),
                id: u.attributes.pbp_entry_id,
                playByPlayType: r.PlayByPlayType.Play,
                eventIds: [u.id],
                playCode: u.attributes.play_code,
                teamId: u.attributes.team_id,
                playerId: e,
                periodScores: n,
                playerAssignable: !0,
                teamAssignable: !0,
                deletable: !0,
                createdAt: u.createdAt,
                playDetails: u.attributes.play_details,
                initialState: {
                  servingTeamId: this.servingEngine.stateBeforeEvent(this.nextEventOffset)
                    .servingInfo.teamId,
                },
              })
            );
            return o.isInProgress ? o.pushInProgressEntry(t) : o.pushEntry(t);
          }),
          (s.prototype.handleAdjustScore = function (l, u) {
            var y = u.attributes.team_id,
              o = u.attributes.adjustment,
              a = this.score.stateAfterEvent(this.nextEventOffset),
              n = this.setScoreEngine.stateAfterEvent(this.nextEventOffset),
              e = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'Score adjusted: '.concat(o, ' for ').concat(y),
                  id: u.attributes.pbp_entry_id,
                  playByPlayType: r.PlayByPlayType.ScoreAdjustment,
                  eventIds: [u.id],
                  teamId: y,
                  teamScores: a == null ? void 0 : a.scoresImmutable,
                  periodScores: n == null ? void 0 : n.scoresImmutable,
                  scoreAdjustment: o,
                  playerAssignable: !1,
                  teamAssignable: !0,
                  deletable: !0,
                  createdAt: u.createdAt,
                })
              );
            return l.pushEntry(e);
          }),
          (s.prototype.handleEndPeriod = function (l, u) {
            var y = this.period.stateBeforeEvent(this.nextEventOffset),
              o = this.score.stateAfterEvent(this.nextEventOffset),
              a = this.setScoreEngine.stateBeforeEvent(this.nextEventOffset),
              n = new r.PlayByPlayEntry(
                c.fromJS({
                  template: 'End of period '.concat(y == null ? void 0 : y.period),
                  id: 'end_of_period_'.concat(y == null ? void 0 : y.period),
                  playByPlayType: r.PlayByPlayType.EndPeriod,
                  eventIds: [u.id],
                  period: y == null ? void 0 : y.period,
                  teamScores: o == null ? void 0 : o.scoresImmutable,
                  periodScores: a == null ? void 0 : a.scoresImmutable,
                  playerAssignable: !1,
                  teamAssignable: !1,
                  deletable: !0,
                  createdAt: u.createdAt,
                })
              );
            return l.pushEntry(n);
          }),
          s
        );
      })(r.MultiSportPlayByPlayEngine);
    return (Ya.PlayByPlayEngine = v), Ya;
  }
  var Qa = {},
    qp;
  function Gg() {
    if (qp) return Qa;
    (qp = 1),
      Object.defineProperty(Qa, '__esModule', { value: !0 }),
      (Qa.MatchScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = (function (p) {
        i.__extends(v, p);
        function v(h, s, l) {
          var u = p.call(this, h, s) || this;
          return (u.baseEvents = h), (u.setScoreEngine = l), u;
        }
        return (
          (v.prototype.handlePlay = function (h, s) {
            return h;
          }),
          (v.prototype.handleEndPeriod = function (h) {
            var s = h.homeId,
              l = h.awayId,
              u = this.setScoreEngine.stateBeforeEvent(this.nextEventOffset).scores,
              y = u[l],
              o = u[s];
            if (o === y) return h;
            var a = o > y ? s : l;
            return h.incrementScore(a, 1);
          }),
          v
        );
      })(c.MultiSportScoreEngine);
    return (Qa.MatchScoreEngine = r), Qa;
  }
  var Xa = {},
    Up;
  function Hg() {
    if (Up) return Xa;
    (Up = 1),
      Object.defineProperty(Xa, '__esModule', { value: !0 }),
      (Xa.VolleyballLineScoreEngine = void 0);
    var i = Q,
      c = Aa(),
      r = (function (p) {
        i.__extends(v, p);
        function v(h, s, l, u, y) {
          var o = p.call(this, h, s, l, y) || this;
          return (o.baseEvents = h), (o.period = s), (o.score = l), (o.setScore = u), o;
        }
        return (
          (v.prototype.update = function (h) {
            var s = this.period.stateAfterEvent(this.nextEventOffset),
              l = s.period - (s.isActive ? 0 : 1),
              u = this.setScore.stateAfterEvent(this.nextEventOffset),
              y = u.awayId,
              o = u.homeId,
              a = u.scores,
              n = a[o],
              e = a[y];
            return h
              .updateIn(['lineScores', o], (0, c.pushInLinescore)(l, n))
              .updateIn(['lineScores', y], (0, c.pushInLinescore)(l, e));
          }),
          v
        );
      })(c.LinescoreEngine);
    return (Xa.VolleyballLineScoreEngine = r), Xa;
  }
  var Za = {},
    ei = {},
    Wp;
  function Ng() {
    if (Wp) return ei;
    (Wp = 1),
      Object.defineProperty(ei, '__esModule', { value: !0 }),
      (ei.MultiSportPeriodScoreEngine = void 0);
    var i = Q,
      c = un(),
      r = (function (p) {
        i.__extends(v, p);
        function v() {
          return (p !== null && p.apply(this, arguments)) || this;
        }
        return (
          (v.prototype.handleEndPeriod = function (h) {
            return h.resetScores();
          }),
          v
        );
      })(c.MultiSportScoreEngine);
    return (ei.MultiSportPeriodScoreEngine = r), ei;
  }
  var $p;
  function jg() {
    if ($p) return Za;
    ($p = 1), Object.defineProperty(Za, '__esModule', { value: !0 }), (Za.SetScoreEngine = void 0);
    var i = Q,
      c = ln(),
      r = Ng(),
      p = (function (v) {
        i.__extends(h, v);
        function h() {
          return (v !== null && v.apply(this, arguments)) || this;
        }
        return (
          (h.prototype.handlePlay = function (s, l) {
            var u = l.attributes.play_code,
              y = l.attributes.team_id;
            switch (u) {
              case c.PlayCode.Point:
                return s.incrementScore(y, 1);
              default:
                return s;
            }
          }),
          h
        );
      })(r.MultiSportPeriodScoreEngine);
    return (Za.SetScoreEngine = p), Za;
  }
  var ti = {},
    zp;
  function qg() {
    if (zp) return ti;
    (zp = 1),
      Object.defineProperty(ti, '__esModule', { value: !0 }),
      (ti.VolleyballStateAccessor = void 0);
    var i = Q,
      c = Ma(),
      r = (function (p) {
        i.__extends(v, p);
        function v(h, s) {
          var l = p.call(this, h, s) || this;
          return (l.controller = s), l;
        }
        return (
          Object.defineProperty(v.prototype, 'setScores', {
            get: function () {
              return this.get('scores', this.controller.setScoreEngine);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'servingInfo', {
            get: function () {
              return this.get('servingInfo', this.controller.servingEngine);
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'scorekeepingState', {
            get: function () {
              return i.__assign(i.__assign({}, p.prototype.getScorekeepingState.call(this)), {
                gameSituation: this.currentGameSituation,
              });
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(v.prototype, 'currentGameSituation', {
            get: function () {
              return i.__assign(i.__assign({}, p.prototype.getCurrentGameSituation.call(this)), {
                setScores: this.setScores,
                servingInfo: this.servingInfo,
              });
            },
            enumerable: !1,
            configurable: !0,
          }),
          v
        );
      })(c.SharedStateAccessor);
    return (ti.VolleyballStateAccessor = r), ti;
  }
  var Xr = {},
    Vp;
  function Ug() {
    if (Vp) return Xr;
    (Vp = 1),
      Object.defineProperty(Xr, '__esModule', { value: !0 }),
      (Xr.ServingEngine = Xr.ServingState = void 0);
    var i = Q,
      c = i.__importStar(de()),
      r = i.__importStar(Ie()),
      p = i.__importStar(be()),
      v = we(),
      h = ln(),
      s = (function (u) {
        i.__extends(y, u);
        function y() {
          return (u !== null && u.apply(this, arguments)) || this;
        }
        return (
          Object.defineProperty(y.prototype, 'servingInfoImmutable', {
            get: function () {
              return this.get('servingInfo');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'homeId', {
            get: function () {
              return this.get('homeId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'awayId', {
            get: function () {
              return this.get('awayId');
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'servingInfo', {
            get: function () {
              return this.servingInfoImmutable;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'teamId', {
            get: function () {
              return this.servingInfo.teamId;
            },
            enumerable: !1,
            configurable: !0,
          }),
          Object.defineProperty(y.prototype, 'playerId', {
            get: function () {
              return this.servingInfo.playerId;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (y.prototype.setServingTeam = function (o) {
            return this.teamId === o
              ? this
              : this.set('servingInfo', { teamId: o, playerId: void 0, assignLater: !1 });
          }),
          (y.prototype.setServingPlayer = function (o, a) {
            return this.set('servingInfo', { teamId: this.teamId, playerId: o, assignLater: a });
          }),
          (y.prototype.switchTeams = function () {
            return this.teamId === this.homeId
              ? this.setServingTeam(this.awayId)
              : this.teamId === this.awayId
                ? this.setServingTeam(this.homeId)
                : this;
          }),
          y
        );
      })(p.ImmutableState);
    Xr.ServingState = s;
    var l = (function (u) {
      i.__extends(y, u);
      function y(o) {
        var a = u.call(this, o) || this;
        return (a.baseEvents = o), a;
      }
      return (
        (y.prototype.initialState = function () {
          return new s(c.fromJS({ servingInfo: {} }));
        }),
        (y.prototype.processOneEvent = function (o, a) {
          var n = this;
          switch (a.code) {
            case v.MultiSportEventCode.SetTeams:
              return this.handleSetTeams(o, a);
            case v.MultiSportEventCode.Play:
              return (0, v.onValidPlayCode)(
                o,
                a,
                h.VOLLEYBALL_CONFIGURATION.play_codes,
                function (e, t) {
                  return n.handlePlay(e, t);
                }
              );
            case v.MultiSportEventCode.SetServer:
              return this.handleSetServer(o, a);
            case v.MultiSportEventCode.EndPeriod:
              return this.handleEndPeriod(o);
            default:
              return o;
          }
        }),
        (y.prototype.handleSetTeams = function (o, a) {
          var n = a.attributes.homeId,
            e = a.attributes.awayId;
          return o.set('homeId', n).set('awayId', e).setServingTeam(n);
        }),
        (y.prototype.handleSetServer = function (o, a) {
          var n = a.attributes.team_id,
            e = a.attributes.player_id,
            t = a.attributes.assign_later;
          return o.setServingTeam(n).setServingPlayer(e, t);
        }),
        (y.prototype.handlePlay = function (o, a) {
          var n = a.attributes.team_id,
            e = a.attributes.play_code;
          switch (e) {
            case h.PlayCode.Point:
              return o.setServingTeam(n);
            default:
              return o;
          }
        }),
        (y.prototype.handleEndPeriod = function (o) {
          return o.switchTeams();
        }),
        y
      );
    })(r.VersionedStateEngine);
    return (Xr.ServingEngine = l), Xr;
  }
  var ri = {},
    Zr = {},
    Kp;
  function Wg() {
    if (Kp) return Zr;
    (Kp = 1),
      Object.defineProperty(Zr, '__esModule', { value: !0 }),
      (Zr.makeServe = Zr.makeSetServer = void 0);
    var i = Me(),
      c = we();
    function r(v) {
      var h = v.teamId,
        s = v.playerId,
        l = v.assignLater,
        u = l === void 0 ? !1 : l,
        y = v.pbpEntryId,
        o = v.createdAt,
        a = o === void 0 ? void 0 : o;
      return {
        id: (0, i.uuid4)(),
        code: c.MultiSportEventCode.SetServer,
        createdAt: a,
        attributes: {
          pbp_entry_id: y || (0, i.uuid4)(),
          team_id: h,
          player_id: s,
          assign_later: u,
        },
        compactorAttributes: { stream: 'main' },
      };
    }
    Zr.makeSetServer = r;
    function p(v) {
      var h = v.teamId,
        s = v.pbpEntryId,
        l = v.serveOutcome,
        u = v.id,
        y = u === void 0 ? void 0 : u,
        o = v.createdAt,
        a = o === void 0 ? void 0 : o;
      return {
        id: y ?? (0, i.uuid4)(),
        code: c.MultiSportEventCode.Play,
        createdAt: a,
        attributes: {
          pbp_entry_id: s || (0, i.uuid4)(),
          team_id: h,
          play_code: 'serve',
          play_details: { serve_outcome: l },
        },
        compactorAttributes: { stream: 'main' },
      };
    }
    return (Zr.makeServe = p), Zr;
  }
  var Jp;
  function $g() {
    if (Jp) return ri;
    (Jp = 1),
      Object.defineProperty(ri, '__esModule', { value: !0 }),
      (ri.makeMetaEventToSetServer = void 0);
    var i = mt(),
      c = Me(),
      r = Wg();
    function p(v, h, s) {
      if (v.eventIds === void 0 || v.eventIds.size === 0)
        throw new Error('entry is missing eventIds');
      if (!v.eventIds.contains(s)) throw new Error("entry doesn't contains the beforeId");
      if (v.teamId === void 0) throw new Error('entry is missing teamId');
      if (v.playByPlayType !== i.PlayByPlayType.Play)
        throw new Error('entry is wrong play type '.concat(v.playByPlayType));
      var l;
      return (
        v.playDetails && v.playDetails.serving_team_id
          ? (l = v.playDetails.serving_team_id)
          : (l = v.teamId),
        {
          id: (0, c.uuid4)(),
          code: 'insert',
          beforeId: s,
          events: [
            (0, r.makeSetServer)({
              teamId: l,
              playerId: h,
              assignLater: !1,
              createdAt: v.createdAt,
            }),
          ],
        }
      );
    }
    return (ri.makeMetaEventToSetServer = p), ri;
  }
  var Yp;
  function zg() {
    if (Yp) return Ja;
    (Yp = 1),
      Object.defineProperty(Ja, '__esModule', { value: !0 }),
      (Ja.VolleyballCompactorController = void 0);
    var i = Q,
      c = Tr(),
      r = Ra(),
      p = xg(),
      v = ln(),
      h = Fa(),
      s = Lg(),
      l = Dg(),
      u = Gg(),
      y = $o(),
      o = Hg(),
      a = jg(),
      n = qg(),
      e = Ug(),
      t = Oa(),
      d = $g(),
      f = mt(),
      _ = (function (S) {
        i.__extends(P, S);
        function P() {
          var I = S.call(this) || this;
          (I.stateAccessorClass = n.VolleyballStateAccessor),
            (I.activePlayer = new r.MultiSportActivePlayerEngine([], v.VOLLEYBALL_CONFIGURATION)),
            (I.period = new h.MultiSportPeriodEngine([], v.VOLLEYBALL_CONFIGURATION)),
            (I.setScoreEngine = new a.SetScoreEngine([], v.VOLLEYBALL_CONFIGURATION)),
            (I.score = new u.MatchScoreEngine([], v.VOLLEYBALL_CONFIGURATION, I.setScoreEngine)),
            (I.stats = new p.BoxScoreEngine([], I.score, I.activePlayer)),
            (I.servingEngine = new e.ServingEngine([])),
            (I.playByPlay = new l.PlayByPlayEngine(
              [],
              v.VOLLEYBALL_CONFIGURATION,
              I.setScoreEngine,
              I.activePlayer,
              I.period,
              I.score,
              I.servingEngine,
              I.stats
            )),
            (I.lineScore = new o.VolleyballLineScoreEngine(
              [],
              I.period,
              I.score,
              I.setScoreEngine,
              v.VOLLEYBALL_CONFIGURATION
            )),
            (I.statsPerPeriod = new s.PerPeriodBoxScoreEngine([], I.period, I.stats)),
            (I.engines = [
              I.activePlayer,
              I.period,
              I.setScoreEngine,
              I.score,
              I.playByPlay,
              I.lineScore,
              I.statsPerPeriod,
              I.stats,
              I.servingEngine,
            ]),
            (I.compactor = new c.SabertoothEventCompactor());
          for (var b = 0, E = I.engines; b < E.length; b++) {
            var T = E[b];
            T.baseEvents = I.compactor.outStream;
          }
          return I;
        }
        return (
          (P.prototype.getDerivedMultiGameStatsWithBaseStats = function (I) {
            return y.TeamPlayerStats.getDerivedMultiGameStatsWithBaseStats(I);
          }),
          (P.prototype.processVoiceEvents = function (I, b) {
            throw new Error('Voice Scoring not supported by this sport');
          }),
          (P.prototype.getMetaEventToChangePlayer = function (I, b) {
            var E = this.playByPlay.currentState.entryForEventId(I);
            if (E !== void 0) {
              var T = E.entry;
              return T.playByPlayType === f.PlayByPlayType.Play &&
                (T.playCode === v.PlayCode.Serve || (T.playDetails && T.playDetails.serve_outcome))
                ? (0, d.makeMetaEventToSetServer)(T, b, I)
                : S.prototype.getMetaEventToChangePlayer.call(this, I, b);
            }
          }),
          (P.prototype.getMetaEventToUnassignPlayer = function (I) {
            var b = this.playByPlay.currentState.entryForEventId(I);
            if (b !== void 0) {
              var E = b.entry;
              return E.playByPlayType === f.PlayByPlayType.Play &&
                (E.playCode === v.PlayCode.Serve || (E.playDetails && E.playDetails.serve_outcome))
                ? (0, d.makeMetaEventToSetServer)(E, void 0, I)
                : S.prototype.getMetaEventToUnassignPlayer.call(this, I);
            }
          }),
          (P.prototype.announcements = function (I) {
            throw new Error('Announcements not supported by this sport');
          }),
          P
        );
      })(t.MultiSportCompactorController);
    return (Ja.VolleyballCompactorController = _), Ja;
  }
  Object.defineProperty(In, '__esModule', { value: !0 }), (In.controllers = void 0);
  var Vg = Q,
    Qp = Vg.__importStar(bv()),
    Kg = Cv(),
    Jg = Gv(),
    Yg = zv(),
    Qg = Qv(),
    Xg = Ag(),
    Zg = Rg(),
    e_ = Mg(),
    t_ = zg();
  (In.controllers = {
    baseball: {
      usingTranscoder: Qp.BaseballTranscoderController,
      usingCompactor: Qp.BaseballCompactorController,
    },
    basketball: {
      usingCompactor: Kg.BasketballCompactorController,
      usingPassthrough: Jg.BasketballPassthroughController,
    },
    hoops: { usingCompactor: Xg.HoopsCompactorController },
    goalSport: { usingCompactor: Qg.GoalSportCompactorController },
    rugby: { usingCompactor: e_.RugbyCompactorController },
    football: { usingCompactor: Yg.FootballCompactorController },
    volleyball: { usingCompactor: t_.VolleyballCompactorController },
    statTableColumnsAccessor: { usingCompactor: Zg.StatTableColumnsAccessor },
  }),
    (function (i) {
      Object.defineProperty(i, '__esModule', { value: !0 }), (i.controllers = void 0);
      var c = In,
        r = Nt,
        p = In;
      Object.defineProperty(i, 'controllers', {
        enumerable: !0,
        get: function () {
          return p.controllers;
        },
      }),
        typeof window < 'u' &&
          ((window.controllers = c.controllers),
          (window.transcoderConfigFromStream = r.transcoderConfigFromStream));
    })(Iu);
  const Xp = self;
  let Ui;
  const Zp = Xp.postMessage;
  Xp.onmessage = (i) => {
    const c = i.data;
    switch (c.code) {
      case 'init':
        return r_(c);
      case 'call_method_on_controller':
        return n_(c);
      case 'get_property_on_state_accessor':
        return a_(c);
      case 'call_method_on_state_accessor':
        return i_(c);
      default:
        return eh(`Unexpected message ${c}`);
    }
  };
  function eh(i) {
    Zp({ code: 'log', attributes: { content: i } });
  }
  function Wi(i, c) {
    Zp({ code: 'fulfill', id: i.id, attributes: { value: c } });
  }
  function r_(i) {
    const { sport: c, controllerType: r, constructorArgs: p } = i.attributes;
    (Ui = new Iu.controllers[c][r](...p)),
      eh(`Started new Sabertooth controller with sport ${c} and type ${r}`),
      Wi(i, !0);
  }
  function n_(i) {
    const { methodName: c, args: r } = i.attributes,
      p = Ui[c](...r);
    Wi(i, p);
  }
  function th(i, c) {
    return i === 'latestState' ? Ui.latestState() : Ui[i](c);
  }
  function a_(i) {
    const { propertyName: c, stateAccessor: r, stateAccessorArgument: p } = i.attributes,
      v = th(r, p);
    Wi(i, v[c]);
  }
  function i_(i) {
    const { methodName: c, args: r, stateAccessor: p, stateAccessorArgument: v } = i.attributes,
      h = th(p, v);
    Wi(i, h[c](...r));
  }
})();
//# sourceMappingURL=sabertooth.worker-BcJ8MxW8.js.map
